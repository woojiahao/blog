<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin on jiahao.blog</title><link>/tags/kotlin/</link><description>Recent content in Kotlin on jiahao.blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploying discord bots written in Kotlin to Heroku</title><link>/post/deploying-discord-bot-kotlin/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>/post/deploying-discord-bot-kotlin/</guid><description>Over my time in TPH, I have noticed that a common woe aspiring bot developers have is that they are unable to host their Discord bot online as they may not have access to a credit card.
Introducing Heroku! While the official Discord bots used in TPH - like HotBot - is hosted via paid platforms, there are free alternatives to deploying your bot online. This is where Heroku comes into the picture!</description></item><item><title>Heroku x Docker x Discord bot x Kotlin</title><link>/post/heroku-kotlin-discord-bot/</link><pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate><guid>/post/heroku-kotlin-discord-bot/</guid><description>You may be wondering what&amp;rsquo;s up with the over the top, nearly fan-ship name, trust me, I was not on anything when I wrote this.
I simply wanted to write about a playground project I had written to get Docker working with Heroku, specifically in the context of writing a Discord bot in Kotlin.
I made a rather comprehensive guide to go with the project over on GitHub and I wish to share it here as well since it was a rather large milestone.</description></item><item><title>Applications of Kotlin's delegate properties</title><link>/post/kotlin-delegate-properties/</link><pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate><guid>/post/kotlin-delegate-properties/</guid><description>Announcement time! After a long hiatus from kMD2PDF, I revved up my engines and began to work on my latest planned feature for the project&amp;hellip;
YAML support!
Yes, now YAML is in the works and you can now control basic attributes of your exported document using only front matter YAML.
This is an incredibly big milestone as this allows anyone to quickly customise their document without having to write a single line of Kotlin, and with another planned release to create a GUI exporter for markdown documents, this would greatly streamline users&amp;rsquo; experience.</description></item><item><title>Porting to FlexMark</title><link>/post/porting-flexmark/</link><pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate><guid>/post/porting-flexmark/</guid><description>kMD2PDF now finally uses FlexMark as the back end for the markdown to html conversion. This is a big moment as now a lot more flexibility has been introduced for the library and that means more features.
Following my promise of making smaller and more frequent release updates, this port has ushered in version 0.2.1 of kMD2PDF and I&amp;rsquo;m really excited!
Changelog Backend library using flexmark Unit testing framework set up for testing node rendering Task list items now supported Original design Originally, the library used commonmark to handle .</description></item><item><title>Lessons on software release</title><link>/post/lessons-on-software-release/</link><pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate><guid>/post/lessons-on-software-release/</guid><description>Oh boy, I screwed up bad, like really badly. Ok ok, let&amp;rsquo;s go back and see where it all began. I&amp;rsquo;ve learnt countless lessons from this and I hope you (reader) will too if you&amp;rsquo;re developing your own software.
Story time! 2 months ago, I embarked on a journey to write a markdown to PDF converter, called kMD2PDF. The initial architecture was developed such that:
.md file -&amp;gt; .html file + .</description></item><item><title>Familiarising yourself with lambdas in Kotlin</title><link>/post/kotlin-lambdas/</link><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><guid>/post/kotlin-lambdas/</guid><description>Kotlin is a language that was built on top of the JVM and what really sets it apart from Java is the emphasis on functions being a first-class construct, meaning many fancy things like lambdas are directly available to Kotlin developers without having to include bulky constructs like the concept of functional interfaces.
What are lambdas? In my article on Diving Into Streams, I explained how lambdas were this miraculous constructs in Java that removed a lot of the boilerplate required when passing behavior from one method to another.</description></item></channel></rss>