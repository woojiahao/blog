<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Open-source Deep Dive on jiahao.blog</title><link>https://woojiahao.com/blog/tags/open-source-deep-dive/</link><description>Recent content in Open-source Deep Dive on jiahao.blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 12 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://woojiahao.com/blog/tags/open-source-deep-dive/index.xml" rel="self" type="application/rss+xml"/><item><title>Open-source Deep Dive: Broadway (Part 1) - Message queues, concurrency in Elixir, and Broadway architecture</title><link>https://woojiahao.com/blog/post/odd-broadway-1/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://woojiahao.com/blog/post/odd-broadway-1/</guid><description>This open-source deep dive has been split into two parts! The first part covers the prerequisite knowledge that would be good to know when trying to understand the inner workings of Broadway. The second part is an in-depth analysis of the implementation of various features of Broadway.
This is the first part of the deep dive and the following topics will be covered:
A brief introduction to what Broadway is Message queues Concurrency in Elixir Producer/consumer model &amp;amp; GenStage Architecture of a Broadway pipeline Construction of producer &amp;amp; processor components If you wish to jump right into the meat of Broadway, you can find the second part here!</description></item><item><title>Open-source Deep Dive: Broadway (Part 2) - Inner workings of Broadway</title><link>https://woojiahao.com/blog/post/odd-broadway-2/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://woojiahao.com/blog/post/odd-broadway-2/</guid><description>This open-source deep dive has been split into two parts! The first part covers the prerequisite knowledge that would be good to know when trying to understand the inner workings of Broadway. The second part is an in-depth analysis of the implementation of various features of Broadway.
This is the second part of the deep dive and the following topics will be covered:
Rate limiting Batching messages Telemetry Creating a built-in testing support for pipelines Achieving graceful shutdowns Other interesting bits of code If you want a refresher on the concepts behind Broadway (like message queues and concurrency in Elixir) or to better understand Broadway&amp;rsquo;s pipeline architecture from a bird&amp;rsquo;s eye view, you can find the first part here!</description></item><item><title>Open-source Deep Dive: Hound</title><link>https://woojiahao.com/blog/post/odd-hound/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>https://woojiahao.com/blog/post/odd-hound/</guid><description>What is Hound? For browser automation and writing integration tests in Elixir
Let&amp;rsquo;s inspect this definition a little closer&amp;hellip;
What is browser automation? Browser automation is effectively the process of using a proxy (like Selenium or Hound) to perform browser actions on behalf of the user (like the test case). Essentially, we are automating the usage of the browser.
It is often associated with illegal applications like sneaker-botting but much like torrenting, there are positive applications and we will be exploring one of them in this post - integration testing.</description></item></channel></rss>