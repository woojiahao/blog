<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Programming on jiahao.blog</title><link>/tags/functional-programming/</link><description>Recent content in Functional Programming on jiahao.blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Familiarising yourself with lambdas in Kotlin</title><link>/post/kotlin-lambdas/</link><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><guid>/post/kotlin-lambdas/</guid><description>Kotlin is a language that was built on top of the JVM and what really sets it apart from Java is the emphasis on functions being a first-class construct, meaning many fancy things like lambdas are directly available to Kotlin developers without having to include bulky constructs like the concept of functional interfaces.
What are lambdas? In my article on Diving Into Streams, I explained how lambdas were this miraculous constructs in Java that removed a lot of the boilerplate required when passing behavior from one method to another.</description></item><item><title>Diving into (Java) streams</title><link>/post/diving-into-streams/</link><pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate><guid>/post/diving-into-streams/</guid><description>What are streams? Streams was introduced in Java 1.8 and it had completely changed how we write code. The majority of what I will be discussing will be what I have learnt from watching this talk by Venkat Subramaniam. His talk was what had originally got me into using streams and the concept of lambdas.
Let&amp;rsquo;s revise How do we implement a lambda in Java? Lambdas are simple constructs with very powerful use cases in Java and many other languages.</description></item></channel></rss>