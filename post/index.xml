<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on jiahao.blog</title><link>https://blog.woojiahao.com/post/</link><description>Recent content in Posts on jiahao.blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.woojiahao.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Installing UxPlay on Arch Linux</title><link>https://blog.woojiahao.com/post/uxplay-arch-linux/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/uxplay-arch-linux/</guid><description>I got my iPad Air 4 a few months ago and have been wanting to test the AirPlay functionality on it. However, as I am on Manjaro Linux - a Linux distribution based on Arch Linux, I was unable to get the native support that MacOS has.
I stumbled upon UxPlay as a potential solution for this problem.
UxPlay is an AirPlay Unix mirroring server that acts like an AppleTV for screen-mirroring on the machine that is running the server.</description></item><item><title>Open-source Deep Dive: Broadway (Part 1) - Message queues, concurrency in Elixir, and Broadway architecture</title><link>https://blog.woojiahao.com/post/odd-broadway-1/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/odd-broadway-1/</guid><description>This open-source deep dive has been split into two parts! The first part covers the prerequisite knowledge that would be good to know when trying to understand the inner workings of Broadway. The second part is an in-depth analysis of the implementation of various features of Broadway.
This is the first part of the deep dive and the following topics will be covered:
A brief introduction to what Broadway is Message queues Concurrency in Elixir Producer/consumer model &amp;amp; GenStage Architecture of a Broadway pipeline Construction of producer &amp;amp; processor components If you wish to jump right into the meat of Broadway, you can find the second part here!</description></item><item><title>Open-source Deep Dive: Broadway (Part 2) - Inner workings of Broadway</title><link>https://blog.woojiahao.com/post/odd-broadway-2/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/odd-broadway-2/</guid><description>This open-source deep dive has been split into two parts! The first part covers the prerequisite knowledge that would be good to know when trying to understand the inner workings of Broadway. The second part is an in-depth analysis of the implementation of various features of Broadway.
This is the second part of the deep dive and the following topics will be covered:
Rate limiting Batching messages Telemetry Creating a built-in testing support for pipelines Achieving graceful shutdowns Other interesting bits of code If you want a refresher on the concepts behind Broadway (like message queues and concurrency in Elixir) or to better understand Broadway&amp;rsquo;s pipeline architecture from a bird&amp;rsquo;s eye view, you can find the first part here!</description></item><item><title>Open-source Deep Dive: Hound</title><link>https://blog.woojiahao.com/post/odd-hound/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/odd-hound/</guid><description>What is Hound? For browser automation and writing integration tests in Elixir
Let&amp;rsquo;s inspect this definition a little closer&amp;hellip;
What is browser automation? Browser automation is effectively the process of using a proxy (like Selenium or Hound) to perform browser actions on behalf of the user (like the test case). Essentially, we are automating the usage of the browser.
It is often associated with illegal applications like sneaker-botting but much like torrenting, there are positive applications and we will be exploring one of them in this post - integration testing.</description></item><item><title>The truth behind software projects</title><link>https://blog.woojiahao.com/post/software-projects-truth/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/software-projects-truth/</guid><description>It&amp;rsquo;s 3am. You are one commit away from launching your first release of your latest idea. It&amp;rsquo;s an AI system to help people recommend names for their pets through pictures (clearly, Spot isn&amp;rsquo;t a great name). You take a swig of coffee. You fix the bug that has been sitting on the top of your Trello board for days now. git add . &amp;amp;&amp;amp; git commit -am &amp;quot;Fix issue where AI takes over the world&amp;quot; and you are off.</description></item><item><title>Deploying discord bots written in Kotlin to Heroku</title><link>https://blog.woojiahao.com/post/deploying-discord-bot-kotlin/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/deploying-discord-bot-kotlin/</guid><description>Over my time in TPH, I have noticed that a common woe aspiring bot developers have is that they are unable to host their Discord bot online as they may not have access to a credit card.
Introducing Heroku! While the official Discord bots used in TPH - like HotBot - is hosted via paid platforms, there are free alternatives to deploying your bot online. This is where Heroku comes into the picture!</description></item><item><title>Gatsby.js + GitHub Actions + GitHub Pages = Match Made in Heaven?</title><link>https://blog.woojiahao.com/post/gatsby-gh-pages/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/gatsby-gh-pages/</guid><description>After a long hiatus induced by the demons that was school, I have finally defeated the final boss and graduated!
With that, I have started to work on re-building my portfolio site (you&amp;rsquo;re seeing it right now!). I wanted to learn Gatsby.js and so I figured it would be the best time to do so! While working with Gatsby.js, one of the issues that I had faced was not having a proper guide on deploying Gatsby.</description></item><item><title>Heroku x Docker x Discord bot x Kotlin</title><link>https://blog.woojiahao.com/post/heroku-kotlin-discord-bot/</link><pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/heroku-kotlin-discord-bot/</guid><description>You may be wondering what&amp;rsquo;s up with the over the top, nearly fan-ship name, trust me, I was not on anything when I wrote this.
I simply wanted to write about a playground project I had written to get Docker working with Heroku, specifically in the context of writing a Discord bot in Kotlin.
I made a rather comprehensive guide to go with the project over on GitHub and I wish to share it here as well since it was a rather large milestone.</description></item><item><title>Applications of Kotlin's delegate properties</title><link>https://blog.woojiahao.com/post/kotlin-delegate-properties/</link><pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/kotlin-delegate-properties/</guid><description>Announcement time! After a long hiatus from kMD2PDF, I revved up my engines and began to work on my latest planned feature for the project&amp;hellip;
YAML support!
Yes, now YAML is in the works and you can now control basic attributes of your exported document using only front matter YAML.
This is an incredibly big milestone as this allows anyone to quickly customise their document without having to write a single line of Kotlin, and with another planned release to create a GUI exporter for markdown documents, this would greatly streamline users&amp;rsquo; experience.</description></item><item><title>Porting to FlexMark</title><link>https://blog.woojiahao.com/post/porting-flexmark/</link><pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/porting-flexmark/</guid><description>kMD2PDF now finally uses FlexMark as the back end for the markdown to html conversion. This is a big moment as now a lot more flexibility has been introduced for the library and that means more features.
Following my promise of making smaller and more frequent release updates, this port has ushered in version 0.2.1 of kMD2PDF and I&amp;rsquo;m really excited!
Changelog Backend library using flexmark Unit testing framework set up for testing node rendering Task list items now supported Original design Originally, the library used commonmark to handle .</description></item><item><title>Lessons on software release</title><link>https://blog.woojiahao.com/post/lessons-on-software-release/</link><pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/lessons-on-software-release/</guid><description>Oh boy, I screwed up bad, like really badly. Ok ok, let&amp;rsquo;s go back and see where it all began. I&amp;rsquo;ve learnt countless lessons from this and I hope you (reader) will too if you&amp;rsquo;re developing your own software.
Story time! 2 months ago, I embarked on a journey to write a markdown to PDF converter, called kMD2PDF. The initial architecture was developed such that:
.md file -&amp;gt; .html file + .</description></item><item><title>An investigation into generics in Java</title><link>https://blog.woojiahao.com/post/java-generics/</link><pubDate>Mon, 26 Nov 2018 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/java-generics/</guid><description>Generics was a feature introduced in Java 5 and it has changed how Java developers write code.
This article will be discussing some of the things I&amp;rsquo;ve picked up as I dug into generics in Java.
Uses of generics Pre-generics era Imagine you wish to create a container to store an object that can be of any type, pre-generics, you would need to do something like:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Container { private Object obj; public Object getObj() { return obj; } public void setObj(Object obj) { this.</description></item><item><title>Familiarising yourself with lambdas in Kotlin</title><link>https://blog.woojiahao.com/post/kotlin-lambdas/</link><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/kotlin-lambdas/</guid><description>Kotlin is a language that was built on top of the JVM and what really sets it apart from Java is the emphasis on functions being a first-class construct, meaning many fancy things like lambdas are directly available to Kotlin developers without having to include bulky constructs like the concept of functional interfaces.
What are lambdas? In my article on Diving Into Streams, I explained how lambdas were this miraculous constructs in Java that removed a lot of the boilerplate required when passing behavior from one method to another.</description></item><item><title>Diving into (Java) streams</title><link>https://blog.woojiahao.com/post/diving-into-streams/</link><pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.woojiahao.com/post/diving-into-streams/</guid><description>What are streams? Streams was introduced in Java 1.8 and it had completely changed how we write code. The majority of what I will be discussing will be what I have learnt from watching this talk by Venkat Subramaniam. His talk was what had originally got me into using streams and the concept of lambdas.
Let&amp;rsquo;s revise How do we implement a lambda in Java? Lambdas are simple constructs with very powerful use cases in Java and many other languages.</description></item></channel></rss>