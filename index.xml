<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jiahao.blog</title><link>https://woojiahao.com/blog/</link><description>Recent content on jiahao.blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 12 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://woojiahao.com/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Open-source Deep Dive: Broadway (Part 1) - Message queues, concurrency in Elixir, and Broadway architecture</title><link>https://woojiahao.com/blog/post/odd-broadway-1/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://woojiahao.com/blog/post/odd-broadway-1/</guid><description>
&lt;p>This open-source deep dive has been split into two parts! The first part covers the prerequisite knowledge that would be
good to know when trying to understand the inner workings of Broadway. The second part is an in-depth analysis of the
implementation of various features of Broadway.&lt;/p>
&lt;p>This is the first part of the deep dive and the following topics will be covered:&lt;/p>
&lt;ol>
&lt;li>A brief introduction to what Broadway is&lt;/li>
&lt;li>Message queues&lt;/li>
&lt;li>Concurrency in Elixir&lt;/li>
&lt;li>Producer/consumer model &amp;amp; GenStage&lt;/li>
&lt;li>Architecture of a Broadway pipeline&lt;/li>
&lt;li>Construction of producer &amp;amp; processor components&lt;/li>
&lt;/ol>
&lt;p>If you wish to jump right into the meat of Broadway, you can find the second
part &lt;a href="open-source-deep-dive-broadway-part-2">here!&lt;/a>.&lt;/p>
&lt;h1 id="act-1-scene-1">
&lt;a href="#act-1-scene-1" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
&lt;strong>Act 1, Scene 1&lt;/strong>
&lt;/h1>
&lt;p>&lt;em>You have just received your latest feature to work on and it is to build a system that receives transaction information
from a message queue, maps the customer code in this transaction information to the customer&amp;rsquo;s information, and stores
this collective information in a separate database to be queried for customer transaction analysis. Your boss has
developed an obsession with Elixir recently and is now pushing for every project to use it. Gasp.&lt;/em>&lt;/p>
&lt;p>You start researching for libraries that can do exactly that and stumble
upon &lt;a href="https://github.com/dashbitco/broadway">Broadway&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip;build &lt;strong>[concurrent]&lt;/strong> and &lt;strong>[multi-stage]&lt;/strong> &lt;strong>[data ingestion]&lt;/strong> and &lt;strong>[data processing] [pipelines]&lt;/strong>&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>Oh boy&amp;hellip; that — that is a mouthful&amp;hellip; Let&amp;rsquo;s break it down, shall we?&lt;/p>
&lt;ol>
&lt;li>&lt;strong>concurrent&lt;/strong> - having two or more computations in progress at the same time; &lt;em>in progress&lt;/em> meaning that they do not
have to be executed at the same time (
definition &lt;a href="https://www.oreilly.com/library/view/the-art-of/9780596802424/">here&lt;/a>)&lt;/li>
&lt;li>&lt;strong>multi-stage&lt;/strong> - successive operating stages (
definition &lt;a href="https://www.merriam-webster.com/dictionary/multistage">here&lt;/a>)&lt;/li>
&lt;li>&lt;strong>data ingestion&lt;/strong> - process of moving data from one source to a destination for further storage and analysis (
definition &lt;a href="https://www.alooma.com/blog/what-is-data-ingestion#:~:text=Data%20ingestion%20is%20a%20process,%2C%20CSVs%2C%20or%20from%20streams.">here&lt;/a>)&lt;/li>
&lt;li>&lt;strong>data processing&lt;/strong> - conversion of data into a usable and desirable form (
definition &lt;a href="https://planningtank.com/computer-applications/data-processing#:~:text=Data%20processing%20is%20the%20conversion,devices%2C%20and%20thus%20done%20automatically.">here&lt;/a>)&lt;/li>
&lt;li>&lt;strong>pipelines&lt;/strong> - series of data processing elements (
definition &lt;a href="https://en.wikipedia.org/wiki/Pipeline_(computing)#:~:text=In%20computing%2C%20a%20pipeline%2C%20also,or%20in%20time%2Dsliced%20fashion.">here&lt;/a>)&lt;/li>
&lt;/ol>
&lt;p>In essence, Broadway builds systems that behave like factory assembly lines. Raw materials (data) is fed into the
assembly line (Broadway pipeline) which is then pieced together to create the end product or other components used in
the final product. The factory has multiple identical assembly lines running so raw material can be fed into any of
these lines to be worked on.&lt;/p>
&lt;p>For your use case, the flow of data will look something like this:&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/open-source-deep-dive/broadway/pipeline.jpg"
alt="Sample scenario flowchart"
width=534
height="462" />&lt;/p>
&lt;p>So how does Broadway achieve all of this?&lt;/p>
&lt;h1 id="lights-camera-action">
&lt;a href="#lights-camera-action" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Lights! Camera! Action!
&lt;/h1>
&lt;p>Before understanding the internals of Broadway, we should establish some basic knowledge of the technologies we will be
using so that we won&amp;rsquo;t be headless chickens running into this.&lt;/p>
&lt;p>Broadway revolve around the following concepts:&lt;/p>
&lt;ol>
&lt;li>message queues&lt;/li>
&lt;li>concurrency in Elixir&lt;/li>
&lt;/ol>
&lt;h2 id="what-are-message-queues">
&lt;a href="#what-are-message-queues" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What are message queues?
&lt;/h2>
&lt;p>&lt;strong>Note!&lt;/strong> While Broadway can integrate with many types of data sources, the core examples given in the project focus on
message queues as the primary data source.&lt;/p>
&lt;blockquote>
&lt;p>Message queues are like containers that hold sequences of work objects — called messages — that are to be consumed and
processed. It aids with building asynchronous modular and concurrent systems.&lt;/p>
&lt;/blockquote>
&lt;p>Messages are created and delivered to these queues by &lt;strong>producers&lt;/strong> and taken from these queues for processing by **
consumers.** These messages can vary from something as simple as plain information to more complex structures like
requests or — in our case — transaction information.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/open-source-deep-dive/broadway/message_queue.png"
alt="Message queue architecture"
width=1000
height="199" />&lt;/p>
&lt;p>Message queues are useful for &lt;strong>decentralising the communication mechanism of large systems&lt;/strong> by acting as a medium for
exchanging events between systems which allows for systems to be easily scaled and distributed.&lt;/p>
&lt;p>This is a reduced explanation of what a message queue is and what it is capable of. For more information about message
queues, the &lt;a href="https://aws.amazon.com/message-queue/">Amazon documentation&lt;/a> and
this &lt;a href="https://www.cloudamqp.com/blog/what-is-message-queuing.html#:~:text=A%20message%20queue%20is%20a,some%20headers%20at%20the%20top.">blog post&lt;/a>
by CloudAMQP are good places to start.&lt;/p>
&lt;h2 id="concurrency-in-elixir">
&lt;a href="#concurrency-in-elixir" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Concurrency in Elixir
&lt;/h2>
&lt;p>Broadway relies heavily on concurrency in Elixir. The topology (architecture) of a pipeline is built on top of processes
and many of the features are achieved using the robust concurrency model of Elixir. So what exactly is the concurrency
model in Elixir?&lt;/p>
&lt;p>Elixir employs the &lt;strong>actor concurrency model&lt;/strong>. In this model, actors are defined as &lt;strong>self-isolated units of
processing&lt;/strong>. In Elixir, these actors are called &lt;strong>processes&lt;/strong> and they are managed by
the &lt;a href="https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine)#:~:text=BEAM%20is%20the%20virtual%20machine,beam%20file%20extension.">Erlang VM&lt;/a>
. Elixir code is run in each process and a default/main process is akin to that of
the &lt;a href="https://cocoacasts.com/swift-and-cocoa-fundamentals-what-is-the-main-thread">main thread&lt;/a> in other concurrency
models.&lt;/p>
&lt;p>Each process communicates via &lt;strong>asynchronous message passing&lt;/strong>. Think of a process as a mailbox of sorts; it has a &amp;ldquo;bin&amp;rdquo;
to receive incoming messages and it possess an &amp;ldquo;address&amp;rdquo; for other processes to identify it by.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/open-source-deep-dive/broadway/actor_concurrency_model.png"
alt="Actor concurrency model visualisation"
width=1920
height="903" />&lt;/p>
&lt;p>The unique aspect of this model is the &lt;strong>lack of shared mutable state&lt;/strong> that other concurrency models rely on. Rather,
state is exclusive to each process.&lt;/p>
&lt;p>In order for the state of a process to be altered, the owner process must make the alteration either on request or
internally due to certain changes.&lt;/p>
&lt;p>The topic of concurrency in Elixir is vast and Elixir provides many other features surrounding its concurrency model
such as &lt;a href="https://elixir-lang.org/getting-started/mix-otp/genserver.html">GenServer&lt;/a>. This section is a short preview of
what the actor concurrency model and concurrency in Elixir is all about. For more information, you can refer to
this &lt;a href="https://berb.github.io/diploma-thesis/original/054_actors.html">thesis paper&lt;/a> and
the &lt;a href="https://en.wikipedia.org/wiki/Actor_model#:~:text=The%20actor%20model%20in%20computer,universal%20primitive%20of%20concurrent%20computation.&amp;amp;text=Actors%20may%20modify%20their%20own,for%20lock%2Dbased%20synchronization">Wikipedia article&lt;/a>
talking about the actor concurrency model and the
official &lt;a href="https://elixir-lang.org/getting-started/processes.html">documentation&lt;/a> and
this &lt;a href="https://serokell.io/blog/elixir-otp-guide">tutorial&lt;/a> on OTP in Elixir for more examples of concurrency in Elixir.&lt;/p>
&lt;h2 id="cue-the-producerconsumer-model">
&lt;a href="#cue-the-producerconsumer-model" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Cue the producer/consumer model
&lt;/h2>
&lt;p>Using the actor concurrency model as a foundation, another concurrency pattern can be modelled in Elixir — the
producer/consumer model.&lt;/p>
&lt;p>This model aims to allow for decoupled data production and consumption by setting up two separate processes to handle
each task — effectively creating a logical separation of concerns.&lt;/p>
&lt;p>However, the producer/consumer model faces a critical issue — what happens if the producer generates excessive messages
for the consumer? The consumer will be overwhelmed and will eventually fail trying to keep up with processing that many
messages. This is
where &lt;a href="https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7">back pressure&lt;/a>
comes into play.&lt;/p>
&lt;blockquote>
&lt;p>Back pressure is a control mechanism for how much a producer should emit based on consumer demand, consumer message
buffering, or limited sampling&lt;/p>
&lt;/blockquote>
&lt;p>Back pressure avoids the problem of overloading the consumer with messages by applying one of or a combination of the
three methods mentioned above (more information in the
link &lt;a href="https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7">here&lt;/a>).&lt;/p>
&lt;h2 id="the-next-frontier-of-concurrency-genstage">
&lt;a href="#the-next-frontier-of-concurrency-genstage" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
The next frontier (of concurrency): GenStage
&lt;/h2>
&lt;p>Seeing the value of having a standard implementation for the producer/consumer model, the Elixir team decided to develop
exactly that.&lt;/p>
&lt;blockquote>
&lt;p>GenStage is a specification for exchanging events between producers and consumers with back pressure between Elixir
processes&lt;/p>
&lt;/blockquote>
&lt;p>Producers &lt;strong>emit events&lt;/strong> to consumers for &lt;strong>processing&lt;/strong>. The events can be of any structure.&lt;/p>
&lt;p>The control mechanism used is a demand system. Consumers inform producers of how many events they can handle (demand)
and producers emits no more than the demanded amount. This ensures that the consumers are capable of handling the events
emitted.&lt;/p>
&lt;p>Producer-consumers behave like both producers and consumers. They are used to perform transformations on events emitted
by the producer before they are emitted to the consumer.&lt;/p>
&lt;p>Similar to &lt;a href="https://hexdocs.pm/elixir/GenServer.html">GenServer&lt;/a>, stages in GenStage exchange events
through &lt;a href="https://hexdocs.pm/gen_stage/GenStage.html#module-callbacks">callbacks&lt;/a>.&lt;/p>
&lt;p>When a demand is handled — i.e. producer emits events and demanding consumer handles these events — another demand is
made, creating a cycle where both stages are always working - ideally.&lt;/p>
&lt;p>GenStage is a powerful tool in an Elixir developer&amp;rsquo;s arsenal. More information can be found in
the &lt;a href="https://elixir-lang.org/blog/2016/07/14/announcing-genstage/">official announcement&lt;/a> where a little bit of history
of how GenStage came to be was discussed and in a talk by &lt;a href="https://youtu.be/XPlXNUXmcgE">José Valim&lt;/a> — creator of
Elixir.&lt;/p>
&lt;p>With a better grasp of the overarching concepts used in Broadway, we can finally discuss what Broadway is all about and
how it does what it does!&lt;/p>
&lt;h1 id="pipeline-architecture">
&lt;a href="#pipeline-architecture" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Pipeline architecture
&lt;/h1>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/open-source-deep-dive/broadway/architecture.jpg"
alt="Pipeline architecture"
width=392
height="376" />&lt;/p>
&lt;p>It is at this juncture where it would be important to clarify the term &amp;ldquo;producer&amp;rdquo;. In both message queues and GenStage,
a producer is a creator of messages or events. However, in Broadway, a producer is both a consumer of messages and an
emitter of events.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/open-source-deep-dive/broadway/terminology.jpg"
alt="Terminology clarification for Broadway producer"
width=701
height="91" />&lt;/p>
&lt;p>For the rest of the article, the following definitions for the following terminology will be used:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>producer&lt;/strong> — producer of events in Broadway&lt;/li>
&lt;li>&lt;strong>message&lt;/strong> — message in a message queue or any other data source&lt;/li>
&lt;li>&lt;strong>event&lt;/strong> — GenStage events&lt;/li>
&lt;/ol>
&lt;p>When messages are consumed by the producer, they will be transformed into events with a fixed structure defined by
Broadway.&lt;/p>
&lt;p>Each component is a separate process and they are dynamically generated as different topologies (architectures) can be
designed. The order of initialisation for a typical pipeline looks something like this:&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/open-source-deep-dive/broadway/order_of_initialisation.jpg"
alt="Order of initialisation"
width=451
height="411" />&lt;/p>
&lt;p>The producers and processors are both created using interesting conventions that is will be explored now. Other
components will be discussed later on as they tie into other features Broadway has.&lt;/p>
&lt;h2 id="how-its-made-producers">
&lt;a href="#how-its-made-producers" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
How it&amp;rsquo;s made: Producers
&lt;/h2>
&lt;p>Producers are built using a pattern similar to the &lt;a href="https://en.wikipedia.org/wiki/Strategy_pattern">strategy pattern&lt;/a>
but modified to integrate with the concurrency system in Elixir.&lt;/p>
&lt;p>Different data sources require different methods of establishing connections and receiving messages. Thus, we break up
the producer process into two modules — &lt;code>ProducerStage&lt;/code> defines the behavior for enforcing the rate limit while a
dynamically loaded module defines the behavior for establishing a connection to the data source and receiving messages.&lt;/p>
&lt;p>&lt;code>ProducerStage&lt;/code> assumes that the dynamically loaded module contains the typical GenStage callbacks like &lt;code>handle_call&lt;/code>
and &lt;code>handle_demand&lt;/code> and uses them for things like rate limiting.&lt;/p>
&lt;p>The &lt;code>ProducerStage&lt;/code> behaves as the context while the dynamic module behaves as the strategy. The dynamic module adopts
the &lt;code>Producer&lt;/code> module — which defines two callbacks for managing the overall producer life-cycle.&lt;/p>
&lt;p>To load the module dynamically, the module name is passed to &lt;code>ProducerStage&lt;/code> as an argument. To keep the producer as a
single process, we call the &lt;code>init&lt;/code> function of the module directly when initialising the &lt;code>ProducerStage&lt;/code>. This way, the
module will initialise under the newly spawned process for &lt;code>ProducerStage&lt;/code> rather than spawning an entirely new process.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@impl&lt;/span> &lt;span class="no">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:module&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">%{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">module&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">module_state&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">nil&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">transformer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">transformer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">consumers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">rate_limiting&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">rate_limiting_state&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Calling the init function of the dynamically loaded module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When &lt;code>start_link&lt;/code> is called, a new process is spawned first before the &lt;code>init&lt;/code> function is called under the new process.&lt;/p>
&lt;p>This is done as certain message queue providers like &lt;a href="https://github.com/dashbitco/broadway_rabbitmq">RabbitMQ&lt;/a> attach
active listeners to the calling process so spawning a separate process for this would mean having to manage two separate
processes for a producer.&lt;/p>
&lt;h2 id="how-its-made-processors">
&lt;a href="#how-its-made-processors" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
How it&amp;rsquo;s made: Processors
&lt;/h2>
&lt;p>Processors are created using a concept similar
to &lt;a href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)">inheritance&lt;/a> in object-oriented
programming. This idea comes from the need to standardise the subscription logic of producer-consumers and consumers.&lt;/p>
&lt;p>When a processor is started using &lt;code>start_link&lt;/code>, a process of the &lt;code>Subscriber&lt;/code> module is started with the current
processor module passed as a argument.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">start_link&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stage_options&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Broadway.Topology.Subscriber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_link&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__MODULE__&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:producers&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Keyword&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">take&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:processor_config&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:min_demand&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:max_demand&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stage_options&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The current module is initialised in the &lt;code>Subscriber&lt;/code> process through &lt;code>init&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@impl&lt;/span> &lt;span class="no">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">names&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">subscription_options&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">init_options&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Other producer-consumers and consumers like batcher and batch processors also use this pattern to create their
respective GenStage stages.&lt;/p>
&lt;p>A separation of concern is achieved using this pattern. The processor is responsible for event handling while the
subscriber handles the subscription logic.&lt;/p>
&lt;hr>
&lt;p>That&amp;rsquo;s a basic rundown of the concepts underpinning Broadway. While it may not be a complete and intensive explanation
of everything, hopefully it is able to provide some clarity. In the next part, we will be exploring how features in
Broadway have been implemented!&lt;/p>
&lt;p>Hop on over to the second part &lt;a href="open-source-deep-dive-broadway-part-2">here!&lt;/a>&lt;/p>
&lt;hr>
&lt;p>Open-source Deep Dive is a series where I pick apart open-source projects to explain the underlying concepts that power
these projects and share my findings about the project!&lt;/p></description></item><item><title>Open-source Deep Dive: Broadway (Part 2) - Inner workings of Broadway</title><link>https://woojiahao.com/blog/post/odd-broadway-2/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://woojiahao.com/blog/post/odd-broadway-2/</guid><description>
&lt;p>This open-source deep dive has been split into two parts! The first part covers the prerequisite knowledge that would be
good to know when trying to understand the inner workings of Broadway. The second part is an in-depth analysis of the
implementation of various features of Broadway.&lt;/p>
&lt;p>This is the second part of the deep dive and the following topics will be covered:&lt;/p>
&lt;ol>
&lt;li>Rate limiting&lt;/li>
&lt;li>Batching messages&lt;/li>
&lt;li>Telemetry&lt;/li>
&lt;li>Creating a built-in testing support for pipelines&lt;/li>
&lt;li>Achieving graceful shutdowns&lt;/li>
&lt;li>Other interesting bits of code&lt;/li>
&lt;/ol>
&lt;p>If you want a refresher on the concepts behind Broadway (like message queues and concurrency in Elixir) or to better
understand Broadway&amp;rsquo;s pipeline architecture from a bird&amp;rsquo;s eye view, you can find the first
part &lt;a href="open-source-deep-dive-broadway-part-1">here!&lt;/a>&lt;/p>
&lt;h1 id="whats-the-scoop">
&lt;a href="#whats-the-scoop" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What&amp;rsquo;s the scoop?
&lt;/h1>
&lt;p>Now that we have explored the overall architecture of a Broadway pipeline, we can look at how certain features in
Broadway are implemented.&lt;/p>
&lt;h2 id="rate-limiting">
&lt;a href="#rate-limiting" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Rate limiting
&lt;/h2>
&lt;blockquote>
&lt;p>Rate limiting refers to the act of limiting the amount of data that can be requested or processed in a given period of
time&lt;/p>
&lt;/blockquote>
&lt;p>Rate limiting is applied across producers within a single pipeline to control the number of events emitted within a
given period of time.&lt;/p>
&lt;p>This is especially useful when the hardware of the machine running the pipeline is not able to keep up with processing
large numbers of events demanded at a time — possibly due to a poorly configured pipeline.&lt;/p>
&lt;p>Some producers do not leverage the rate limiting feature of Broadway. For instance,
the &lt;a href="https://github.com/dashbitco/broadway/blob/master/lib/broadway/topology/producer_stage.ex">RabbitMQ producer&lt;/a>
creates an active listener, which means that event emission is not inhibited by the rate limiter. Instead, events are
emitted the moment messages are published to the message queue (
unless &lt;a href="https://hexdocs.pm/broadway_rabbitmq/BroadwayRabbitMQ.Producer.html#module-back-pressure-and-prefetch_count">otherwise configured&lt;/a>)
.&lt;/p>
&lt;p>But for the producers that &lt;em>do&lt;/em> leverage the rate limiting — such as
the &lt;a href="https://github.com/dashbitco/broadway_sqs/blob/master/lib/broadway_sqs/producer.ex">Amazon SQS producer&lt;/a> — rate
limiting is applied in two instances:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>When consumers make demands to the producer-consumer or producer&lt;/p>
&lt;p>If the producer can still emit events, any demand made by the consumer will be handled by the producer. We take into
account the rate limit threshold. If there are too many events to emit, the excess messages are stored in a message
buffer that will have to be cleared later on.&lt;/p>
&lt;p>Each message that can be emitted will be transformed into the standard event structure that Broadway uses.&lt;/p>
&lt;p>If the producer can no longer emit messages, any demand made is stored in a demand buffer that is cleared later on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When the rate limit is being reset after the given interval&lt;/p>
&lt;p>After the given interval, the rate limit threshold can be reset. However, we may have accumulated demands and
messages in their respective buffers. We may find that the threshold has not been met before we reset it. Thus, we
can use this remaining threshold to clear any lingering demands and messages stored in their respective buffers.&lt;/p>
&lt;p>Once we have cleared as many messages as our remaining threshold allows, we will reset the threshold and schedule for
another reset. These resets are scheduled at fixed intervals.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The rate limiting threshold is maintained as an &lt;a href="https://erlang.org/doc/man/atomics.html">atomic&lt;/a> (discussed later on).
This atomic array is generated by the &lt;code>RateLimiter&lt;/code> process. This module handles all behavior surrounding working with
the rate limit threshold. &lt;code>ProducerStage&lt;/code> handles the actual logic of managing the demands of consumers.&lt;/p>
&lt;p>When the producer cannot emit any more events, i.e. the threshold has been reached, an internal state is set
to &lt;code>:closed&lt;/code> to avoid future demands from being handled.&lt;/p>
&lt;h2 id="batching">
&lt;a href="#batching" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Batching
&lt;/h2>
&lt;p>Batching groups events based on given properties and sends them to designated &amp;ldquo;sub-pipelines&amp;rdquo; or batch processors to be
handled. For instance, we might design a pipeline that stores events with even numbers in an S3 bucket and ones with odd
numbers on Google Drive.&lt;/p>
&lt;p>The &lt;code>Batcher&lt;/code> process is assigned unique names for identification and events that are emitted from the producer must be
tagged to a batcher. Failure to do so will result in a runtime error. This only applies if batching is enabled.&lt;/p>
&lt;p>In order for the producer to send the appropriate events to the respective batcher, a &lt;code>PartitionDispatcher&lt;/code> is used.
Essentially, it defines the behavior of how events are emitted to consumers. A &lt;code>PartitionDispatcher&lt;/code> dispatches events
to certain consumers based on a given criteria (defined as
a &lt;a href="https://en.wikipedia.org/wiki/Hash_function">hash function&lt;/a>). In this case, the criterion is the name of the batcher
from the given event. This means that when we assign a batcher to the event, it &lt;strong>will&lt;/strong> be dispatched to only that
batcher. More information about dispatchers in GenStage can be found in
the &lt;a href="https://hexdocs.pm/gen_stage/GenStage.Dispatcher.html#summary">official documentation&lt;/a>.&lt;/p>
&lt;p>Even within the batcher, further grouping can be made based on a batch key assigned to the event. This may be used to
ensure that certain events are processed together. Internally, the batcher will accumulate events before emitting them.
However, as it cannot sit around accumulating events forever, a batch is emitted at regular intervals regardless of how
many events are stored in it.&lt;/p>
&lt;p>The &lt;code>BatchProcessor&lt;/code> process handles a single batch at a time. It is similar to a regular processor, except it works on
a batch of events. The &lt;code>handle_batch&lt;/code> callback is used here.&lt;/p>
&lt;h2 id="telemetry">
&lt;a href="#telemetry" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Telemetry
&lt;/h2>
&lt;p>Telemetry is used in Broadway to benchmark certain operations that occur such as the duration that a &lt;code>handle_message&lt;/code>
callback takes.&lt;/p>
&lt;p>Broadway relies on the &lt;code>telemetry&lt;/code> &lt;a href="https://hexdocs.pm/telemetry/">library&lt;/a>. Within the code, events are emitted when
these operations occur and key measurements such as duration are tracked. Handlers/listeners of these events can be
setup to respond to these events.&lt;/p>
&lt;p>Telemetry is not an Elixir-only feature. It is commonly used to perform application
monitoring. &lt;a href="https://opentelemetry.io/">OpenTelemetry&lt;/a> is a really interesting framework that offers powerful
application monitoring through telemetry.&lt;/p>
&lt;h2 id="built-in-testing">
&lt;a href="#built-in-testing" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Built-in testing
&lt;/h2>
&lt;p>To test the pipeline, we should focus on ensuring that the data processing aspect of the pipeline works as intended.
However, as we rely on external services for input, it would be hard to coordinate a test suite to work with a live data
source as we may not be able to replicate the data source or publish data to the data source at will due to access
limitations. Thus, Broadway has designed a testing utility that allows us to test the pipeline&amp;rsquo;s data processing
capacity without relying on the data source.&lt;/p>
&lt;p>Broadway provides a placeholder producer module. This producer does not rely on any data sources. Instead, messages are
emitted directly into the pipeline.&lt;/p>
&lt;p>The producer module should be tested separately if there is core behavior that cannot be tested along with the pipeline.&lt;/p>
&lt;p>This form of unit testing ensures that we reduce potential points of failure in our test suite if any of the
aforementioned problems with using the original data source should surface.&lt;/p>
&lt;h2 id="graceful-shutdowns">
&lt;a href="#graceful-shutdowns" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Graceful shutdowns
&lt;/h2>
&lt;p>Broadway boasts about having &lt;a href="https://hexdocs.pm/broadway/architecture.html#graceful-shutdowns">graceful shutdowns&lt;/a>.
This is a rather interesting concept to explore as it relies heavily on the concurrency system of Elixir.&lt;/p>
&lt;p>Essentially, the pipeline can only exist in two states — when all components are online and when all components are
shutting down. There is no point in time where a single component will shutdown on its own without being restarted. This
is because of the way that the supervisor of each component declares restart strategies ensuring that should a child
process encounters any errors, it will be restarted without a hitch. This way, the only time where our components can
shut down is when we shut down our main process or pipeline supervisor process. When either process is terminated, we
want to properly handle all remaining events in the pipeline before shutting off every component.&lt;/p>
&lt;p>This is achieved through a mix of concurrency features. But before we can explain how it works, a simple introduction of
exit signals and process termination is due.&lt;/p>
&lt;h3 id="exit-signals-and-process-termination">
&lt;a href="#exit-signals-and-process-termination" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Exit signals and process termination
&lt;/h3>
&lt;p>Processes can be &lt;a href="https://hexdocs.pm/elixir/Process.html#link/1">linked&lt;/a> to one another. When either process receives an
exit signal — which can occur when the process is terminated forcibly or when it receives an exit signal propagated from
its parent — it will propagate the exit signal to the linked process and that process will terminate as well.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/open-source-deep-dive/broadway/linking.jpg"
alt="Process linking"
width=441
height="212" />&lt;/p>
&lt;p>However, these exit signals can
be &lt;a href="https://crypt.codemancers.com/posts/2016-01-24-understanding-exit-signals-in-erlang-slash-elixir/">trapped&lt;/a> instead.
When this occurs, rather than terminating the process that receives the propagated exit signal, the exit signal is sent
as a message, allowing the receiving process to handle the exit as though it was just another message.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">handle_info&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="ss">:EXIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">from&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reason&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When a process is terminated, an
optional &lt;code>terminate/2&lt;/code> &lt;a href="https://hexdocs.pm/elixir/GenServer.html#c:terminate/2">callback&lt;/a> can be declared to perform any
cleanup before the process is actually terminated. This is useful if we have any lingering operations that should be
completed before we terminate the process.&lt;/p>
&lt;p>&lt;a href="https://hexdocs.pm/elixir/Supervisor.html">Supervisors&lt;/a> can start a list of child processes and is responsible for
managing the restart strategy of each child. The interaction between a supervisor and &lt;code>terminate&lt;/code> is rather interesting.
When a child is terminated, it is restarted accordingly. When a supervisor terminates, all of its children will also be
terminated. If a child process traps exits, the &lt;code>terminate&lt;/code> callback is called. If not, it will simply terminate
immediately without calling the callback. More information about how supervisor interact with shutdowns can be found in
the official &lt;a href="https://hexdocs.pm/elixir/Supervisor.html#module-start-and-shutdown">documentation&lt;/a>.&lt;/p>
&lt;h3 id="back-to-our-regularly-scheduled-deep-dive">
&lt;a href="#back-to-our-regularly-scheduled-deep-dive" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Back to our regularly scheduled deep dive&amp;hellip;
&lt;/h3>
&lt;p>With a basic understanding of exit trapping and process termination, we can actually understand how graceful shutdowns
in Broadway works.&lt;/p>
&lt;p>When the main process or the pipeline supervisor process is terminated, the main process — which traps exit signals —
will invoke its &lt;code>terminate&lt;/code> callback which will inform the &lt;code>Terminator&lt;/code> process to begin trapping exits and terminate
our pipeline supervisor. As this &lt;code>Terminator&lt;/code> process is a child of the pipeline supervisor, it will invoke its
implementation of &lt;code>terminate&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@impl&lt;/span> &lt;span class="no">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">terminate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reason&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">%{&lt;/span>&lt;span class="ss">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">supervisor_pid&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">supervisor_pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">terminator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">terminator&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Broadway.Topology.Terminator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">trap_exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">terminator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">monitor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">supervisor_pid&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">supervisor_pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reason_to_signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reason&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">receive&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:DOWN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="ss">:persistent_term&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">erase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The exit signal propagates to the other components through their supervisors terminating and they will also invoke
their &lt;code>terminate&lt;/code> callback if they trap exits such as producers disconnecting from the data source.&lt;/p>
&lt;p>The &lt;code>Terminator&lt;/code> process is responsible for ensuring that all events still within the pipeline are processed before
terminating the pipeline entirely.&lt;/p>
&lt;p>It does so in three phases:&lt;/p>
&lt;ol>
&lt;li>Notify that the processors do not resubscribe to producers through a state flag&lt;/li>
&lt;li>Drain the producers of any events remaining by emitting the events through the pipeline&lt;/li>
&lt;li>Wait for the batch processors (which will be the very last component in the pipeline) to terminate before terminating
the supervisor&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@impl&lt;/span> &lt;span class="no">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">terminate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">whereis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:will_terminate&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">producers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">whereis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Broadway.Topology.ProducerStage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">drain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">whereis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">monitor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">receive&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:done&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:DOWN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Interestingly, as the producer may be waiting to drain events, we may not want to cancel all of its consumers
immediately. Thus, we rely on &lt;code>GenStage#async_info&lt;/code> to &lt;a href="https://hexdocs.pm/gen_stage/GenStage.html#async_info/2">queue&lt;/a>
the message to cancel all consumers at the end of the GenStage message queue — effectively waiting for all other events
to be processed before cancelling all consumers. If batching is enabled, the processors will also wait for the batches
to be processed before cancelling all consumers.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@spec&lt;/span> &lt;span class="n">drain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">GenServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">drain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">GenStage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">demand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:accumulate&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">GenStage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">__MODULE__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:prepare_for_draining&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># The :cancel_consumers message is added to the end of the message queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">GenStage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">async_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">__MODULE__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:cancel_consumers&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>These mechanisms ensure that all events left in the pipeline is properly processed before the pipeline terminates, thus
achieving graceful shutdowns.&lt;/p>
&lt;h1 id="fascinating-discovery">
&lt;a href="#fascinating-discovery" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Fascinating discovery!
&lt;/h1>
&lt;p>These are some interesting bits of code that Broadway has.&lt;/p>
&lt;h2 id="__using__-configurations">
&lt;a href="#__using__-configurations" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
&lt;code>__using__&lt;/code> configurations
&lt;/h2>
&lt;p>Like other libraries in Elixir, &lt;code>use Broadway&lt;/code> is where it all begins. As discussed in the
previous &lt;a href="https://woojiahao.github.io/blog/posts/open-source-deep-dive-hound">open-source deep dive&lt;/a>, the behavior
of &lt;code>use&lt;/code> can be altered by defining the &lt;code>__using__&lt;/code> macro.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defmacro&lt;/span> &lt;span class="n">__using__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">quote&lt;/span> &lt;span class="ss">location&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:keep&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">bind_quoted&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">opts&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">module&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">__CALLER__&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">@behaviour&lt;/span> &lt;span class="nc">Broadway&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">@doc&lt;/span> &lt;span class="no">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">def&lt;/span> &lt;span class="n">child_spec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">default&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">%{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">unquote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">start&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">__MODULE__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:start_link&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">]},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">shutdown&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:infinity&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Supervisor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">child_spec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">unquote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Macro&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">escape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">defoverridable&lt;/span> &lt;span class="ss">child_spec&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There are three interesting bits of code in the &lt;code>__using__&lt;/code> macro:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>location: keep&lt;/code>&lt;/p>
&lt;p>Used to report runtime errors from inside the quote. Without this, errors are reported where the defined function (
in &lt;code>quote&lt;/code>) is invoked. This is to ensure that we are aware of where the errors are occurring. More information about
this configuration can be
found &lt;a href="https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2-stacktrace-information">here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>bind_quoted&lt;/code>&lt;/p>
&lt;p>Used to create bindings within the quote. When a binding is created, the value is
automatically &lt;a href="https://elixir-lang.org/getting-started/meta/quote-and-unquote.html#unquoting">unquoted&lt;/a> (which
includes evaluation) and the value cannot be unquoted again. This is especially used when we do not want to
re-evaluate the value multiple times.&lt;/p>
&lt;p>More information quoting and unquoting in Elixir can be found in
the &lt;a href="https://elixir-lang.org/getting-started/meta/quote-and-unquote.html">official tutorial&lt;/a> and a simplified
explanation and example of binding can be
found &lt;a href="https://elixirschool.com/en/lessons/advanced/metaprogramming/#binding">here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@behaviour&lt;/code>&lt;/p>
&lt;p>Used to define interface-like behavior where modules that adopt these behaviors can implement callbacks defined. In
this case, when a module &lt;code>use Broadway&lt;/code>, it will have to implement certain callbacks like &lt;code>handle_message&lt;/code> while
other callbacks like &lt;code>handle_batch&lt;/code> remain optional.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@callback&lt;/span> &lt;span class="n">prepare_messages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">messages&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()],&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">term&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">@callback&lt;/span> &lt;span class="n">handle_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processor&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">atom&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">term&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">::&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">@callback&lt;/span> &lt;span class="n">handle_batch&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">batcher&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">atom&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">messages&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">batch_info&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="nc">BatchInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">context&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">term&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">@callback&lt;/span> &lt;span class="n">handle_failed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">messages&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()],&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">term&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">@optional_callbacks&lt;/span> &lt;span class="ss">prepare_messages&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">handle_batch&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">handle_failed&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More information about typespecs can be found in
the &lt;a href="https://elixir-lang.org/getting-started/typespecs-and-behaviours.html#adopting-behaviours">official documentation&lt;/a>
.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="module-metadata-processing">
&lt;a href="#module-metadata-processing" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Module metadata processing
&lt;/h2>
&lt;p>While on the topic of meta-programming, module metadata can also be processed.&lt;/p>
&lt;p>&lt;code>ensure_loaded?&lt;/code> ensures that a given module is loaded. In Broadway, this is used to ensure that the &lt;code>:persistent_term&lt;/code>
module from Erlang is available for Elixir — the only time it will not be available is when the version of Elixir is too
old. Documentation &lt;a href="https://hexdocs.pm/elixir/Code.html#ensure_loaded?/1">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="k">unless&lt;/span> &lt;span class="nc">Code&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ensure_loaded?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:persistent_term&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">require&lt;/span> &lt;span class="nc">Logger&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Broadway requires Erlang/OTP 21.3+&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="s2">&amp;#34;Broadway requires Erlang/OTP 21.3+&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>function_exported?&lt;/code> returns whether a module contains a definition for a &lt;strong>public&lt;/strong> function with a given arity. Used
to execute functions from modules if they are defined.
Documentation &lt;a href="https://hexdocs.pm/elixir/Kernel.html#function_exported?/3">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nc">Code&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ensure_loaded?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer_mod&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">function_exported?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer_mod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:prepare_for_start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">producer_mod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prepare_for_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">opts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">child_specs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">opts&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="ow">when&lt;/span> &lt;span class="n">is_list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">child_specs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">child_specs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nc">NimbleOptions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">validate!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nc">Broadway.Options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">definition&lt;/span>&lt;span class="p">())}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">other&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="dynamic-process-naming">
&lt;a href="#dynamic-process-naming" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Dynamic process naming
&lt;/h2>
&lt;p>As the pipeline can comprise of any number of components, Broadway supports dynamically generated processes. These
dynamically generated processes are assigned names that follow a fixed convention — comprising of the name of the
pipeline, the process type, and the index of the component among the other components of the same type.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">process_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:&amp;#34;&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">name_prefix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="ss">.&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="ss">_&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="ss">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">process_names&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:concurrency&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The names are returned as quoted atoms where the atom has a space in it so it has to be declared via &lt;code>:&amp;quot;&amp;quot;&lt;/code> .&lt;/p>
&lt;h2 id="storage-options-in-elixir">
&lt;a href="#storage-options-in-elixir" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Storage options in Elixir
&lt;/h2>
&lt;p>Besides the basic data structures like lists and dictionaries, Elixir and Erlang offer other ways of storing data within
processes.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://erlang.org/doc/man/atomics.html">Atomics&lt;/a>&lt;/p>
&lt;p>&lt;code>:atomics&lt;/code> are a way of performing atomic operations on a set of mutable atomic variables.&lt;/p>
&lt;p>Used to maintain the rate limiting threshold.&lt;/p>
&lt;p>Previously, the rate limiter used &lt;a href="https://erlang.org/doc/man/ets.html">ETS&lt;/a> instead but atomic operations are much
better for concurrent systems as they avoid race conditions when multiple producer processes are attempting to modify
the rate limit.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="ss">:atomics&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="na">@atomics_index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ss">:atomics&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="na">@atomics_index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">allowed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://erlang.org/doc/man/persistent_term.html">Persistent term&lt;/a>&lt;/p>
&lt;p>Storage for Erlang terms that is optimised for reading terms at the expense of writing and updating terms.&lt;/p>
&lt;p>Used to store pipeline metadata like producer names etc.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="ss">:persistent_term&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">%{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">context&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">producer_names&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">process_names&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Producer&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">producer_config&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">batchers_names&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Enum&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batchers_config&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Batcher&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">elem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ni">&amp;amp;1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">rate_limiter_name&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">producer_config&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:rate_limiting&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nc">RateLimiter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rate_limiter_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:name&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://erlang.org/doc/man/queue.html">Queue&lt;/a>&lt;/p>
&lt;p>Manage first-in, first-out queues.&lt;/p>
&lt;p>Used to manage message and demand buffers in the producer.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># A queue of &amp;#34;batches&amp;#34; of messages that we buffered.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ss">message_buffer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># A queue of demands (integers) that we buffered.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ss">demand_buffer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hexdocs.pm/elixir/Process.html">Process dictionaries&lt;/a>&lt;/p>
&lt;p>Store state within a process directly although its usage is
generally &lt;a href="https://elixirforum.com/t/is-it-a-good-idea-to-store-context-in-process-dictionary-registry-for-http-requests/3142">frowned upon&lt;/a>
.&lt;/p>
&lt;p>Used to store batches in the batcher.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">init_or_get_batch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">batch_key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">batch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">batch_key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">batch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">put_batch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">batch_key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">batch&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">batch_key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">batch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>A better alternative might have been to use an &lt;a href="https://hexdocs.pm/elixir/Agent.html">Agent&lt;/a> or ETS instead.&lt;/p>
&lt;p>&lt;strong>Edit!&lt;/strong> I clarified with the team about their decision to use process dictionaries over ETS, this was their
response:&lt;/p>
&lt;blockquote>
&lt;p>The correct solution here would be to simply use a map. But because this is very intensive code, we need a mutable
option, and the process dictionary is the most efficient one. ETS would be slow as data has to be copied in and out
of ETS.
This is one of the very cases where using the pdict for performance is justified. :)&lt;/p>
&lt;/blockquote>
&lt;p>So, the reason why they decided to use a process dictionary over ETS is due to the performance requirement of
batching! Very interesting!&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="options-validation">
&lt;a href="#options-validation" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Options validation
&lt;/h2>
&lt;p>Dashbit — the team behind Broadway — developed an options validation library
called &lt;a href="https://github.com/dashbitco/nimble_options">NimbleOptions&lt;/a> that aims to be a small library for validating and
documenting high-level options.&lt;/p>
&lt;p>A set of definitions for the available options are created first and these can be used to validate a keyword list — aka
the options.&lt;/p>
&lt;p>If the options are invalid, an error is returned, otherwise an &lt;code>:ok&lt;/code> status along with the options are returned. The
returned options have default values filled in.&lt;/p>
&lt;h2 id="default-values-in-dictionaries">
&lt;a href="#default-values-in-dictionaries" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Default values in dictionaries
&lt;/h2>
&lt;p>Broadway has an interesting way of fanning out default values for the options keyword list. In the options keyword list,
a &amp;ldquo;parent&amp;rdquo; value for &lt;code>:partition_by&lt;/code>, &lt;code>:hibernate_after&lt;/code>, and &lt;code>:spawn_opt&lt;/code> is provided.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="n">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">partition_by&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">...&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1"># these are parent values&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">hibernate_after&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">...&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">producer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">hibernate_after&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">...&lt;/span> &lt;span class="c1"># this is a child value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The parent value will be used for producers, processors, and batchers if no explicit child value is provided.
Alternatively, we might want to fan out a parent value to only two of the three unset child values while maintaining the
original child value of the third.&lt;/p>
&lt;p>This is done by &lt;a href="https://hexdocs.pm/elixir/Keyword.html#merge/2">merging&lt;/a> the child options into the parent options.
Thus, if the child does not define a value for the option, the parent value is inherited.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="n">opts&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">opts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">carry_over_one&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:producer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:hibernate_after&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:spawn_opt&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">carry_over_many&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:processors&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:partition_by&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:hibernate_after&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:spawn_opt&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">carry_over_many&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:batchers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:partition_by&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:hibernate_after&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:spawn_opt&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">carry_over_one&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">update_in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="k">fn&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nc">Keyword&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Keyword&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">take&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">carry_over_many&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">update_in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="k">fn&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">defaults&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Keyword&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">take&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nc">Keyword&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">defaults&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="closing-the-curtains">
&lt;a href="#closing-the-curtains" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Closing the curtains
&lt;/h1>
&lt;p>To conclude, Broadway is a powerful library for building data processing pipelines. These pipelines are built on top of
the robust concurrency system that Elixir boasts.&lt;/p>
&lt;p>Broadway is a very versatile library and the documentation contains detailed guides about using it with various data
sources. Check out the &lt;a href="https://github.com/dashbitco/broadway">Github repository&lt;/a>
and &lt;a href="https://hexdocs.pm/broadway/Broadway.html#content">documentation!&lt;/a>&lt;/p>
&lt;hr>
&lt;p>If you want to get a basic understanding of the underlying concepts of Broadway or better visualise the architecture of
a pipeline in Broadway, check out the first part &lt;a href="open-source-deep-dive-broadway-part-1">here!&lt;/a>&lt;/p>
&lt;hr>
&lt;p>Open-source Deep Dive is a series where I pick apart open-source projects to explain the underlying concepts that power
these projects and share my findings about the project!&lt;/p></description></item><item><title>Open-source Deep Dive: Hound</title><link>https://woojiahao.com/blog/post/odd-hound/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>https://woojiahao.com/blog/post/odd-hound/</guid><description>
&lt;h2 id="what-is-hound">
&lt;a href="#what-is-hound" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What is Hound?
&lt;/h2>
&lt;blockquote>
&lt;p>For browser automation and writing integration tests in Elixir&lt;/p>
&lt;/blockquote>
&lt;p>Let&amp;rsquo;s inspect this definition a little closer&amp;hellip;&lt;/p>
&lt;h3 id="what-is-browser-automation">
&lt;a href="#what-is-browser-automation" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What is browser automation?
&lt;/h3>
&lt;p>Browser automation is effectively the process of using a &lt;strong>proxy&lt;/strong> (like Selenium or Hound) to perform browser actions
on behalf of the user (like the test case). Essentially, we are &lt;strong>automating the usage of the browser.&lt;/strong>&lt;/p>
&lt;p>It is often associated with illegal applications like sneaker-botting but much
like &lt;a href="https://www.makeuseof.com/tag/8-legal-uses-for-bittorrent-youd-be-surprised/">torrenting&lt;/a>, there are positive
applications and we will be exploring one of them in this post - integration testing.&lt;/p>
&lt;h3 id="what-is-integration-testing">
&lt;a href="#what-is-integration-testing" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What is integration testing?
&lt;/h3>
&lt;p>When building software, we first build individual components to support given functional requirements. These individual
components can be tested using unit tests - which ensure that given a set of inputs, the component returns a **
predictable** set of outputs (predictable means that the functions tested are pure).&lt;/p>
&lt;p>However, while components may work well on their own, when combined with other components (to form larger
components/whole systems), unexpected behavior may be exhibited. For instance, the input from component A is transformed
before it is used as input to component B, thus, the combined components returns an unexpected result.&lt;/p>
&lt;p>Hence, integration tests serve to &lt;strong>bridge the gap between individual components testing and full system testing.&lt;/strong>&lt;/p>
&lt;p>When combined with browser automation, we can ensure that a website works end-to-end. We can ensure that the data
validation on the front-end works as intended and that the forms submitted by users are properly sent to the back-end
and saved in the database.&lt;/p>
&lt;h3 id="approaching-browser-automation-integration-testing">
&lt;a href="#approaching-browser-automation-integration-testing" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Approaching browser automation integration testing&amp;hellip;
&lt;/h3>
&lt;p>We can take two approaches to browser automation integration testing. We could either&lt;/p>
&lt;ol>
&lt;li>build our own interfacing system to communicate with the browser, or&lt;/li>
&lt;li>rely on existing interfacing systems&lt;/li>
&lt;/ol>
&lt;p>The former is time-consuming and requires a lot of care during development as we have to account for varying browser
APIs and quirks. Thus, it is wiser to chose the latter when approaching browser automation integration testing. Doing so
minimizes the number of components we have to manage.&lt;/p>
&lt;h3 id="introducing-hound">
&lt;a href="#introducing-hound" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Introducing Hound!
&lt;/h3>
&lt;p>This is where Hound comes into the picture. Hound provides a clean API to build browser automation tests. It relies
on &lt;a href="http://selenium.dev">Selenium&lt;/a>, &lt;a href="https://phantomjs.org/">PhantomJS&lt;/a>,
and &lt;a href="https://chromedriver.chromium.org/">ChromeDriver&lt;/a> as the interfacing systems to perform the &amp;ldquo;dirty&amp;rdquo; work of
coordinating requests/responses to/from the browser.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/open-source-deep-dive/hound/general-architecture.png"
alt="Hound&amp;amp;rsquo;s architecturel"
width=232
height="220" />&lt;/p>
&lt;p>This introduces a larger question, what exactly is Selenium, PhantomJS, and ChromeDriver? More importantly, in fact,&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;How is browser automation performed?&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Understanding how browser automation is performed provides us with a better foundation to grasp how these technologies
work and how Hound works under the hood.&lt;/p>
&lt;h2 id="the-world-of-web-drivers">
&lt;a href="#the-world-of-web-drivers" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
The world of web drivers&amp;hellip;
&lt;/h2>
&lt;p>The key driving (pun intended) of browser automation is web drivers. But before we can understand what they are, we
should establish some basic understanding of what a driver is in general computing terms.&lt;/p>
&lt;h3 id="what-are-drivers">
&lt;a href="#what-are-drivers" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What are drivers?
&lt;/h3>
&lt;p>Drivers are pieces of software that behave as a proxy between &lt;strong>a caller&lt;/strong> and &lt;strong>a target.&lt;/strong> Callers can be something
like the print prompt in Google Chrome or a computer peripheral. Targets can be something like the printer or computer.&lt;/p>
&lt;p>In general, drivers are responsible for translating the caller&amp;rsquo;s request into a given format that the target can
understand.&lt;/p>
&lt;p>There may be variations of a caller to the same target so each driver must be able to translate their respective
caller&amp;rsquo;s request into a common request format for the target. For instance, there are multiple types of keyboards that
can be connected to a single computer but the computer can only understand a single request format. So the respective
keyboard drivers are responsible for converting the unique keyboard&amp;rsquo;s requests into the format that the computer
accepts.&lt;/p>
&lt;h3 id="back-to-web-drivers">
&lt;a href="#back-to-web-drivers" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Back to web drivers
&lt;/h3>
&lt;p>Similar to general drivers, web drivers behave as proxies for the caller (Hound) to communicate with the target (
browser). It allows the &lt;strong>caller to send instructions for the browser to perform.&lt;/strong> In the web development world, a
browser is also referred to as a &lt;strong>user agent.&lt;/strong>&lt;/p>
&lt;p>The Selenium project proposed a W3C specification to guide the development of web drivers. For the rest of this
discussion, we will be relying on this specification. The specification can be
found &lt;a href="https://w3c.github.io/webdriver">here.&lt;/a>&lt;/p>
&lt;p>According to the specification, there must exist a separation of concern when designing a web driver. More specifically,
there are two components to a web driver:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Local end&lt;/strong> - API for developers to send requests to the browser (libraries like Selenium and Hound)&lt;/li>
&lt;li>&lt;strong>Remote end&lt;/strong> - responsible for communicating with the browser, i.e. a browser driver (can you infer what this
means?)&lt;/li>
&lt;/ol>
&lt;p>In essence, a web driver is comprised of an API and a browser driver. Ideally, the API should be able to work with
different browser drivers for different browsers.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/open-source-deep-dive/hound/web-driver-general-architecture.jpg"
alt="Web driver architecture"
width=522
height="201" />&lt;/p>
&lt;blockquote>
&lt;p>The remote end must also provide an &lt;strong>HTTP compliant wire protocol&lt;/strong> where each endpoint maps to a command for the
browser.&lt;/p>
&lt;/blockquote>
&lt;p>This means that the remote end &lt;strong>relies on HTTP to communicate requests with the browser.&lt;/strong> The remote end is a HTTP
server that the local end writes HTTP requests to. The remote end translates each HTTP request (based on endpoint and
method) to a command for the browser. Note that a wire protocol is a method of getting data from one point to another.
It dictates that requests should follow a given format.&lt;/p>
&lt;p>The specification also provides an outline for the endpoints that the remote end must make available for the local end.
This ensures standardization and ease of adoption for future browser drivers.&lt;/p>
&lt;p>One advantage to using a HTTP server for the remote end is that it is possible to host the remote end on a remote
machine. This means that we can delegate the job of integration testing to another machine, a process commonly known
as &lt;strong>distributed testing.&lt;/strong> By enabling distributed testing, the local machine is not burdened with the responsibility
of testing potentially extensive and rigorous integration tests which the machine may not support.&lt;/p>
&lt;h2 id="so-how-does-selenium-work">
&lt;a href="#so-how-does-selenium-work" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
So, how does Selenium work?
&lt;/h2>
&lt;p>Selenium implements the web driver specification (they did author it). The remote end uses
the &lt;a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol">JSON Wire Protocol&lt;/a> as the HTTP compliant wire
protocol to communicate with the browser driver. Note that the documentation provided by Selenium (for the JSON Wire
Protocol) has been obsoleted in favor of the one defined in the specification.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/open-source-deep-dive/hound/selenium-general-architecture.jpg"
alt="Selenium architecturel"
width=201
height="361" />&lt;/p>
&lt;h3 id="how-does-selenium-differ-from-phantomjs">
&lt;a href="#how-does-selenium-differ-from-phantomjs" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
How does Selenium differ from PhantomJS?
&lt;/h3>
&lt;p>PhantomJS is a &lt;strong>headless browser&lt;/strong> library. Headless browsers are essentially web browsers without the graphical
interfaces. Selenium, on the other hand, is a web driver. The key difference between the two is the way requests are
routed and managed (PhantomJS is a rather interesting project so Open-source Deep Dive: PhantomJS edition maybe?).&lt;/p>
&lt;p>However, Selenium supports headless browsers as well and more importantly, Selenium is still in active development while
PhantomJS has been archived due to a lack of active contributions.&lt;/p>
&lt;h3 id="what-is-chromedriver-then">
&lt;a href="#what-is-chromedriver-then" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What is ChromeDriver then?
&lt;/h3>
&lt;p>ChromeDriver is a browser driver developed as part of the Chromium project. It is used by Selenium as one of the
supported browser drivers. However, Hound supports raw requests to ChromeDriver as the underlying HTTP server works the
same with or without the use of Selenium. It is an interesting project so I may explore it in another installment of
Open-source Deep Dive!&lt;/p>
&lt;h2 id="hound-under-the-hood">
&lt;a href="#hound-under-the-hood" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Hound: Under the hood
&lt;/h2>
&lt;h3 id="leveraging-browser-drivers">
&lt;a href="#leveraging-browser-drivers" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Leveraging browser drivers
&lt;/h3>
&lt;p>With a better understanding of how browser automation and web drivers work, we can in fact see that Hound doesn&amp;rsquo;t rely
on the entirety of Selenium (including the local end APIs). Instead, it relies on the remote end of the Selenium web
driver (along with PhantomJS and ChromeDriver) to minimize the number of &amp;ldquo;moving components&amp;rdquo; that need to be managed
while reaping the benefits of the existing technologies. Thus, it can focus on delivering a seamless API for developing
browser automation integration tests.&lt;/p>
&lt;h3 id="exploring-a-basic-use-case">
&lt;a href="#exploring-a-basic-use-case" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Exploring a basic use case
&lt;/h3>
&lt;p>We will inspect a basic use case of Hound before diving into how Hound works.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defmodule&lt;/span> &lt;span class="nc">HoundTest&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">use&lt;/span> &lt;span class="nc">ExUnit.Case&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">use&lt;/span> &lt;span class="nc">Hound.Helpers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hound_session&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test&lt;/span> &lt;span class="s2">&amp;#34;the truth&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">meta&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">navigate_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://google.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find_element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;search&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fill_field&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">element&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Apples&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">submit_element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">element&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assert&lt;/span> &lt;span class="n">page_title&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;Apples&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There is quite a bit to unpack here. Let&amp;rsquo;s first understand the core of how a test suite with Hound is setup.&lt;/p>
&lt;p>First, we &lt;code>use ExUnit.Case&lt;/code> as Hound works hand in hand with &lt;code>ExUnit&lt;/code>, a built-in Elixir library for developing unit
tests. It relies on two components of &lt;code>ExUnit&lt;/code>: &lt;code>setup&lt;/code> and &lt;code>on_exit&lt;/code>. This allows Hound to work as expected.&lt;/p>
&lt;p>Then, we &lt;code>use Hound.Helpers&lt;/code> which, with the power of macros, imports all helper functions that are required to access
the browser session.&lt;/p>
&lt;p>Finally, we call &lt;code>hound_session()&lt;/code> which creates a new session (an instance of the browser) and initializes the setup
and tear down functionality of a Hound browser automation test.&lt;/p>
&lt;p>Once the core of the browser automation test is built, we can write test cases as per normal, leveraging on functions
like &lt;code>navigate_to()&lt;/code> and &lt;code>fill_field()&lt;/code> to perform browser actions. The intended behavior of these functions are easy to
understand and the documentation for them can be found &lt;a href="https://hexdocs.pm/hound/readme.html#helpers">here.&lt;/a>&lt;/p>
&lt;h3 id="breaking-it-down">
&lt;a href="#breaking-it-down" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Breaking it down
&lt;/h3>
&lt;p>With a basic understanding of how a test suite can be setup in Hound, we can start to decompose Hound to better
understand what makes it tick.&lt;/p>
&lt;p>First, we need to inspect the following file: &lt;code>lib/hound/helpers.ex&lt;/code> which houses the &lt;code>Hound.Helpers&lt;/code> module, the same
one that we &lt;code>use&lt;/code> in the example above.&lt;/p>
&lt;p>By overriding the &lt;code>__using__&lt;/code> macro, Hound is able to import all of the helper functions into a given file with a
single &lt;code>use&lt;/code> statement. This helps to minimize the boilerplate for users to get started. Macros are meta programming
constructs that inject code during compile-time. More on
macros &lt;a href="https://elixir-lang.org/getting-started/meta/macros.html">here.&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defmacro&lt;/span> &lt;span class="n">__using__&lt;/span>&lt;span class="p">([])&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">quote&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Cookie&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Dialog&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Element&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Navigation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Orientation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Page&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Screenshot&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.SavePage&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.ScriptExecution&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Session&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Window&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Log&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Mouse&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Matchers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="k">unquote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">__MODULE__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Hound.Helpers&lt;/code> also defines the &lt;code>hound_session()&lt;/code> function which relies on &lt;code>setup&lt;/code> and &lt;code>on_exit()&lt;/code> of &lt;code>ExUnit&lt;/code> to setup
and tear down a session between every test case.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defmacro&lt;/span> &lt;span class="n">hound_session&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span> &lt;span class="p">\\&lt;/span> &lt;span class="p">[])&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">quote&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">setup&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Hound&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_session&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">unquote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">self&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">on_exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nc">Hound&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">end_session&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Each helper function constructs a HTTP request to the browser driver server using &lt;code>Hackney&lt;/code> . For
instance, &lt;code>navigate_to&lt;/code> - which opens a given URL in the session - creates the following HTTP request:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">navigate_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">retries&lt;/span> &lt;span class="p">\\&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">final_url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">generate_final_url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">session_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Hound&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_session_id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">make_req&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:post&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;session/&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">session_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/url&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">%{&lt;/span>&lt;span class="ss">url&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">final_url&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">%{},&lt;/span> &lt;span class="n">retries&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hound rolls its own HTTP request/response management system that supports multiple retries. This can be found in
the &lt;code>lib/hound/request_utils.ex&lt;/code> file.&lt;/p>
&lt;p>We have managed to break down the core functionality of Hound. There are additional interesting components to Hound that
I would like to explore as well.&lt;/p>
&lt;h3 id="processes">
&lt;a href="#processes" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Processes
&lt;/h3>
&lt;p>Applications are started according to standard OTP
specification (&lt;a href="https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html">here&lt;/a>). &lt;code>lib/hound.ex&lt;/code>
starts a link to &lt;code>Hound.Supervisor&lt;/code> which initializes two workers: &lt;code>Hound.ConnectionServer&lt;/code> and &lt;code>Hound.SessionServer&lt;/code>.
These are child processes (Hound isn&amp;rsquo;t fully up-to-date with Application convention) that the supervisor manages.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Hound.ConnectionServer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Hound.SessionServer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">supervise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">strategy&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:one_for_one&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Let&amp;rsquo;s explore what the connection server and session server are all about next.&lt;/p>
&lt;p>More information on processes in Elixir &lt;a href="https://elixir-lang.org/getting-started/processes.html">here.&lt;/a>&lt;/p>
&lt;h3 id="connection-server">
&lt;a href="#connection-server" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Connection server
&lt;/h3>
&lt;p>This process is responsible for managing the details of the browser driver and providing information to construct the
HTTP server endpoints. It stores the driver information using &lt;code>Agent&lt;/code> to allow the information to be accessed across
processes.&lt;/p>
&lt;p>More information on &lt;code>Agent&lt;/code> &lt;a href="https://hexdocs.pm/elixir/Agent.html">here.&lt;/a>&lt;/p>
&lt;h3 id="session-management">
&lt;a href="#session-management" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Session management
&lt;/h3>
&lt;p>Sessions, as mentioned earlier, refer to instances of the browser that we want to run our tests on. As Hound supports
multiple sessions across different processes, it has rolled a session management system.&lt;/p>
&lt;p>Session management in Hound relies on &lt;code>ETS&lt;/code>, a built-in storage option provided by Erlang and available in Elixir. When
the session server first starts, it creates a new &lt;code>ETS&lt;/code> table to hold the session information. This server is setup as
a &lt;code>GenServer&lt;/code> which allows it to support asynchronous and synchronous callbacks from other processes.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:ets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="na">@name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:set&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:named_table&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:protected&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">read_concurrency&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">true&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:ok&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When a session is first created by &lt;code>hound_session()&lt;/code>, the current process&amp;rsquo;s ID (by default, it&amp;rsquo;s the main process) is
related to the session. The process is monitored and the new session is created. Under the process ID, multiple sessions
can be created, thus allowing Hound to support multi-session testing. Each session is identified by an ID. Each session
is also assigned a name. By default, we use the session name of &lt;code>:default&lt;/code>. The &lt;code>ETS&lt;/code> table holds the following
information (mapped to JSON for illustration purposes. In reality, &lt;code>ETS&lt;/code> tables store tuples of data so the actual data
stored does not include any keys, just the values in the given order):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Process ID
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;pid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">...&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Process monitoring ref
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;ref&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">...&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;session_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">...&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Map containing all sessions running
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;session&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;&amp;lt;session_name&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;session_id&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As you can see, a session name can be assigned to the same session ID, but not the other way around (I am not too sure
why this is setup as such, more investigation would be required).&lt;/p>
&lt;p>With the &lt;code>ETS&lt;/code> table setup to manage session information, we can avoid a major problem: passing around the session ID to
various functions. If we had done so, we would have increased the overhead required when using the session ID as
functions would have to be designed to accept the session ID and we would have to devise a method of passing the session
ID around.&lt;/p>
&lt;p>Instead, the session ID is retrieved from the server on demand using the &lt;code>current_session_id()&lt;/code> function
in &lt;code>lib/hound.ex&lt;/code>.&lt;/p>
&lt;p>As the current session ID is related to the calling process ID, multiple processes can have different sessions, thus,
providing multi-session testing support. This also means that if the calling process changes, the associated session
will be retrieved or a new session will be created dynamically.&lt;/p>
&lt;p>If a process dies - i.e. &lt;code>Process.monitor()&lt;/code> sends a &lt;code>DOWN&lt;/code> message - the session server will destroy all associated
sessions with that process asynchronously.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">handle_info&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="ss">:DOWN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">destroy_sessions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:noreply&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="configurations">
&lt;a href="#configurations" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Configurations
&lt;/h3>
&lt;p>Configurations are managed using Elixir&amp;rsquo;s &lt;code>Config&lt;/code> API which uses keyword parameter lists to manage configurations.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nc">Config&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">config&lt;/span> &lt;span class="ss">:hound&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">browser&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;firefox&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The configurations are stored as application environment variables which are retrieved by the connection server.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="n">driver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:driver&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nc">Application&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_env&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:hound&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:driver&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;selenium&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More information on the &lt;code>Config&lt;/code> API &lt;a href="https://hexdocs.pm/elixir/master/Config.html">here.&lt;/a>&lt;/p>
&lt;h3 id="coding-conventions">
&lt;a href="#coding-conventions" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Coding conventions
&lt;/h3>
&lt;p>Other rather interesting bits of Elixir convention that Hound employs are:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>^&lt;/code> (pin) operator&lt;/p>
&lt;p>The pin operator ensures that a variable, when matched during assignment, is the same as the existing variable of the
given name&lt;/p>
&lt;p>In Hound, this is used to ensure that the retrieved process ID of session (from the session server) is the same as
the given process ID (from argument).&lt;/p>
&lt;p>If the retrieved &lt;code>pid&lt;/code> does not match the &lt;code>pid&lt;/code> argument, an error is raised.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">all_sessions_for_pid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="ss">:ets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lookup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="na">@name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[{&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_session_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">all_sessions&lt;/span>&lt;span class="p">}]&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">all_sessions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">%{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More information on the pin
operator &lt;a href="https://medium.com/@Julien_Corb/understand-the-pin-operator-in-elixir-a6f534d865a6">here.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>defdelegate&lt;/code>&lt;/p>
&lt;p>&lt;code>defdelegate&lt;/code> dictates that a function&amp;rsquo;s underlying behavior is deferred to that of another function in another
module.&lt;/p>
&lt;p>This allows a module to house the functionality of different modules without breaking the modularity afforded by the
module system.&lt;/p>
&lt;p>Interestingly, the &lt;code>__using__&lt;/code> override in &lt;code>Hound.Helpers&lt;/code> can be replaced with a multitude of &lt;code>defdelegate&lt;/code> to the
helper functions but it would, understandably, create a lot of confusion.&lt;/p>
&lt;p>More information on &lt;code>defdelegate&lt;/code> &lt;a href="https://hexdocs.pm/elixir/Kernel.html#defdelegate/2">here.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>=&lt;/code> (match operator) in function parameters&lt;/p>
&lt;p>As &lt;code>=&lt;/code> is the match operator in Elixir, it can be used to perform pattern matching while assigning the matched
pattern to a variable name.&lt;/p>
&lt;p>This is very useful when working with structures as you may not want to deconstruct the entire structure while
ensuring that arguments follow the given structure.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">(%&lt;/span>&lt;span class="nc">User&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">IO&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">puts&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:name&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More information on the match operator &lt;a href="https://elixir-lang.org/getting-started/pattern-matching.html">here.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pattern matching as enums&lt;/p>
&lt;p>Pattern matching with atoms can be used as substitutes for typical enum behavior.&lt;/p>
&lt;p>An enum in Kotlin may look like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">MatchClause&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CLASS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;class&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CSS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;css selector&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NAME&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ELEM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In Elixir, it can be written as such:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:class&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;class&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:css&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;css selector&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:name&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:id&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:elem&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;element&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="conclusion">
&lt;a href="#conclusion" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Conclusion
&lt;/h2>
&lt;p>To conclude, Hound is a browser automation and integration testing library built on top of web driver - more
specifically, browser driver - technologies as it leverages Selenium, PhantomJS, and ChromeDriver to build a highly
abstracted and simple to use API for building integration tests.&lt;/p>
&lt;p>Under the hood, Hound is an intriguing project that uses fundamental constructs to build powerful internal libraries
that support complex operations.&lt;/p>
&lt;p>If you are interested in the topics discussed in this post, here are some additional readings:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://www.tutorialspoint.com/what-is-web-driver-in-selenium">What is a web driver in Selenium?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://w3c.github.io/webdriver/">W3C WebDriver Specification&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/HashNuke/hound">Hound GitHub repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/benoitc/hackney">Hackney GitHub repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://support.smartbear.com/testcomplete/docs/testing-with/advanced/distributed/basic-concepts.html">Distributed testing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://scotch.io/tutorials/what-is-phantomjs-and-how-is-it-used">What is PhantomJS?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://source.chromium.org/chromium/chromium/src/+/master:chrome/test/chromedriver/">ChromeDriver repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.testim.io/blog/browser-test-automation/">Uses of browser automation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bittorrent.org/beps/bep_0003.html">BitTorrent protocol&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hexdocs.pm/ex_unit/ExUnit.html">ExUnit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html">Application conventions in Elixir&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hexdocs.pm/elixir/Process.html#monitor/1">Process monitoring&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://erlang.org/doc/man/ets.html">ETS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hexdocs.pm/elixir/GenServer.html">GenServer&lt;/a>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>NOTE:&lt;/strong> I do not condone the use of browser automation or torrenting for illegal purposes. Any links or discussions
about the mentioned subjects are purely for educational purposes and should remain as that.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>Open-source Deep Dive is a series where I pick apart open-source projects to explain the underlying concepts that power
these projects and share my findings about the project!&lt;/p></description></item><item><title>Deploying discord bots written in Kotlin to Heroku</title><link>https://woojiahao.com/blog/post/deploying-discord-bot-kotlin/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>https://woojiahao.com/blog/post/deploying-discord-bot-kotlin/</guid><description>
&lt;p>Over my time in TPH, I have noticed that a common woe aspiring bot developers have is that they are unable to host
their Discord bot online as they may not have access to a credit card.&lt;/p>
&lt;h2 id="introducing-heroku">
&lt;a href="#introducing-heroku" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Introducing Heroku!
&lt;/h2>
&lt;p>While the official Discord bots used in TPH - like HotBot - is hosted via paid platforms, there are free alternatives
to deploying your bot online. This is where Heroku comes into the picture!&lt;/p>
&lt;blockquote>
&lt;p>Heroku is a cloud platform that lets companies build, deliver, monitor and scale apps — we&amp;rsquo;re the fastest way to
go from idea to URL, bypassing all those infrastructure headaches.&lt;/p>
&lt;/blockquote>
&lt;p>Heroku&amp;rsquo;s free tier does not require any credit card information and has sufficient uptime for your basic bot
development needs and it is a great starting place to understand hosting.&lt;/p>
&lt;h2 id="how-does-heroku-work">
&lt;a href="#how-does-heroku-work" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
How does Heroku work?
&lt;/h2>
&lt;p>Before diving into setting up a Discord bot on Heroku, it is best to explain how Heroku is used. Heroku relies on the
Git version control system (VCS) to manage an application. This means that it integrates well with any existing projects
that already use Git. Do not fret, even if your application does not use Git, the configuration and setup for Heroku is
still simple.&lt;/p>
&lt;p>By using Git, Heroku receives the project files directly and it is responsible for building the project. This is unlike
other hosting platforms where you would often only supply the final executable - a &lt;code>.jar&lt;/code> file in our case - to the
hosting platform to run.&lt;/p>
&lt;p>In order for Heroku to understand how it will build and deploy your application, you must provide a &lt;code>Procfile&lt;/code>.&lt;/p>
&lt;p>The &lt;code>Procfile&lt;/code> is comprised of two key components - the dyno to run the application on and the commands to run your
application.&lt;/p>
&lt;p>According to the &lt;a href="https://www.heroku.com/dynos">Heroku documentation on dynos&lt;/a>, dynos are containers that are used to
run and scale all Heroku applications. Rather than worrying about configuring your build environment or OS, you can
focus on building your applications and allowing Heroku to take over the build and deployment process. For all
Discord bots, we will use a &lt;strong>worker&lt;/strong> dyno.&lt;/p>
&lt;p>The build commands we supply correspond to the build commands we use to run our bots locally.&lt;/p>
&lt;p>As Heroku uses the project files to determine the type of tools we are using, we do not need to specify the
instructions to create the executable. In our case, since we are using Maven, it can intelligently detect the
&lt;code>pom.xml&lt;/code> file and create the &lt;code>.jar&lt;/code> accordingly. This leaves us with only the run commands to include in our &lt;code>Procfile&lt;/code>
.&lt;/p>
&lt;p>Finally, to tighten security, we will store all bot tokens in Heroku&amp;rsquo;s
&lt;a href="https://devcenter.heroku.com/articles/config-vars">config vars.&lt;/a> From a code perspective, these config vars are simply
environment variables available to our applications. This allows us to load our bot token during runtime and prevent
the bot token from being leaked.&lt;/p>
&lt;p>Thus, we can define our deployment plan as such:&lt;/p>
&lt;ol>
&lt;li>Initialise the codebase as a Git repository&lt;/li>
&lt;li>Create a Heroku application for the bot&lt;/li>
&lt;li>Create a &lt;code>Procfile&lt;/code> to supply instructions for Heroku to run the bot&lt;/li>
&lt;li>Store the bot token as a config var to be used by your bot&lt;/li>
&lt;/ol>
&lt;p>What I have just presented is a general overview of Heroku as a hosting platform. I will be diving into the
implementation
in the following sections.&lt;/p>
&lt;h2 id="getting-started">
&lt;a href="#getting-started" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Getting started
&lt;/h2>
&lt;p>For this article, I will be using a very simple Discord bot written in Kotlin. I have chosen to use JDA as the focus of
this guide is to understand Heroku. The code repository can be found
&lt;a href="https://github.com/woojiahao/discord-heroku-deployment-demo">here.&lt;/a>&lt;/p>
&lt;p>If you wish to follow along, you can get the repository via&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/woojiahao/discord-heroku-deployment-demo ping-bot
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> ping-bot/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Aside from that, basic understanding of the following is good to have to understand the technical details of this guide.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://git-scm.com/book/en/v2">Git&lt;/a> - version control system that integrates with Heroku to enable easy deployments&lt;/li>
&lt;li>&lt;a href="http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">Maven&lt;/a> - build tool for Kotlin to
manage application dependencies&lt;/li>
&lt;/ol>
&lt;p>In Kotlin/Java, we are looking to create a &lt;code>.jar&lt;/code> file. This &lt;code>.jar&lt;/code> file can be thought of like a &lt;code>.exe&lt;/code> file.
Essentially, it bundles the application and allows us to run our bot without having to fire up an IDE.&lt;/p>
&lt;p>To create this &lt;code>.jar&lt;/code> file, we will use Maven. For more information about using Maven to create &lt;code>.jar&lt;/code> files, refer to
&lt;a href="http://tutorials.jenkov.com/maven/maven-build-fat-jar.html">this&lt;/a> guide.&lt;/p>
&lt;p>With the formalities out of the way, let&amp;rsquo;s get down to deploying our bot.&lt;/p>
&lt;h2 id="installing-heroku">
&lt;a href="#installing-heroku" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Installing Heroku
&lt;/h2>
&lt;p>You will have to install Heroku onto your machine to execute the following commands in the command line. You can find
the installation instructions for Heroku &lt;a href="https://devcenter.heroku.com/articles/heroku-cli">here&lt;/a>.&lt;/p>
&lt;p>To ensure that you have installed Heroku successfully, run &lt;code>heroku --version&lt;/code>. My version of Heroku is
&lt;code>heroku/7.39.2 linux-x64 node-v13.12.0&lt;/code>&lt;/p>
&lt;h2 id="setup-a-git-repository">
&lt;a href="#setup-a-git-repository" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Setup a Git repository
&lt;/h2>
&lt;p>As mentioned earlier, we need to ensure that our application is a Git repository for Heroku to work.&lt;/p>
&lt;p>While it is recommended
to &lt;a href="https://help.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line">publish your repository to GitHub&lt;/a> (
or any other version control website), it is not necessary
for deploying your applicaiton to Heroku.&lt;/p>
&lt;p>If you are using the sample bot, it is already a Git repository.&lt;/p>
&lt;p>If you are deploying your own bot, initialise a repository by using the following command inside the root folder of your
codebase.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="create-a-new-heroku-application">
&lt;a href="#create-a-new-heroku-application" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Create a new Heroku application
&lt;/h2>
&lt;p>Then, we want to create a Heroku application.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ heroku create &lt;span class="o">[&lt;/span>project name&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The project name is optional and will be automatically generated if not provided. It is recommended that you give a name
to be organised.&lt;/p>
&lt;p>To ensure that the Heroku application has been created, run the &lt;code>git remote -v&lt;/code> command to list the remotes of your
repository. Should your application have been created successfully, you will see a new remote added linking to a Heroku
Git remote.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://woojiahao.com/blog/./post/deploying-discord-bot-kotlin/git-remote.png"
alt="Results of git remote -v"
width=1086
height="352" />&lt;/p>
&lt;p>With the Heroku application created, we can begin configuring our repository to deploy to Heroku.&lt;/p>
&lt;h2 id="creating-a-procfile">
&lt;a href="#creating-a-procfile" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Creating a Procfile
&lt;/h2>
&lt;p>As explained earlier, the &lt;code>Procfile&lt;/code> acts as a build instruction manual for our application. It instructs Heroku how we
want to run our application. Heroku takes over the rest and helps with managing our build environment.&lt;/p>
&lt;p>For my sample bot, the &lt;code>Procfile&lt;/code> looks like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>worker: java -jar target/Bot.jar
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s breakdown this file. We first declare the dyno type as &lt;code>worker&lt;/code>. Then, we specify the command to run our &lt;code>.jar&lt;/code>
file.&lt;/p>
&lt;p>Heroku is able to intelligently detect that our Kotlin application uses Maven as a build tool and runs the
&lt;code>mvn clean install&lt;/code> command to create our &lt;code>Bot.jar&lt;/code> file. Then, it will use the commands in the &lt;code>Procfile&lt;/code> to run the
application.&lt;/p>
&lt;h2 id="securing-discord-bot-tokens">
&lt;a href="#securing-discord-bot-tokens" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Securing Discord bot tokens
&lt;/h2>
&lt;p>A Discord bot requires a token to run.&lt;/p>
&lt;p>You can obtain this bot token when you make a new Discord bot from the Discord
&lt;a href="https://discordpy.readthedocs.io/en/latest/discord.html">developer dashboard&lt;/a>.
However, you do not want to expose this token in your repository as this would mean that others could launch and
access your bot.&lt;/p>
&lt;p>As mentioned earlier, we will make use of Heroku&amp;rsquo;s &lt;a href="https://devcenter.heroku.com/articles/config-vars">config vars&lt;/a> to
safely store and access this token.&lt;/p>
&lt;p>We will add our bot&amp;rsquo;s token as an environment variable and use &lt;code>System.getenv()&lt;/code> method to retrieve this value.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ heroku config:set &lt;span class="nv">BOT_TOKEN&lt;/span>&lt;span class="o">=&lt;/span>&amp;lt;bot token&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Inside the &lt;code>Bot.kt&lt;/code> file, you will find the following lines in the &lt;code>main()&lt;/code> function.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">token&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;BOT_TOKEN&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">?:&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Must include bot token in environment variable for bot to run&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will retrieve the corresponding environment variable that we have stored in Heroku. If there is no environment
variable present, we will stop the bot from launching and display an error.&lt;/p>
&lt;p>An additional benefit of storing our bot tokens as an environment variable is that we are able to store the bot token
locally as an environment variable which streamlines our development process as we could have a separate token used
for a development/testing bot.&lt;/p>
&lt;h2 id="launching-the-bot">
&lt;a href="#launching-the-bot" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Launching the bot
&lt;/h2>
&lt;p>After configuring everything, commit all the changes to your project, and push it to the &lt;code>heroku&lt;/code> remote.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git commit -am &lt;span class="s2">&amp;#34;Setup Heroku&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git push heroku master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you encounter a problem with pushing to the &lt;code>heroku&lt;/code> remote, use the command &lt;code>heroku logs --tail&lt;/code> and find the
latest error messages to debug any errors.&lt;/p>
&lt;p>After pushing the changes, Heroku will build your application. However, it is not online yet as you have to scale
your application. This tells Heroku how many instances of your application you wish to run. For our case, we can go
with one worker dyno.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ heroku ps:scale &lt;span class="nv">worker&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can now invite your bot to a server and test it out. If you&amp;rsquo;re using the sample PingBot, you can use &lt;code>!ping&lt;/code> and
expect the bot to respond with &lt;code>Pong!&lt;/code>.&lt;/p>
&lt;h2 id="now-what">
&lt;a href="#now-what" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Now what?
&lt;/h2>
&lt;p>Congratulations! You have just deployed a Discord bot onto Heroku! When you make changes to the bot, you are free to
commit and push those changes to the &lt;code>heroku&lt;/code> remote to update the bot that is online.&lt;/p>
&lt;p>Here are some tips for developing with Heroku.&lt;/p>
&lt;ol>
&lt;li>While working on your development copy of the bot, it is recommended that you obtain a seprate bot token and
attach it as an environment variable to your local development environment. Doing so allows you to maintain your
bot&amp;rsquo;s uptime while making changes.&lt;/li>
&lt;li>If you encounter any errors or your bot is not responding, use the &lt;code>heroku logs --tail&lt;/code> command to view the logs
of your application. Doing so allows you to check if there were any errors while running your project.&lt;/li>
&lt;li>If you require persistent storage, Heroku comes with a free tier plugin for
&lt;a href="https://www.heroku.com/postgres">PostgreSQL.&lt;/a> Heroku - by default - has ephemeral storage, meaning it does not
maintain new files after each build.&lt;/li>
&lt;/ol>
&lt;h2 id="conclusion">
&lt;a href="#conclusion" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Conclusion
&lt;/h2>
&lt;p>Heroku offers a free alternative to many hosting platforms and is a perfect platform for aspiring bot developers to
begin.&lt;/p>
&lt;p>More resources on hosting JVM-based applications on Heroku:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://devcenter.heroku.com/articles/getting-started-with-java#introduction">Getting Started on Heroku with Java&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/heroku/java-sample">Java Sample (on GitHub)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Diving into (Java) streams</title><link>https://woojiahao.com/blog/post/diving-into-streams/</link><pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate><guid>https://woojiahao.com/blog/post/diving-into-streams/</guid><description>
&lt;h2 id="what-are-streams">
&lt;a href="#what-are-streams" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What are streams?
&lt;/h2>
&lt;p>Streams was introduced in Java 1.8 and it had completely changed how we write code. The majority of what I will be discussing will be what I have learnt from watching &lt;a href="https://www.youtube.com/watch?v=1OpAgZvYXLQ&amp;amp;t=6985s">this talk&lt;/a> by Venkat Subramaniam. His talk was what had originally got me into using streams and the concept of lambdas.&lt;/p>
&lt;h2 id="lets-revise">
&lt;a href="#lets-revise" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Let&amp;rsquo;s revise
&lt;/h2>
&lt;h3 id="how-do-we-implement-a-lambda-in-java">
&lt;a href="#how-do-we-implement-a-lambda-in-java" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
How do we implement a lambda in Java?
&lt;/h3>
&lt;p>Lambdas are simple constructs with very powerful use cases in Java and many other languages. Most commonly, lambdas enable the everyday programmer to reduce their clunky &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html">anonymous inner classes&lt;/a> into simple one-liners. It can also be used to pass methods around between methods without having to redeclare these method over and over again.&lt;/p>
&lt;p>The common components that make up a lambda in Java are:&lt;/p>
&lt;ol>
&lt;li>A functional interface&lt;/li>
&lt;li>A method that matches the signature of the method in the functional interface&lt;/li>
&lt;/ol>
&lt;h3 id="what-is-a-functional-interface">
&lt;a href="#what-is-a-functional-interface" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What is a functional interface?
&lt;/h3>
&lt;p>A functional interface is an interface that contains a single method.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">StringOp&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="nf">perform&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="using-a-lambda">
&lt;a href="#using-a-lambda" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Using a lambda:
&lt;/h3>
&lt;p>Code:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">StringOp&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="nf">perform&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LambdaDemo&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">StringOp&lt;/span> &lt;span class="n">operation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">reverse&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">operation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">dlroW&lt;/span> &lt;span class="n">olleH&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In this example, I created a functional interface (&lt;code>StringOp&lt;/code>), declared an instance of that functional interface (&lt;code>operation&lt;/code>) and gave it&amp;rsquo;s definition all in one line using a lambda.&lt;/p>
&lt;p>The core syntax of the lambda is as such:&lt;/p>
&lt;pre tabindex="0">&lt;code>(parameters) -&amp;gt; {
actions
}
&lt;/code>&lt;/pre>&lt;p>In cases where there is only 1 parameter, the parantheses can be omitted, as seen in the example, and if the method body a single line, you can also omit the curly braces.&lt;/p>
&lt;p>If lambdas did not exist, I would have to declare the method like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">StringOp&lt;/span> &lt;span class="n">operation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringOp&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">perform&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">reverse&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">operation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>These are just simple examples of what lambdas are capable of, there a many more uses for them and you can check out a more comprehensive guide here: &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&lt;/a>&lt;/p>
&lt;h2 id="starting-streams">
&lt;a href="#starting-streams" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Starting streams
&lt;/h2>
&lt;p>I will first begin by showing an example of a typical program and then showing the power of streams and how they can be used to simplify your work.&lt;/p>
&lt;p>&lt;strong>Problem:&lt;/strong> Write a program to print out all numbers that are multiples of a given number within a given range.&lt;/p>
&lt;p>&lt;strong>Traditional Solution:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printMultiples&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">multiple&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">upper&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">upper&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">multiple&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printMultiples&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Streams Solution:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printMultiples&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">multiple&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">upper&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">IntStream&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">rangeClosed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">upper&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">multiple&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printMultiples&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Output:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>2
4
6
8
10
&lt;/code>&lt;/pre>&lt;p>As you can see, both methods produce the same output, however, the latter is a lot neater than the former. Not only is the solution simpler to understand than the solution that introduces loops and if statements, it is a lot easier to read and understand.&lt;/p>
&lt;h2 id="explanation">
&lt;a href="#explanation" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Explanation:
&lt;/h2>
&lt;p>The reason why methods like &lt;code>.filter(i -&amp;gt; i % multiple == 0)&lt;/code> works is due to the use of functional interface as mentioned previously. According to the Java documentation on streams, &lt;code>.filter()&lt;/code> receives a &lt;code>Predicate&lt;/code> interface as a parameter.&lt;/p>
&lt;blockquote>
&lt;p>Represents a predicate (boolean-valued function) of one argument.&lt;/p>
&lt;/blockquote>
&lt;p>This means in order to create a lambda that receives one argument and returns a boolean condition.&lt;/p>
&lt;h2 id="method-references">
&lt;a href="#method-references" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Method references
&lt;/h2>
&lt;p>Another unusual syntax you might have noticed is this &lt;code>forEach(System.out::println)&lt;/code>, you might be scratching your head and wondering that this &lt;code>::&lt;/code> symbol is doing. Well, it is known as a &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">method reference&lt;/a>. The core idea with method references would be as Mr. Venkat put it&lt;/p>
&lt;blockquote>
&lt;p>Since the value is a simple pass over, you can use a method reference.&lt;/p>
&lt;/blockquote>
&lt;p>To illustrate this, let&amp;rsquo;s see how you would use the &lt;code>.forEach()&lt;/code> method normally:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">menu&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="s">&amp;#34;Pizza&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Cola&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;Salad&amp;#34;&lt;/span> &lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">menu&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">menuItem&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">menuItem&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;pre tabindex="0">&lt;code>Pizza
Cola
Salad
&lt;/code>&lt;/pre>&lt;p>As you can see, for &lt;code>forEach()&lt;/code>, the &lt;code>menuItem&lt;/code> argument you receive is simply being passed onto the &lt;code>System.out.println&lt;/code> method call, and since no other modification is being made to this &lt;code>menuItem&lt;/code> value, you can use a method reference to &lt;code>System.out.println&lt;/code> to shorten to code.&lt;/p>
&lt;p>In this particular instance, since &lt;code>println&lt;/code> is a static method of the &lt;code>System.out&lt;/code> object, the method reference will be a reference to a static method, which means the syntax would simply be having the &lt;code>object name&lt;/code> followed by the &lt;code>::&lt;/code> symbol and then the &lt;code>target method name&lt;/code>.&lt;/p></description></item></channel></rss>