<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jiahao.blog</title><link>/</link><description>Recent content on jiahao.blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Where Have I Been? (2024 Edition)</title><link>/post/where-have-i-been/</link><pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate><guid>/post/where-have-i-been/</guid><description>
&lt;p>I have not been posting a lot on this blog for quite a while now. This is not because I have
stopped being interested in writing. Quite the opposite actually. I have been working with other
companies like BetterStack and CodeCrafter&amp;rsquo;s &lt;a href="https://osshistory.org/p/elixir">OSS History&lt;/a> to
create articles for them.&lt;/p>
&lt;p>I have also been working on several big projects like my
&lt;a href="https://interviews.woojiahao.com">Technical Interview Study Guide&lt;/a> and
&lt;a href="https://github.com/woojiahao/omashu">Omashu&lt;/a>.&lt;/p>
&lt;p>I have several articles in mind that I would like to post on this blog so stay tuned!&lt;/p></description></item><item><title>Installing UxPlay on Arch Linux</title><link>/post/uxplay-arch-linux/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>/post/uxplay-arch-linux/</guid><description>
&lt;p>I got my iPad Air 4 a few months ago and have been wanting to test the AirPlay functionality on it. However, as I am on
Manjaro Linux - a Linux distribution based on Arch Linux, I was unable to get the native support that MacOS has.&lt;/p>
&lt;p>I stumbled upon &lt;a href="https://github.com/antimof/UxPlay">UxPlay&lt;/a> as a potential solution for this problem.&lt;/p>
&lt;p>UxPlay is an AirPlay Unix mirroring server that acts like an AppleTV for screen-mirroring on the machine that is running
the server. It only works on &lt;a href="https://en.wikipedia.org/wiki/Unix">UNIX systems.&lt;/a>&lt;/p>
&lt;p>The README is quite verbose and only contains the package names for Debian, Red Hat, Fedora, CentOS, OpenSUSE, FreeBSD
distros.&lt;/p>
&lt;p>So, this guide aims to help install UxPlay on Arch/Manjaro.&lt;/p>
&lt;h2 id="installation">
&lt;a href="#installation" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Installation
&lt;/h2>
&lt;p>Install the necessary dependencies.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">yay -S cmake pkgconf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yay -S openssl libplist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yay -S avahi gstreamer gst-plugins-base gst-libav gst-plugins-bad
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yay -S gstreamer-vaapi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yay -S libx11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># If you are using Manjaro, you can should also install the manjaro-gstreamer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yay -S manjaro-gstreamer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Clone the UxPlay repository.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone https://github.com/antimof/UxPlay.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> UxPlay
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Build and install the server.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cmake .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UxPlay will be installed to &lt;code>/usr/local/bin/uxplay&lt;/code>.&lt;/p>
&lt;p>Run the server.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo /usr/local/bin/uxplay
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>That&amp;rsquo;s all there is to this!&lt;/p>
&lt;h2 id="optimizing-for-goodnotes-5">
&lt;a href="#optimizing-for-goodnotes-5" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Optimizing for GoodNotes 5
&lt;/h2>
&lt;p>One of the main uses I have for AirPlay is to annotate and write notes in GoodNotes 5 without having the worry about the
size constraint. Typically, I would use a 50:50 layout, where one side hosts my annotated notes (like a textbook) and
the other is a notebook for my notes.&lt;/p>
&lt;p>However, with AirPlay, we can configure GoodNotes 5 to mirror only the notes side (displaying it on screen). The other
side will remain the same. This way, the layout can be 25:75 without sacrificing the readability of the notes as the
notes are displayed on a bigger screen while still being controlled via the 25% on the iPad.&lt;/p></description></item><item><title>Open-source Deep Dive: Broadway (Part 1) - Message queues, concurrency in Elixir, and Broadway architecture</title><link>/post/odd-broadway-1/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>/post/odd-broadway-1/</guid><description>
&lt;p>This open-source deep dive has been split into two parts! The first part covers the prerequisite knowledge that would be
good to know when trying to understand the inner workings of Broadway. The second part is an in-depth analysis of the
implementation of various features of Broadway.&lt;/p>
&lt;p>This is the first part of the deep dive and the following topics will be covered:&lt;/p>
&lt;ol>
&lt;li>A brief introduction to what Broadway is&lt;/li>
&lt;li>Message queues&lt;/li>
&lt;li>Concurrency in Elixir&lt;/li>
&lt;li>Producer/consumer model &amp;amp; GenStage&lt;/li>
&lt;li>Architecture of a Broadway pipeline&lt;/li>
&lt;li>Construction of producer &amp;amp; processor components&lt;/li>
&lt;/ol>
&lt;p>If you wish to jump right into the meat of Broadway, you can find the second
part &lt;a href="open-source-deep-dive-broadway-part-2">here!&lt;/a>.&lt;/p>
&lt;h1 id="act-1-scene-1">
&lt;a href="#act-1-scene-1" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
&lt;strong>Act 1, Scene 1&lt;/strong>
&lt;/h1>
&lt;p>&lt;em>You have just received your latest feature to work on and it is to build a system that receives transaction information
from a message queue, maps the customer code in this transaction information to the customer&amp;rsquo;s information, and stores
this collective information in a separate database to be queried for customer transaction analysis. Your boss has
developed an obsession with Elixir recently and is now pushing for every project to use it. Gasp.&lt;/em>&lt;/p>
&lt;p>You start researching for libraries that can do exactly that and stumble
upon &lt;a href="https://github.com/dashbitco/broadway">Broadway&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip;build &lt;strong>[concurrent]&lt;/strong> and &lt;strong>[multi-stage]&lt;/strong> &lt;strong>[data ingestion]&lt;/strong> and &lt;strong>[data processing] [pipelines]&lt;/strong>&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>Oh boy&amp;hellip; that — that is a mouthful&amp;hellip; Let&amp;rsquo;s break it down, shall we?&lt;/p>
&lt;ol>
&lt;li>&lt;strong>concurrent&lt;/strong> - having two or more computations in progress at the same time; &lt;em>in progress&lt;/em> meaning that they do not
have to be executed at the same time (
definition &lt;a href="https://www.oreilly.com/library/view/the-art-of/9780596802424/">here&lt;/a>)&lt;/li>
&lt;li>&lt;strong>multi-stage&lt;/strong> - successive operating stages (
definition &lt;a href="https://www.merriam-webster.com/dictionary/multistage">here&lt;/a>)&lt;/li>
&lt;li>&lt;strong>data ingestion&lt;/strong> - process of moving data from one source to a destination for further storage and analysis (
definition &lt;a href="https://www.alooma.com/blog/what-is-data-ingestion#:~:text=Data%20ingestion%20is%20a%20process,%2C%20CSVs%2C%20or%20from%20streams.">here&lt;/a>)&lt;/li>
&lt;li>&lt;strong>data processing&lt;/strong> - conversion of data into a usable and desirable form (
definition &lt;a href="https://planningtank.com/computer-applications/data-processing#:~:text=Data%20processing%20is%20the%20conversion,devices%2C%20and%20thus%20done%20automatically.">here&lt;/a>)&lt;/li>
&lt;li>&lt;strong>pipelines&lt;/strong> - series of data processing elements (
definition &lt;a href="https://en.wikipedia.org/wiki/Pipeline_(computing)#:~:text=In%20computing%2C%20a%20pipeline%2C%20also,or%20in%20time%2Dsliced%20fashion.">here&lt;/a>)&lt;/li>
&lt;/ol>
&lt;p>In essence, Broadway builds systems that behave like factory assembly lines. Raw materials (data) is fed into the
assembly line (Broadway pipeline) which is then pieced together to create the end product or other components used in
the final product. The factory has multiple identical assembly lines running so raw material can be fed into any of
these lines to be worked on.&lt;/p>
&lt;p>For your use case, the flow of data will look something like this:&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post//open-source-deep-dive/broadway/pipeline.jpg"
alt="Sample scenario flowchart"
width=534
height="462" />&lt;/p>
&lt;p>So how does Broadway achieve all of this?&lt;/p>
&lt;h1 id="lights-camera-action">
&lt;a href="#lights-camera-action" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Lights! Camera! Action!
&lt;/h1>
&lt;p>Before understanding the internals of Broadway, we should establish some basic knowledge of the technologies we will be
using so that we won&amp;rsquo;t be headless chickens running into this.&lt;/p>
&lt;p>Broadway revolve around the following concepts:&lt;/p>
&lt;ol>
&lt;li>message queues&lt;/li>
&lt;li>concurrency in Elixir&lt;/li>
&lt;/ol>
&lt;h2 id="what-are-message-queues">
&lt;a href="#what-are-message-queues" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What are message queues?
&lt;/h2>
&lt;p>&lt;strong>Note!&lt;/strong> While Broadway can integrate with many types of data sources, the core examples given in the project focus on
message queues as the primary data source.&lt;/p>
&lt;blockquote>
&lt;p>Message queues are like containers that hold sequences of work objects — called messages — that are to be consumed and
processed. It aids with building asynchronous modular and concurrent systems.&lt;/p>
&lt;/blockquote>
&lt;p>Messages are created and delivered to these queues by &lt;strong>producers&lt;/strong> and taken from these queues for processing by **
consumers.** These messages can vary from something as simple as plain information to more complex structures like
requests or — in our case — transaction information.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post//open-source-deep-dive/broadway/message_queue.png"
alt="Message queue architecture"
width=1000
height="199" />&lt;/p>
&lt;p>Message queues are useful for &lt;strong>decentralising the communication mechanism of large systems&lt;/strong> by acting as a medium for
exchanging events between systems which allows for systems to be easily scaled and distributed.&lt;/p>
&lt;p>This is a reduced explanation of what a message queue is and what it is capable of. For more information about message
queues, the &lt;a href="https://aws.amazon.com/message-queue/">Amazon documentation&lt;/a> and
this &lt;a href="https://www.cloudamqp.com/blog/what-is-message-queuing.html#:~:text=A%20message%20queue%20is%20a,some%20headers%20at%20the%20top.">blog post&lt;/a>
by CloudAMQP are good places to start.&lt;/p>
&lt;h2 id="concurrency-in-elixir">
&lt;a href="#concurrency-in-elixir" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Concurrency in Elixir
&lt;/h2>
&lt;p>Broadway relies heavily on concurrency in Elixir. The topology (architecture) of a pipeline is built on top of processes
and many of the features are achieved using the robust concurrency model of Elixir. So what exactly is the concurrency
model in Elixir?&lt;/p>
&lt;p>Elixir employs the &lt;strong>actor concurrency model&lt;/strong>. In this model, actors are defined as &lt;strong>self-isolated units of
processing&lt;/strong>. In Elixir, these actors are called &lt;strong>processes&lt;/strong> and they are managed by
the &lt;a href="https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine)#:~:text=BEAM%20is%20the%20virtual%20machine,beam%20file%20extension.">Erlang VM&lt;/a>
. Elixir code is run in each process and a default/main process is akin to that of
the &lt;a href="https://cocoacasts.com/swift-and-cocoa-fundamentals-what-is-the-main-thread">main thread&lt;/a> in other concurrency
models.&lt;/p>
&lt;p>Each process communicates via &lt;strong>asynchronous message passing&lt;/strong>. Think of a process as a mailbox of sorts; it has a &amp;ldquo;bin&amp;rdquo;
to receive incoming messages and it possess an &amp;ldquo;address&amp;rdquo; for other processes to identify it by.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post//open-source-deep-dive/broadway/actor_concurrency_model.png"
alt="Actor concurrency model visualisation"
width=1920
height="903" />&lt;/p>
&lt;p>The unique aspect of this model is the &lt;strong>lack of shared mutable state&lt;/strong> that other concurrency models rely on. Rather,
state is exclusive to each process.&lt;/p>
&lt;p>In order for the state of a process to be altered, the owner process must make the alteration either on request or
internally due to certain changes.&lt;/p>
&lt;p>The topic of concurrency in Elixir is vast and Elixir provides many other features surrounding its concurrency model
such as &lt;a href="https://elixir-lang.org/getting-started/mix-otp/genserver.html">GenServer&lt;/a>. This section is a short preview of
what the actor concurrency model and concurrency in Elixir is all about. For more information, you can refer to
this &lt;a href="https://berb.github.io/diploma-thesis/original/054_actors.html">thesis paper&lt;/a> and
the &lt;a href="https://en.wikipedia.org/wiki/Actor_model#:~:text=The%20actor%20model%20in%20computer,universal%20primitive%20of%20concurrent%20computation.&amp;amp;text=Actors%20may%20modify%20their%20own,for%20lock%2Dbased%20synchronization">Wikipedia article&lt;/a>
talking about the actor concurrency model and the
official &lt;a href="https://elixir-lang.org/getting-started/processes.html">documentation&lt;/a> and
this &lt;a href="https://serokell.io/blog/elixir-otp-guide">tutorial&lt;/a> on OTP in Elixir for more examples of concurrency in Elixir.&lt;/p>
&lt;h2 id="cue-the-producerconsumer-model">
&lt;a href="#cue-the-producerconsumer-model" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Cue the producer/consumer model
&lt;/h2>
&lt;p>Using the actor concurrency model as a foundation, another concurrency pattern can be modelled in Elixir — the
producer/consumer model.&lt;/p>
&lt;p>This model aims to allow for decoupled data production and consumption by setting up two separate processes to handle
each task — effectively creating a logical separation of concerns.&lt;/p>
&lt;p>However, the producer/consumer model faces a critical issue — what happens if the producer generates excessive messages
for the consumer? The consumer will be overwhelmed and will eventually fail trying to keep up with processing that many
messages. This is
where &lt;a href="https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7">back pressure&lt;/a>
comes into play.&lt;/p>
&lt;blockquote>
&lt;p>Back pressure is a control mechanism for how much a producer should emit based on consumer demand, consumer message
buffering, or limited sampling&lt;/p>
&lt;/blockquote>
&lt;p>Back pressure avoids the problem of overloading the consumer with messages by applying one of or a combination of the
three methods mentioned above (more information in the
link &lt;a href="https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7">here&lt;/a>).&lt;/p>
&lt;h2 id="the-next-frontier-of-concurrency-genstage">
&lt;a href="#the-next-frontier-of-concurrency-genstage" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
The next frontier (of concurrency): GenStage
&lt;/h2>
&lt;p>Seeing the value of having a standard implementation for the producer/consumer model, the Elixir team decided to develop
exactly that.&lt;/p>
&lt;blockquote>
&lt;p>GenStage is a specification for exchanging events between producers and consumers with back pressure between Elixir
processes&lt;/p>
&lt;/blockquote>
&lt;p>Producers &lt;strong>emit events&lt;/strong> to consumers for &lt;strong>processing&lt;/strong>. The events can be of any structure.&lt;/p>
&lt;p>The control mechanism used is a demand system. Consumers inform producers of how many events they can handle (demand)
and producers emits no more than the demanded amount. This ensures that the consumers are capable of handling the events
emitted.&lt;/p>
&lt;p>Producer-consumers behave like both producers and consumers. They are used to perform transformations on events emitted
by the producer before they are emitted to the consumer.&lt;/p>
&lt;p>Similar to &lt;a href="https://hexdocs.pm/elixir/GenServer.html">GenServer&lt;/a>, stages in GenStage exchange events
through &lt;a href="https://hexdocs.pm/gen_stage/GenStage.html#module-callbacks">callbacks&lt;/a>.&lt;/p>
&lt;p>When a demand is handled — i.e. producer emits events and demanding consumer handles these events — another demand is
made, creating a cycle where both stages are always working - ideally.&lt;/p>
&lt;p>GenStage is a powerful tool in an Elixir developer&amp;rsquo;s arsenal. More information can be found in
the &lt;a href="https://elixir-lang.org/blog/2016/07/14/announcing-genstage/">official announcement&lt;/a> where a little bit of history
of how GenStage came to be was discussed and in a talk by &lt;a href="https://youtu.be/XPlXNUXmcgE">José Valim&lt;/a> — creator of
Elixir.&lt;/p>
&lt;p>With a better grasp of the overarching concepts used in Broadway, we can finally discuss what Broadway is all about and
how it does what it does!&lt;/p>
&lt;h1 id="pipeline-architecture">
&lt;a href="#pipeline-architecture" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Pipeline architecture
&lt;/h1>
&lt;p>&lt;img loading="lazy"
src="/post//open-source-deep-dive/broadway/architecture.jpg"
alt="Pipeline architecture"
width=392
height="376" />&lt;/p>
&lt;p>It is at this juncture where it would be important to clarify the term &amp;ldquo;producer&amp;rdquo;. In both message queues and GenStage,
a producer is a creator of messages or events. However, in Broadway, a producer is both a consumer of messages and an
emitter of events.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post//open-source-deep-dive/broadway/terminology.jpg"
alt="Terminology clarification for Broadway producer"
width=701
height="91" />&lt;/p>
&lt;p>For the rest of the article, the following definitions for the following terminology will be used:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>producer&lt;/strong> — producer of events in Broadway&lt;/li>
&lt;li>&lt;strong>message&lt;/strong> — message in a message queue or any other data source&lt;/li>
&lt;li>&lt;strong>event&lt;/strong> — GenStage events&lt;/li>
&lt;/ol>
&lt;p>When messages are consumed by the producer, they will be transformed into events with a fixed structure defined by
Broadway.&lt;/p>
&lt;p>Each component is a separate process and they are dynamically generated as different topologies (architectures) can be
designed. The order of initialisation for a typical pipeline looks something like this:&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post//open-source-deep-dive/broadway/order_of_initialisation.jpg"
alt="Order of initialisation"
width=451
height="411" />&lt;/p>
&lt;p>The producers and processors are both created using interesting conventions that is will be explored now. Other
components will be discussed later on as they tie into other features Broadway has.&lt;/p>
&lt;h2 id="how-its-made-producers">
&lt;a href="#how-its-made-producers" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
How it&amp;rsquo;s made: Producers
&lt;/h2>
&lt;p>Producers are built using a pattern similar to the &lt;a href="https://en.wikipedia.org/wiki/Strategy_pattern">strategy pattern&lt;/a>
but modified to integrate with the concurrency system in Elixir.&lt;/p>
&lt;p>Different data sources require different methods of establishing connections and receiving messages. Thus, we break up
the producer process into two modules — &lt;code>ProducerStage&lt;/code> defines the behavior for enforcing the rate limit while a
dynamically loaded module defines the behavior for establishing a connection to the data source and receiving messages.&lt;/p>
&lt;p>&lt;code>ProducerStage&lt;/code> assumes that the dynamically loaded module contains the typical GenStage callbacks like &lt;code>handle_call&lt;/code>
and &lt;code>handle_demand&lt;/code> and uses them for things like rate limiting.&lt;/p>
&lt;p>The &lt;code>ProducerStage&lt;/code> behaves as the context while the dynamic module behaves as the strategy. The dynamic module adopts
the &lt;code>Producer&lt;/code> module — which defines two callbacks for managing the overall producer life-cycle.&lt;/p>
&lt;p>To load the module dynamically, the module name is passed to &lt;code>ProducerStage&lt;/code> as an argument. To keep the producer as a
single process, we call the &lt;code>init&lt;/code> function of the module directly when initialising the &lt;code>ProducerStage&lt;/code>. This way, the
module will initialise under the newly spawned process for &lt;code>ProducerStage&lt;/code> rather than spawning an entirely new process.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@impl&lt;/span> &lt;span class="no">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:module&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">%{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">module&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">module_state&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">nil&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">transformer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">transformer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">consumers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">rate_limiting&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">rate_limiting_state&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Calling the init function of the dynamically loaded module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When &lt;code>start_link&lt;/code> is called, a new process is spawned first before the &lt;code>init&lt;/code> function is called under the new process.&lt;/p>
&lt;p>This is done as certain message queue providers like &lt;a href="https://github.com/dashbitco/broadway_rabbitmq">RabbitMQ&lt;/a> attach
active listeners to the calling process so spawning a separate process for this would mean having to manage two separate
processes for a producer.&lt;/p>
&lt;h2 id="how-its-made-processors">
&lt;a href="#how-its-made-processors" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
How it&amp;rsquo;s made: Processors
&lt;/h2>
&lt;p>Processors are created using a concept similar
to &lt;a href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)">inheritance&lt;/a> in object-oriented
programming. This idea comes from the need to standardise the subscription logic of producer-consumers and consumers.&lt;/p>
&lt;p>When a processor is started using &lt;code>start_link&lt;/code>, a process of the &lt;code>Subscriber&lt;/code> module is started with the current
processor module passed as a argument.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">start_link&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stage_options&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Broadway.Topology.Subscriber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_link&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__MODULE__&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:producers&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Keyword&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">take&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:processor_config&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:min_demand&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:max_demand&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stage_options&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The current module is initialised in the &lt;code>Subscriber&lt;/code> process through &lt;code>init&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@impl&lt;/span> &lt;span class="no">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">names&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">subscription_options&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">init_options&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Other producer-consumers and consumers like batcher and batch processors also use this pattern to create their
respective GenStage stages.&lt;/p>
&lt;p>A separation of concern is achieved using this pattern. The processor is responsible for event handling while the
subscriber handles the subscription logic.&lt;/p>
&lt;hr>
&lt;p>That&amp;rsquo;s a basic rundown of the concepts underpinning Broadway. While it may not be a complete and intensive explanation
of everything, hopefully it is able to provide some clarity. In the next part, we will be exploring how features in
Broadway have been implemented!&lt;/p>
&lt;p>Hop on over to the second part &lt;a href="open-source-deep-dive-broadway-part-2">here!&lt;/a>&lt;/p>
&lt;hr>
&lt;p>Open-source Deep Dive is a series where I pick apart open-source projects to explain the underlying concepts that power
these projects and share my findings about the project!&lt;/p></description></item><item><title>Open-source Deep Dive: Broadway (Part 2) - Inner workings of Broadway</title><link>/post/odd-broadway-2/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>/post/odd-broadway-2/</guid><description>
&lt;p>This open-source deep dive has been split into two parts! The first part covers the prerequisite knowledge that would be
good to know when trying to understand the inner workings of Broadway. The second part is an in-depth analysis of the
implementation of various features of Broadway.&lt;/p>
&lt;p>This is the second part of the deep dive and the following topics will be covered:&lt;/p>
&lt;ol>
&lt;li>Rate limiting&lt;/li>
&lt;li>Batching messages&lt;/li>
&lt;li>Telemetry&lt;/li>
&lt;li>Creating a built-in testing support for pipelines&lt;/li>
&lt;li>Achieving graceful shutdowns&lt;/li>
&lt;li>Other interesting bits of code&lt;/li>
&lt;/ol>
&lt;p>If you want a refresher on the concepts behind Broadway (like message queues and concurrency in Elixir) or to better
understand Broadway&amp;rsquo;s pipeline architecture from a bird&amp;rsquo;s eye view, you can find the first
part &lt;a href="open-source-deep-dive-broadway-part-1">here!&lt;/a>&lt;/p>
&lt;h1 id="whats-the-scoop">
&lt;a href="#whats-the-scoop" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What&amp;rsquo;s the scoop?
&lt;/h1>
&lt;p>Now that we have explored the overall architecture of a Broadway pipeline, we can look at how certain features in
Broadway are implemented.&lt;/p>
&lt;h2 id="rate-limiting">
&lt;a href="#rate-limiting" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Rate limiting
&lt;/h2>
&lt;blockquote>
&lt;p>Rate limiting refers to the act of limiting the amount of data that can be requested or processed in a given period of
time&lt;/p>
&lt;/blockquote>
&lt;p>Rate limiting is applied across producers within a single pipeline to control the number of events emitted within a
given period of time.&lt;/p>
&lt;p>This is especially useful when the hardware of the machine running the pipeline is not able to keep up with processing
large numbers of events demanded at a time — possibly due to a poorly configured pipeline.&lt;/p>
&lt;p>Some producers do not leverage the rate limiting feature of Broadway. For instance,
the &lt;a href="https://github.com/dashbitco/broadway/blob/master/lib/broadway/topology/producer_stage.ex">RabbitMQ producer&lt;/a>
creates an active listener, which means that event emission is not inhibited by the rate limiter. Instead, events are
emitted the moment messages are published to the message queue (
unless &lt;a href="https://hexdocs.pm/broadway_rabbitmq/BroadwayRabbitMQ.Producer.html#module-back-pressure-and-prefetch_count">otherwise configured&lt;/a>)
.&lt;/p>
&lt;p>But for the producers that &lt;em>do&lt;/em> leverage the rate limiting — such as
the &lt;a href="https://github.com/dashbitco/broadway_sqs/blob/master/lib/broadway_sqs/producer.ex">Amazon SQS producer&lt;/a> — rate
limiting is applied in two instances:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>When consumers make demands to the producer-consumer or producer&lt;/p>
&lt;p>If the producer can still emit events, any demand made by the consumer will be handled by the producer. We take into
account the rate limit threshold. If there are too many events to emit, the excess messages are stored in a message
buffer that will have to be cleared later on.&lt;/p>
&lt;p>Each message that can be emitted will be transformed into the standard event structure that Broadway uses.&lt;/p>
&lt;p>If the producer can no longer emit messages, any demand made is stored in a demand buffer that is cleared later on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When the rate limit is being reset after the given interval&lt;/p>
&lt;p>After the given interval, the rate limit threshold can be reset. However, we may have accumulated demands and
messages in their respective buffers. We may find that the threshold has not been met before we reset it. Thus, we
can use this remaining threshold to clear any lingering demands and messages stored in their respective buffers.&lt;/p>
&lt;p>Once we have cleared as many messages as our remaining threshold allows, we will reset the threshold and schedule for
another reset. These resets are scheduled at fixed intervals.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The rate limiting threshold is maintained as an &lt;a href="https://erlang.org/doc/man/atomics.html">atomic&lt;/a> (discussed later on).
This atomic array is generated by the &lt;code>RateLimiter&lt;/code> process. This module handles all behavior surrounding working with
the rate limit threshold. &lt;code>ProducerStage&lt;/code> handles the actual logic of managing the demands of consumers.&lt;/p>
&lt;p>When the producer cannot emit any more events, i.e. the threshold has been reached, an internal state is set
to &lt;code>:closed&lt;/code> to avoid future demands from being handled.&lt;/p>
&lt;h2 id="batching">
&lt;a href="#batching" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Batching
&lt;/h2>
&lt;p>Batching groups events based on given properties and sends them to designated &amp;ldquo;sub-pipelines&amp;rdquo; or batch processors to be
handled. For instance, we might design a pipeline that stores events with even numbers in an S3 bucket and ones with odd
numbers on Google Drive.&lt;/p>
&lt;p>The &lt;code>Batcher&lt;/code> process is assigned unique names for identification and events that are emitted from the producer must be
tagged to a batcher. Failure to do so will result in a runtime error. This only applies if batching is enabled.&lt;/p>
&lt;p>In order for the producer to send the appropriate events to the respective batcher, a &lt;code>PartitionDispatcher&lt;/code> is used.
Essentially, it defines the behavior of how events are emitted to consumers. A &lt;code>PartitionDispatcher&lt;/code> dispatches events
to certain consumers based on a given criteria (defined as
a &lt;a href="https://en.wikipedia.org/wiki/Hash_function">hash function&lt;/a>). In this case, the criterion is the name of the batcher
from the given event. This means that when we assign a batcher to the event, it &lt;strong>will&lt;/strong> be dispatched to only that
batcher. More information about dispatchers in GenStage can be found in
the &lt;a href="https://hexdocs.pm/gen_stage/GenStage.Dispatcher.html#summary">official documentation&lt;/a>.&lt;/p>
&lt;p>Even within the batcher, further grouping can be made based on a batch key assigned to the event. This may be used to
ensure that certain events are processed together. Internally, the batcher will accumulate events before emitting them.
However, as it cannot sit around accumulating events forever, a batch is emitted at regular intervals regardless of how
many events are stored in it.&lt;/p>
&lt;p>The &lt;code>BatchProcessor&lt;/code> process handles a single batch at a time. It is similar to a regular processor, except it works on
a batch of events. The &lt;code>handle_batch&lt;/code> callback is used here.&lt;/p>
&lt;h2 id="telemetry">
&lt;a href="#telemetry" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Telemetry
&lt;/h2>
&lt;p>Telemetry is used in Broadway to benchmark certain operations that occur such as the duration that a &lt;code>handle_message&lt;/code>
callback takes.&lt;/p>
&lt;p>Broadway relies on the &lt;code>telemetry&lt;/code> &lt;a href="https://hexdocs.pm/telemetry/">library&lt;/a>. Within the code, events are emitted when
these operations occur and key measurements such as duration are tracked. Handlers/listeners of these events can be
setup to respond to these events.&lt;/p>
&lt;p>Telemetry is not an Elixir-only feature. It is commonly used to perform application
monitoring. &lt;a href="https://opentelemetry.io/">OpenTelemetry&lt;/a> is a really interesting framework that offers powerful
application monitoring through telemetry.&lt;/p>
&lt;h2 id="built-in-testing">
&lt;a href="#built-in-testing" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Built-in testing
&lt;/h2>
&lt;p>To test the pipeline, we should focus on ensuring that the data processing aspect of the pipeline works as intended.
However, as we rely on external services for input, it would be hard to coordinate a test suite to work with a live data
source as we may not be able to replicate the data source or publish data to the data source at will due to access
limitations. Thus, Broadway has designed a testing utility that allows us to test the pipeline&amp;rsquo;s data processing
capacity without relying on the data source.&lt;/p>
&lt;p>Broadway provides a placeholder producer module. This producer does not rely on any data sources. Instead, messages are
emitted directly into the pipeline.&lt;/p>
&lt;p>The producer module should be tested separately if there is core behavior that cannot be tested along with the pipeline.&lt;/p>
&lt;p>This form of unit testing ensures that we reduce potential points of failure in our test suite if any of the
aforementioned problems with using the original data source should surface.&lt;/p>
&lt;h2 id="graceful-shutdowns">
&lt;a href="#graceful-shutdowns" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Graceful shutdowns
&lt;/h2>
&lt;p>Broadway boasts about having &lt;a href="https://hexdocs.pm/broadway/architecture.html#graceful-shutdowns">graceful shutdowns&lt;/a>.
This is a rather interesting concept to explore as it relies heavily on the concurrency system of Elixir.&lt;/p>
&lt;p>Essentially, the pipeline can only exist in two states — when all components are online and when all components are
shutting down. There is no point in time where a single component will shutdown on its own without being restarted. This
is because of the way that the supervisor of each component declares restart strategies ensuring that should a child
process encounters any errors, it will be restarted without a hitch. This way, the only time where our components can
shut down is when we shut down our main process or pipeline supervisor process. When either process is terminated, we
want to properly handle all remaining events in the pipeline before shutting off every component.&lt;/p>
&lt;p>This is achieved through a mix of concurrency features. But before we can explain how it works, a simple introduction of
exit signals and process termination is due.&lt;/p>
&lt;h3 id="exit-signals-and-process-termination">
&lt;a href="#exit-signals-and-process-termination" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Exit signals and process termination
&lt;/h3>
&lt;p>Processes can be &lt;a href="https://hexdocs.pm/elixir/Process.html#link/1">linked&lt;/a> to one another. When either process receives an
exit signal — which can occur when the process is terminated forcibly or when it receives an exit signal propagated from
its parent — it will propagate the exit signal to the linked process and that process will terminate as well.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post//open-source-deep-dive/broadway/linking.jpg"
alt="Process linking"
width=441
height="212" />&lt;/p>
&lt;p>However, these exit signals can
be &lt;a href="https://crypt.codemancers.com/posts/2016-01-24-understanding-exit-signals-in-erlang-slash-elixir/">trapped&lt;/a> instead.
When this occurs, rather than terminating the process that receives the propagated exit signal, the exit signal is sent
as a message, allowing the receiving process to handle the exit as though it was just another message.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">handle_info&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="ss">:EXIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">from&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reason&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When a process is terminated, an
optional &lt;code>terminate/2&lt;/code> &lt;a href="https://hexdocs.pm/elixir/GenServer.html#c:terminate/2">callback&lt;/a> can be declared to perform any
cleanup before the process is actually terminated. This is useful if we have any lingering operations that should be
completed before we terminate the process.&lt;/p>
&lt;p>&lt;a href="https://hexdocs.pm/elixir/Supervisor.html">Supervisors&lt;/a> can start a list of child processes and is responsible for
managing the restart strategy of each child. The interaction between a supervisor and &lt;code>terminate&lt;/code> is rather interesting.
When a child is terminated, it is restarted accordingly. When a supervisor terminates, all of its children will also be
terminated. If a child process traps exits, the &lt;code>terminate&lt;/code> callback is called. If not, it will simply terminate
immediately without calling the callback. More information about how supervisor interact with shutdowns can be found in
the official &lt;a href="https://hexdocs.pm/elixir/Supervisor.html#module-start-and-shutdown">documentation&lt;/a>.&lt;/p>
&lt;h3 id="back-to-our-regularly-scheduled-deep-dive">
&lt;a href="#back-to-our-regularly-scheduled-deep-dive" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Back to our regularly scheduled deep dive&amp;hellip;
&lt;/h3>
&lt;p>With a basic understanding of exit trapping and process termination, we can actually understand how graceful shutdowns
in Broadway works.&lt;/p>
&lt;p>When the main process or the pipeline supervisor process is terminated, the main process — which traps exit signals —
will invoke its &lt;code>terminate&lt;/code> callback which will inform the &lt;code>Terminator&lt;/code> process to begin trapping exits and terminate
our pipeline supervisor. As this &lt;code>Terminator&lt;/code> process is a child of the pipeline supervisor, it will invoke its
implementation of &lt;code>terminate&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@impl&lt;/span> &lt;span class="no">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">terminate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reason&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">%{&lt;/span>&lt;span class="ss">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">supervisor_pid&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">supervisor_pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">terminator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">terminator&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Broadway.Topology.Terminator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">trap_exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">terminator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">monitor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">supervisor_pid&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">supervisor_pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reason_to_signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reason&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">receive&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:DOWN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="ss">:persistent_term&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">erase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The exit signal propagates to the other components through their supervisors terminating and they will also invoke
their &lt;code>terminate&lt;/code> callback if they trap exits such as producers disconnecting from the data source.&lt;/p>
&lt;p>The &lt;code>Terminator&lt;/code> process is responsible for ensuring that all events still within the pipeline are processed before
terminating the pipeline entirely.&lt;/p>
&lt;p>It does so in three phases:&lt;/p>
&lt;ol>
&lt;li>Notify that the processors do not resubscribe to producers through a state flag&lt;/li>
&lt;li>Drain the producers of any events remaining by emitting the events through the pipeline&lt;/li>
&lt;li>Wait for the batch processors (which will be the very last component in the pipeline) to terminate before terminating
the supervisor&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@impl&lt;/span> &lt;span class="no">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">terminate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">whereis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:will_terminate&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">producers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">whereis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Broadway.Topology.ProducerStage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">drain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">whereis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">monitor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">receive&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:done&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:DOWN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Interestingly, as the producer may be waiting to drain events, we may not want to cancel all of its consumers
immediately. Thus, we rely on &lt;code>GenStage#async_info&lt;/code> to &lt;a href="https://hexdocs.pm/gen_stage/GenStage.html#async_info/2">queue&lt;/a>
the message to cancel all consumers at the end of the GenStage message queue — effectively waiting for all other events
to be processed before cancelling all consumers. If batching is enabled, the processors will also wait for the batches
to be processed before cancelling all consumers.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@spec&lt;/span> &lt;span class="n">drain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">GenServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">drain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">GenStage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">demand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:accumulate&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">GenStage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cast&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">__MODULE__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:prepare_for_draining&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># The :cancel_consumers message is added to the end of the message queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">GenStage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">async_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">__MODULE__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:cancel_consumers&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>These mechanisms ensure that all events left in the pipeline is properly processed before the pipeline terminates, thus
achieving graceful shutdowns.&lt;/p>
&lt;h1 id="fascinating-discovery">
&lt;a href="#fascinating-discovery" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Fascinating discovery!
&lt;/h1>
&lt;p>These are some interesting bits of code that Broadway has.&lt;/p>
&lt;h2 id="__using__-configurations">
&lt;a href="#__using__-configurations" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
&lt;code>__using__&lt;/code> configurations
&lt;/h2>
&lt;p>Like other libraries in Elixir, &lt;code>use Broadway&lt;/code> is where it all begins. As discussed in the
previous &lt;a href="https://woojiahao.github.io/blog/posts/open-source-deep-dive-hound">open-source deep dive&lt;/a>, the behavior
of &lt;code>use&lt;/code> can be altered by defining the &lt;code>__using__&lt;/code> macro.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defmacro&lt;/span> &lt;span class="n">__using__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">quote&lt;/span> &lt;span class="ss">location&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:keep&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">bind_quoted&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">opts&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">module&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">__CALLER__&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">@behaviour&lt;/span> &lt;span class="nc">Broadway&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">@doc&lt;/span> &lt;span class="no">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">def&lt;/span> &lt;span class="n">child_spec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">default&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">%{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">unquote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">start&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">__MODULE__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:start_link&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">]},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">shutdown&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:infinity&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Supervisor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">child_spec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">unquote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Macro&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">escape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">defoverridable&lt;/span> &lt;span class="ss">child_spec&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There are three interesting bits of code in the &lt;code>__using__&lt;/code> macro:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>location: keep&lt;/code>&lt;/p>
&lt;p>Used to report runtime errors from inside the quote. Without this, errors are reported where the defined function (
in &lt;code>quote&lt;/code>) is invoked. This is to ensure that we are aware of where the errors are occurring. More information about
this configuration can be
found &lt;a href="https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2-stacktrace-information">here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>bind_quoted&lt;/code>&lt;/p>
&lt;p>Used to create bindings within the quote. When a binding is created, the value is
automatically &lt;a href="https://elixir-lang.org/getting-started/meta/quote-and-unquote.html#unquoting">unquoted&lt;/a> (which
includes evaluation) and the value cannot be unquoted again. This is especially used when we do not want to
re-evaluate the value multiple times.&lt;/p>
&lt;p>More information quoting and unquoting in Elixir can be found in
the &lt;a href="https://elixir-lang.org/getting-started/meta/quote-and-unquote.html">official tutorial&lt;/a> and a simplified
explanation and example of binding can be
found &lt;a href="https://elixirschool.com/en/lessons/advanced/metaprogramming/#binding">here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@behaviour&lt;/code>&lt;/p>
&lt;p>Used to define interface-like behavior where modules that adopt these behaviors can implement callbacks defined. In
this case, when a module &lt;code>use Broadway&lt;/code>, it will have to implement certain callbacks like &lt;code>handle_message&lt;/code> while
other callbacks like &lt;code>handle_batch&lt;/code> remain optional.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="na">@callback&lt;/span> &lt;span class="n">prepare_messages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">messages&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()],&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">term&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">@callback&lt;/span> &lt;span class="n">handle_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processor&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">atom&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">term&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">::&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">@callback&lt;/span> &lt;span class="n">handle_batch&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">batcher&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">atom&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">messages&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">batch_info&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="nc">BatchInfo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">context&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">term&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">@callback&lt;/span> &lt;span class="n">handle_failed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">messages&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()],&lt;/span> &lt;span class="n">context&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">term&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nc">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">()]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">@optional_callbacks&lt;/span> &lt;span class="ss">prepare_messages&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">handle_batch&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">handle_failed&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More information about typespecs can be found in
the &lt;a href="https://elixir-lang.org/getting-started/typespecs-and-behaviours.html#adopting-behaviours">official documentation&lt;/a>
.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="module-metadata-processing">
&lt;a href="#module-metadata-processing" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Module metadata processing
&lt;/h2>
&lt;p>While on the topic of meta-programming, module metadata can also be processed.&lt;/p>
&lt;p>&lt;code>ensure_loaded?&lt;/code> ensures that a given module is loaded. In Broadway, this is used to ensure that the &lt;code>:persistent_term&lt;/code>
module from Erlang is available for Elixir — the only time it will not be available is when the version of Elixir is too
old. Documentation &lt;a href="https://hexdocs.pm/elixir/Code.html#ensure_loaded?/1">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="k">unless&lt;/span> &lt;span class="nc">Code&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ensure_loaded?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:persistent_term&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">require&lt;/span> &lt;span class="nc">Logger&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Broadway requires Erlang/OTP 21.3+&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="s2">&amp;#34;Broadway requires Erlang/OTP 21.3+&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>function_exported?&lt;/code> returns whether a module contains a definition for a &lt;strong>public&lt;/strong> function with a given arity. Used
to execute functions from modules if they are defined.
Documentation &lt;a href="https://hexdocs.pm/elixir/Kernel.html#function_exported?/3">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nc">Code&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ensure_loaded?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer_mod&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">function_exported?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer_mod&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:prepare_for_start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">producer_mod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prepare_for_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">opts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">child_specs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">opts&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="ow">when&lt;/span> &lt;span class="n">is_list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">child_specs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">child_specs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nc">NimbleOptions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">validate!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nc">Broadway.Options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">definition&lt;/span>&lt;span class="p">())}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">other&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="dynamic-process-naming">
&lt;a href="#dynamic-process-naming" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Dynamic process naming
&lt;/h2>
&lt;p>As the pipeline can comprise of any number of components, Broadway supports dynamically generated processes. These
dynamically generated processes are assigned names that follow a fixed convention — comprising of the name of the
pipeline, the process type, and the index of the component among the other components of the same type.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">process_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:&amp;#34;&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">name_prefix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="ss">.&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="ss">_&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="ss">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">process_names&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:concurrency&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The names are returned as quoted atoms where the atom has a space in it so it has to be declared via &lt;code>:&amp;quot;&amp;quot;&lt;/code> .&lt;/p>
&lt;h2 id="storage-options-in-elixir">
&lt;a href="#storage-options-in-elixir" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Storage options in Elixir
&lt;/h2>
&lt;p>Besides the basic data structures like lists and dictionaries, Elixir and Erlang offer other ways of storing data within
processes.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://erlang.org/doc/man/atomics.html">Atomics&lt;/a>&lt;/p>
&lt;p>&lt;code>:atomics&lt;/code> are a way of performing atomic operations on a set of mutable atomic variables.&lt;/p>
&lt;p>Used to maintain the rate limiting threshold.&lt;/p>
&lt;p>Previously, the rate limiter used &lt;a href="https://erlang.org/doc/man/ets.html">ETS&lt;/a> instead but atomic operations are much
better for concurrent systems as they avoid race conditions when multiple producer processes are attempting to modify
the rate limit.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="ss">:atomics&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="na">@atomics_index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ss">:atomics&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">counter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="na">@atomics_index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">allowed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://erlang.org/doc/man/persistent_term.html">Persistent term&lt;/a>&lt;/p>
&lt;p>Storage for Erlang terms that is optimised for reading terms at the expense of writing and updating terms.&lt;/p>
&lt;p>Used to store pipeline metadata like producer names etc.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="ss">:persistent_term&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">%{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">context&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">producer_names&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">process_names&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Producer&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">producer_config&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">batchers_names&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Enum&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batchers_config&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Batcher&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">elem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ni">&amp;amp;1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">rate_limiter_name&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">producer_config&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:rate_limiting&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nc">RateLimiter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rate_limiter_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:name&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://erlang.org/doc/man/queue.html">Queue&lt;/a>&lt;/p>
&lt;p>Manage first-in, first-out queues.&lt;/p>
&lt;p>Used to manage message and demand buffers in the producer.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># A queue of &amp;#34;batches&amp;#34; of messages that we buffered.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ss">message_buffer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># A queue of demands (integers) that we buffered.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ss">demand_buffer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hexdocs.pm/elixir/Process.html">Process dictionaries&lt;/a>&lt;/p>
&lt;p>Store state within a process directly although its usage is
generally &lt;a href="https://elixirforum.com/t/is-it-a-good-idea-to-store-context-in-process-dictionary-registry-for-http-requests/3142">frowned upon&lt;/a>
.&lt;/p>
&lt;p>Used to store batches in the batcher.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">init_or_get_batch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">batch_key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">batch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">batch_key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">batch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">put_batch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">batch_key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">batch&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">batch_key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">batch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>A better alternative might have been to use an &lt;a href="https://hexdocs.pm/elixir/Agent.html">Agent&lt;/a> or ETS instead.&lt;/p>
&lt;p>&lt;strong>Edit!&lt;/strong> I clarified with the team about their decision to use process dictionaries over ETS, this was their
response:&lt;/p>
&lt;blockquote>
&lt;p>The correct solution here would be to simply use a map. But because this is very intensive code, we need a mutable
option, and the process dictionary is the most efficient one. ETS would be slow as data has to be copied in and out
of ETS.
This is one of the very cases where using the pdict for performance is justified. :)&lt;/p>
&lt;/blockquote>
&lt;p>So, the reason why they decided to use a process dictionary over ETS is due to the performance requirement of
batching! Very interesting!&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="options-validation">
&lt;a href="#options-validation" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Options validation
&lt;/h2>
&lt;p>Dashbit — the team behind Broadway — developed an options validation library
called &lt;a href="https://github.com/dashbitco/nimble_options">NimbleOptions&lt;/a> that aims to be a small library for validating and
documenting high-level options.&lt;/p>
&lt;p>A set of definitions for the available options are created first and these can be used to validate a keyword list — aka
the options.&lt;/p>
&lt;p>If the options are invalid, an error is returned, otherwise an &lt;code>:ok&lt;/code> status along with the options are returned. The
returned options have default values filled in.&lt;/p>
&lt;h2 id="default-values-in-dictionaries">
&lt;a href="#default-values-in-dictionaries" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Default values in dictionaries
&lt;/h2>
&lt;p>Broadway has an interesting way of fanning out default values for the options keyword list. In the options keyword list,
a &amp;ldquo;parent&amp;rdquo; value for &lt;code>:partition_by&lt;/code>, &lt;code>:hibernate_after&lt;/code>, and &lt;code>:spawn_opt&lt;/code> is provided.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="n">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">partition_by&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">...&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1"># these are parent values&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">hibernate_after&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">...&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">producer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">hibernate_after&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">...&lt;/span> &lt;span class="c1"># this is a child value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The parent value will be used for producers, processors, and batchers if no explicit child value is provided.
Alternatively, we might want to fan out a parent value to only two of the three unset child values while maintaining the
original child value of the third.&lt;/p>
&lt;p>This is done by &lt;a href="https://hexdocs.pm/elixir/Keyword.html#merge/2">merging&lt;/a> the child options into the parent options.
Thus, if the child does not define a value for the option, the parent value is inherited.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="n">opts&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">opts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">carry_over_one&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:producer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:hibernate_after&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:spawn_opt&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">carry_over_many&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:processors&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:partition_by&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:hibernate_after&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:spawn_opt&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">carry_over_many&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:batchers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:partition_by&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:hibernate_after&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:spawn_opt&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">carry_over_one&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">update_in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="k">fn&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nc">Keyword&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Keyword&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">take&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defp&lt;/span> &lt;span class="n">carry_over_many&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">update_in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="k">fn&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">defaults&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Keyword&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">take&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nc">Keyword&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">defaults&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="closing-the-curtains">
&lt;a href="#closing-the-curtains" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Closing the curtains
&lt;/h1>
&lt;p>To conclude, Broadway is a powerful library for building data processing pipelines. These pipelines are built on top of
the robust concurrency system that Elixir boasts.&lt;/p>
&lt;p>Broadway is a very versatile library and the documentation contains detailed guides about using it with various data
sources. Check out the &lt;a href="https://github.com/dashbitco/broadway">Github repository&lt;/a>
and &lt;a href="https://hexdocs.pm/broadway/Broadway.html#content">documentation!&lt;/a>&lt;/p>
&lt;hr>
&lt;p>If you want to get a basic understanding of the underlying concepts of Broadway or better visualise the architecture of
a pipeline in Broadway, check out the first part &lt;a href="open-source-deep-dive-broadway-part-1">here!&lt;/a>&lt;/p>
&lt;hr>
&lt;p>Open-source Deep Dive is a series where I pick apart open-source projects to explain the underlying concepts that power
these projects and share my findings about the project!&lt;/p></description></item><item><title>Open-source Deep Dive: Hound</title><link>/post/odd-hound/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>/post/odd-hound/</guid><description>
&lt;h2 id="what-is-hound">
&lt;a href="#what-is-hound" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What is Hound?
&lt;/h2>
&lt;blockquote>
&lt;p>For browser automation and writing integration tests in Elixir&lt;/p>
&lt;/blockquote>
&lt;p>Let&amp;rsquo;s inspect this definition a little closer&amp;hellip;&lt;/p>
&lt;h3 id="what-is-browser-automation">
&lt;a href="#what-is-browser-automation" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What is browser automation?
&lt;/h3>
&lt;p>Browser automation is effectively the process of using a &lt;strong>proxy&lt;/strong> (like Selenium or Hound) to perform browser actions
on behalf of the user (like the test case). Essentially, we are &lt;strong>automating the usage of the browser.&lt;/strong>&lt;/p>
&lt;p>It is often associated with illegal applications like sneaker-botting but much
like &lt;a href="https://www.makeuseof.com/tag/8-legal-uses-for-bittorrent-youd-be-surprised/">torrenting&lt;/a>, there are positive
applications and we will be exploring one of them in this post - integration testing.&lt;/p>
&lt;h3 id="what-is-integration-testing">
&lt;a href="#what-is-integration-testing" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What is integration testing?
&lt;/h3>
&lt;p>When building software, we first build individual components to support given functional requirements. These individual
components can be tested using unit tests - which ensure that given a set of inputs, the component returns a **
predictable** set of outputs (predictable means that the functions tested are pure).&lt;/p>
&lt;p>However, while components may work well on their own, when combined with other components (to form larger
components/whole systems), unexpected behavior may be exhibited. For instance, the input from component A is transformed
before it is used as input to component B, thus, the combined components returns an unexpected result.&lt;/p>
&lt;p>Hence, integration tests serve to &lt;strong>bridge the gap between individual components testing and full system testing.&lt;/strong>&lt;/p>
&lt;p>When combined with browser automation, we can ensure that a website works end-to-end. We can ensure that the data
validation on the front-end works as intended and that the forms submitted by users are properly sent to the back-end
and saved in the database.&lt;/p>
&lt;h3 id="approaching-browser-automation-integration-testing">
&lt;a href="#approaching-browser-automation-integration-testing" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Approaching browser automation integration testing&amp;hellip;
&lt;/h3>
&lt;p>We can take two approaches to browser automation integration testing. We could either&lt;/p>
&lt;ol>
&lt;li>build our own interfacing system to communicate with the browser, or&lt;/li>
&lt;li>rely on existing interfacing systems&lt;/li>
&lt;/ol>
&lt;p>The former is time-consuming and requires a lot of care during development as we have to account for varying browser
APIs and quirks. Thus, it is wiser to chose the latter when approaching browser automation integration testing. Doing so
minimizes the number of components we have to manage.&lt;/p>
&lt;h3 id="introducing-hound">
&lt;a href="#introducing-hound" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Introducing Hound!
&lt;/h3>
&lt;p>This is where Hound comes into the picture. Hound provides a clean API to build browser automation tests. It relies
on &lt;a href="http://selenium.dev">Selenium&lt;/a>, &lt;a href="https://phantomjs.org/">PhantomJS&lt;/a>,
and &lt;a href="https://chromedriver.chromium.org/">ChromeDriver&lt;/a> as the interfacing systems to perform the &amp;ldquo;dirty&amp;rdquo; work of
coordinating requests/responses to/from the browser.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post//open-source-deep-dive/hound/general-architecture.png"
alt="Hound&amp;amp;rsquo;s architecturel"
width=232
height="220" />&lt;/p>
&lt;p>This introduces a larger question, what exactly is Selenium, PhantomJS, and ChromeDriver? More importantly, in fact,&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;How is browser automation performed?&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Understanding how browser automation is performed provides us with a better foundation to grasp how these technologies
work and how Hound works under the hood.&lt;/p>
&lt;h2 id="the-world-of-web-drivers">
&lt;a href="#the-world-of-web-drivers" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
The world of web drivers&amp;hellip;
&lt;/h2>
&lt;p>The key driving (pun intended) of browser automation is web drivers. But before we can understand what they are, we
should establish some basic understanding of what a driver is in general computing terms.&lt;/p>
&lt;h3 id="what-are-drivers">
&lt;a href="#what-are-drivers" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What are drivers?
&lt;/h3>
&lt;p>Drivers are pieces of software that behave as a proxy between &lt;strong>a caller&lt;/strong> and &lt;strong>a target.&lt;/strong> Callers can be something
like the print prompt in Google Chrome or a computer peripheral. Targets can be something like the printer or computer.&lt;/p>
&lt;p>In general, drivers are responsible for translating the caller&amp;rsquo;s request into a given format that the target can
understand.&lt;/p>
&lt;p>There may be variations of a caller to the same target so each driver must be able to translate their respective
caller&amp;rsquo;s request into a common request format for the target. For instance, there are multiple types of keyboards that
can be connected to a single computer but the computer can only understand a single request format. So the respective
keyboard drivers are responsible for converting the unique keyboard&amp;rsquo;s requests into the format that the computer
accepts.&lt;/p>
&lt;h3 id="back-to-web-drivers">
&lt;a href="#back-to-web-drivers" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Back to web drivers
&lt;/h3>
&lt;p>Similar to general drivers, web drivers behave as proxies for the caller (Hound) to communicate with the target (
browser). It allows the &lt;strong>caller to send instructions for the browser to perform.&lt;/strong> In the web development world, a
browser is also referred to as a &lt;strong>user agent.&lt;/strong>&lt;/p>
&lt;p>The Selenium project proposed a W3C specification to guide the development of web drivers. For the rest of this
discussion, we will be relying on this specification. The specification can be
found &lt;a href="https://w3c.github.io/webdriver">here.&lt;/a>&lt;/p>
&lt;p>According to the specification, there must exist a separation of concern when designing a web driver. More specifically,
there are two components to a web driver:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Local end&lt;/strong> - API for developers to send requests to the browser (libraries like Selenium and Hound)&lt;/li>
&lt;li>&lt;strong>Remote end&lt;/strong> - responsible for communicating with the browser, i.e. a browser driver (can you infer what this
means?)&lt;/li>
&lt;/ol>
&lt;p>In essence, a web driver is comprised of an API and a browser driver. Ideally, the API should be able to work with
different browser drivers for different browsers.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post//open-source-deep-dive/hound/web-driver-general-architecture.jpg"
alt="Web driver architecture"
width=522
height="201" />&lt;/p>
&lt;blockquote>
&lt;p>The remote end must also provide an &lt;strong>HTTP compliant wire protocol&lt;/strong> where each endpoint maps to a command for the
browser.&lt;/p>
&lt;/blockquote>
&lt;p>This means that the remote end &lt;strong>relies on HTTP to communicate requests with the browser.&lt;/strong> The remote end is a HTTP
server that the local end writes HTTP requests to. The remote end translates each HTTP request (based on endpoint and
method) to a command for the browser. Note that a wire protocol is a method of getting data from one point to another.
It dictates that requests should follow a given format.&lt;/p>
&lt;p>The specification also provides an outline for the endpoints that the remote end must make available for the local end.
This ensures standardization and ease of adoption for future browser drivers.&lt;/p>
&lt;p>One advantage to using a HTTP server for the remote end is that it is possible to host the remote end on a remote
machine. This means that we can delegate the job of integration testing to another machine, a process commonly known
as &lt;strong>distributed testing.&lt;/strong> By enabling distributed testing, the local machine is not burdened with the responsibility
of testing potentially extensive and rigorous integration tests which the machine may not support.&lt;/p>
&lt;h2 id="so-how-does-selenium-work">
&lt;a href="#so-how-does-selenium-work" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
So, how does Selenium work?
&lt;/h2>
&lt;p>Selenium implements the web driver specification (they did author it). The remote end uses
the &lt;a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol">JSON Wire Protocol&lt;/a> as the HTTP compliant wire
protocol to communicate with the browser driver. Note that the documentation provided by Selenium (for the JSON Wire
Protocol) has been obsoleted in favor of the one defined in the specification.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post//open-source-deep-dive/hound/selenium-general-architecture.jpg"
alt="Selenium architecturel"
width=201
height="361" />&lt;/p>
&lt;h3 id="how-does-selenium-differ-from-phantomjs">
&lt;a href="#how-does-selenium-differ-from-phantomjs" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
How does Selenium differ from PhantomJS?
&lt;/h3>
&lt;p>PhantomJS is a &lt;strong>headless browser&lt;/strong> library. Headless browsers are essentially web browsers without the graphical
interfaces. Selenium, on the other hand, is a web driver. The key difference between the two is the way requests are
routed and managed (PhantomJS is a rather interesting project so Open-source Deep Dive: PhantomJS edition maybe?).&lt;/p>
&lt;p>However, Selenium supports headless browsers as well and more importantly, Selenium is still in active development while
PhantomJS has been archived due to a lack of active contributions.&lt;/p>
&lt;h3 id="what-is-chromedriver-then">
&lt;a href="#what-is-chromedriver-then" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What is ChromeDriver then?
&lt;/h3>
&lt;p>ChromeDriver is a browser driver developed as part of the Chromium project. It is used by Selenium as one of the
supported browser drivers. However, Hound supports raw requests to ChromeDriver as the underlying HTTP server works the
same with or without the use of Selenium. It is an interesting project so I may explore it in another installment of
Open-source Deep Dive!&lt;/p>
&lt;h2 id="hound-under-the-hood">
&lt;a href="#hound-under-the-hood" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Hound: Under the hood
&lt;/h2>
&lt;h3 id="leveraging-browser-drivers">
&lt;a href="#leveraging-browser-drivers" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Leveraging browser drivers
&lt;/h3>
&lt;p>With a better understanding of how browser automation and web drivers work, we can in fact see that Hound doesn&amp;rsquo;t rely
on the entirety of Selenium (including the local end APIs). Instead, it relies on the remote end of the Selenium web
driver (along with PhantomJS and ChromeDriver) to minimize the number of &amp;ldquo;moving components&amp;rdquo; that need to be managed
while reaping the benefits of the existing technologies. Thus, it can focus on delivering a seamless API for developing
browser automation integration tests.&lt;/p>
&lt;h3 id="exploring-a-basic-use-case">
&lt;a href="#exploring-a-basic-use-case" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Exploring a basic use case
&lt;/h3>
&lt;p>We will inspect a basic use case of Hound before diving into how Hound works.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defmodule&lt;/span> &lt;span class="nc">HoundTest&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">use&lt;/span> &lt;span class="nc">ExUnit.Case&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">use&lt;/span> &lt;span class="nc">Hound.Helpers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hound_session&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test&lt;/span> &lt;span class="s2">&amp;#34;the truth&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">meta&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">navigate_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://google.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find_element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;search&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fill_field&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">element&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Apples&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">submit_element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">element&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assert&lt;/span> &lt;span class="n">page_title&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;Apples&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There is quite a bit to unpack here. Let&amp;rsquo;s first understand the core of how a test suite with Hound is setup.&lt;/p>
&lt;p>First, we &lt;code>use ExUnit.Case&lt;/code> as Hound works hand in hand with &lt;code>ExUnit&lt;/code>, a built-in Elixir library for developing unit
tests. It relies on two components of &lt;code>ExUnit&lt;/code>: &lt;code>setup&lt;/code> and &lt;code>on_exit&lt;/code>. This allows Hound to work as expected.&lt;/p>
&lt;p>Then, we &lt;code>use Hound.Helpers&lt;/code> which, with the power of macros, imports all helper functions that are required to access
the browser session.&lt;/p>
&lt;p>Finally, we call &lt;code>hound_session()&lt;/code> which creates a new session (an instance of the browser) and initializes the setup
and tear down functionality of a Hound browser automation test.&lt;/p>
&lt;p>Once the core of the browser automation test is built, we can write test cases as per normal, leveraging on functions
like &lt;code>navigate_to()&lt;/code> and &lt;code>fill_field()&lt;/code> to perform browser actions. The intended behavior of these functions are easy to
understand and the documentation for them can be found &lt;a href="https://hexdocs.pm/hound/readme.html#helpers">here.&lt;/a>&lt;/p>
&lt;h3 id="breaking-it-down">
&lt;a href="#breaking-it-down" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Breaking it down
&lt;/h3>
&lt;p>With a basic understanding of how a test suite can be setup in Hound, we can start to decompose Hound to better
understand what makes it tick.&lt;/p>
&lt;p>First, we need to inspect the following file: &lt;code>lib/hound/helpers.ex&lt;/code> which houses the &lt;code>Hound.Helpers&lt;/code> module, the same
one that we &lt;code>use&lt;/code> in the example above.&lt;/p>
&lt;p>By overriding the &lt;code>__using__&lt;/code> macro, Hound is able to import all of the helper functions into a given file with a
single &lt;code>use&lt;/code> statement. This helps to minimize the boilerplate for users to get started. Macros are meta programming
constructs that inject code during compile-time. More on
macros &lt;a href="https://elixir-lang.org/getting-started/meta/macros.html">here.&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defmacro&lt;/span> &lt;span class="n">__using__&lt;/span>&lt;span class="p">([])&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">quote&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Cookie&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Dialog&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Element&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Navigation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Orientation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Page&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Screenshot&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.SavePage&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.ScriptExecution&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Session&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Window&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Log&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Helpers.Mouse&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Hound.Matchers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="k">unquote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">__MODULE__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Hound.Helpers&lt;/code> also defines the &lt;code>hound_session()&lt;/code> function which relies on &lt;code>setup&lt;/code> and &lt;code>on_exit()&lt;/code> of &lt;code>ExUnit&lt;/code> to setup
and tear down a session between every test case.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defmacro&lt;/span> &lt;span class="n">hound_session&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span> &lt;span class="p">\\&lt;/span> &lt;span class="p">[])&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">quote&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">setup&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Hound&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_session&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">unquote&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opts&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">self&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">on_exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nc">Hound&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">end_session&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Each helper function constructs a HTTP request to the browser driver server using &lt;code>Hackney&lt;/code> . For
instance, &lt;code>navigate_to&lt;/code> - which opens a given URL in the session - creates the following HTTP request:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">navigate_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">retries&lt;/span> &lt;span class="p">\\&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">final_url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">generate_final_url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">session_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Hound&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_session_id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">make_req&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:post&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;session/&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">session_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/url&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">%{&lt;/span>&lt;span class="ss">url&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">final_url&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">%{},&lt;/span> &lt;span class="n">retries&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hound rolls its own HTTP request/response management system that supports multiple retries. This can be found in
the &lt;code>lib/hound/request_utils.ex&lt;/code> file.&lt;/p>
&lt;p>We have managed to break down the core functionality of Hound. There are additional interesting components to Hound that
I would like to explore as well.&lt;/p>
&lt;h3 id="processes">
&lt;a href="#processes" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Processes
&lt;/h3>
&lt;p>Applications are started according to standard OTP
specification (&lt;a href="https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html">here&lt;/a>). &lt;code>lib/hound.ex&lt;/code>
starts a link to &lt;code>Hound.Supervisor&lt;/code> which initializes two workers: &lt;code>Hound.ConnectionServer&lt;/code> and &lt;code>Hound.SessionServer&lt;/code>.
These are child processes (Hound isn&amp;rsquo;t fully up-to-date with Application convention) that the supervisor manages.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Hound.ConnectionServer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Hound.SessionServer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">supervise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">strategy&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="ss">:one_for_one&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Let&amp;rsquo;s explore what the connection server and session server are all about next.&lt;/p>
&lt;p>More information on processes in Elixir &lt;a href="https://elixir-lang.org/getting-started/processes.html">here.&lt;/a>&lt;/p>
&lt;h3 id="connection-server">
&lt;a href="#connection-server" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Connection server
&lt;/h3>
&lt;p>This process is responsible for managing the details of the browser driver and providing information to construct the
HTTP server endpoints. It stores the driver information using &lt;code>Agent&lt;/code> to allow the information to be accessed across
processes.&lt;/p>
&lt;p>More information on &lt;code>Agent&lt;/code> &lt;a href="https://hexdocs.pm/elixir/Agent.html">here.&lt;/a>&lt;/p>
&lt;h3 id="session-management">
&lt;a href="#session-management" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Session management
&lt;/h3>
&lt;p>Sessions, as mentioned earlier, refer to instances of the browser that we want to run our tests on. As Hound supports
multiple sessions across different processes, it has rolled a session management system.&lt;/p>
&lt;p>Session management in Hound relies on &lt;code>ETS&lt;/code>, a built-in storage option provided by Erlang and available in Elixir. When
the session server first starts, it creates a new &lt;code>ETS&lt;/code> table to hold the session information. This server is setup as
a &lt;code>GenServer&lt;/code> which allows it to support asynchronous and synchronous callbacks from other processes.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:ets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="na">@name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:set&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:named_table&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:protected&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">read_concurrency&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">true&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:ok&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When a session is first created by &lt;code>hound_session()&lt;/code>, the current process&amp;rsquo;s ID (by default, it&amp;rsquo;s the main process) is
related to the session. The process is monitored and the new session is created. Under the process ID, multiple sessions
can be created, thus allowing Hound to support multi-session testing. Each session is identified by an ID. Each session
is also assigned a name. By default, we use the session name of &lt;code>:default&lt;/code>. The &lt;code>ETS&lt;/code> table holds the following
information (mapped to JSON for illustration purposes. In reality, &lt;code>ETS&lt;/code> tables store tuples of data so the actual data
stored does not include any keys, just the values in the given order):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Process ID
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;pid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">...&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Process monitoring ref
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;ref&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">...&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;session_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">...&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Map containing all sessions running
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;session&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;&amp;lt;session_name&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;session_id&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As you can see, a session name can be assigned to the same session ID, but not the other way around (I am not too sure
why this is setup as such, more investigation would be required).&lt;/p>
&lt;p>With the &lt;code>ETS&lt;/code> table setup to manage session information, we can avoid a major problem: passing around the session ID to
various functions. If we had done so, we would have increased the overhead required when using the session ID as
functions would have to be designed to accept the session ID and we would have to devise a method of passing the session
ID around.&lt;/p>
&lt;p>Instead, the session ID is retrieved from the server on demand using the &lt;code>current_session_id()&lt;/code> function
in &lt;code>lib/hound.ex&lt;/code>.&lt;/p>
&lt;p>As the current session ID is related to the calling process ID, multiple processes can have different sessions, thus,
providing multi-session testing support. This also means that if the calling process changes, the associated session
will be retrieved or a new session will be created dynamically.&lt;/p>
&lt;p>If a process dies - i.e. &lt;code>Process.monitor()&lt;/code> sends a &lt;code>DOWN&lt;/code> message - the session server will destroy all associated
sessions with that process asynchronously.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">handle_info&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="ss">:DOWN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">destroy_sessions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:noreply&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="configurations">
&lt;a href="#configurations" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Configurations
&lt;/h3>
&lt;p>Configurations are managed using Elixir&amp;rsquo;s &lt;code>Config&lt;/code> API which uses keyword parameter lists to manage configurations.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nc">Config&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">config&lt;/span> &lt;span class="ss">:hound&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">browser&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;firefox&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The configurations are stored as application environment variables which are retrieved by the connection server.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="n">driver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:driver&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nc">Application&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_env&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:hound&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:driver&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;selenium&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More information on the &lt;code>Config&lt;/code> API &lt;a href="https://hexdocs.pm/elixir/master/Config.html">here.&lt;/a>&lt;/p>
&lt;h3 id="coding-conventions">
&lt;a href="#coding-conventions" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Coding conventions
&lt;/h3>
&lt;p>Other rather interesting bits of Elixir convention that Hound employs are:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>^&lt;/code> (pin) operator&lt;/p>
&lt;p>The pin operator ensures that a variable, when matched during assignment, is the same as the existing variable of the
given name&lt;/p>
&lt;p>In Hound, this is used to ensure that the retrieved process ID of session (from the session server) is the same as
the given process ID (from argument).&lt;/p>
&lt;p>If the retrieved &lt;code>pid&lt;/code> does not match the &lt;code>pid&lt;/code> argument, an error is raised.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">all_sessions_for_pid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="ss">:ets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lookup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="na">@name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[{&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_session_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">all_sessions&lt;/span>&lt;span class="p">}]&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">all_sessions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">%{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More information on the pin
operator &lt;a href="https://medium.com/@Julien_Corb/understand-the-pin-operator-in-elixir-a6f534d865a6">here.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>defdelegate&lt;/code>&lt;/p>
&lt;p>&lt;code>defdelegate&lt;/code> dictates that a function&amp;rsquo;s underlying behavior is deferred to that of another function in another
module.&lt;/p>
&lt;p>This allows a module to house the functionality of different modules without breaking the modularity afforded by the
module system.&lt;/p>
&lt;p>Interestingly, the &lt;code>__using__&lt;/code> override in &lt;code>Hound.Helpers&lt;/code> can be replaced with a multitude of &lt;code>defdelegate&lt;/code> to the
helper functions but it would, understandably, create a lot of confusion.&lt;/p>
&lt;p>More information on &lt;code>defdelegate&lt;/code> &lt;a href="https://hexdocs.pm/elixir/Kernel.html#defdelegate/2">here.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>=&lt;/code> (match operator) in function parameters&lt;/p>
&lt;p>As &lt;code>=&lt;/code> is the match operator in Elixir, it can be used to perform pattern matching while assigning the matched
pattern to a variable name.&lt;/p>
&lt;p>This is very useful when working with structures as you may not want to deconstruct the entire structure while
ensuring that arguments follow the given structure.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">(%&lt;/span>&lt;span class="nc">User&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">IO&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">puts&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:name&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More information on the match operator &lt;a href="https://elixir-lang.org/getting-started/pattern-matching.html">here.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pattern matching as enums&lt;/p>
&lt;p>Pattern matching with atoms can be used as substitutes for typical enum behavior.&lt;/p>
&lt;p>An enum in Kotlin may look like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">MatchClause&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CLASS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;class&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CSS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;css selector&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NAME&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ELEM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In Elixir, it can be written as such:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:class&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;class&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:css&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;css selector&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:name&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:id&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:elem&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;element&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="conclusion">
&lt;a href="#conclusion" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Conclusion
&lt;/h2>
&lt;p>To conclude, Hound is a browser automation and integration testing library built on top of web driver - more
specifically, browser driver - technologies as it leverages Selenium, PhantomJS, and ChromeDriver to build a highly
abstracted and simple to use API for building integration tests.&lt;/p>
&lt;p>Under the hood, Hound is an intriguing project that uses fundamental constructs to build powerful internal libraries
that support complex operations.&lt;/p>
&lt;p>If you are interested in the topics discussed in this post, here are some additional readings:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://www.tutorialspoint.com/what-is-web-driver-in-selenium">What is a web driver in Selenium?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://w3c.github.io/webdriver/">W3C WebDriver Specification&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/HashNuke/hound">Hound GitHub repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/benoitc/hackney">Hackney GitHub repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://support.smartbear.com/testcomplete/docs/testing-with/advanced/distributed/basic-concepts.html">Distributed testing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://scotch.io/tutorials/what-is-phantomjs-and-how-is-it-used">What is PhantomJS?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://source.chromium.org/chromium/chromium/src/+/master:chrome/test/chromedriver/">ChromeDriver repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.testim.io/blog/browser-test-automation/">Uses of browser automation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bittorrent.org/beps/bep_0003.html">BitTorrent protocol&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hexdocs.pm/ex_unit/ExUnit.html">ExUnit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html">Application conventions in Elixir&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hexdocs.pm/elixir/Process.html#monitor/1">Process monitoring&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://erlang.org/doc/man/ets.html">ETS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hexdocs.pm/elixir/GenServer.html">GenServer&lt;/a>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>NOTE:&lt;/strong> I do not condone the use of browser automation or torrenting for illegal purposes. Any links or discussions
about the mentioned subjects are purely for educational purposes and should remain as that.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>Open-source Deep Dive is a series where I pick apart open-source projects to explain the underlying concepts that power
these projects and share my findings about the project!&lt;/p></description></item><item><title>The truth behind software projects</title><link>/post/software-projects-truth/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>/post/software-projects-truth/</guid><description>
&lt;p>It&amp;rsquo;s 3am. You are one commit away from launching your first release of your latest idea. It&amp;rsquo;s an AI system to help
people recommend names for their pets through pictures (clearly, Spot isn&amp;rsquo;t a great name). You take a swig of coffee.
You fix the bug that has been sitting on the top of your Trello board for days now. &lt;code>git add . &amp;amp;&amp;amp; git commit -am &amp;quot;Fix issue where AI takes over the world&amp;quot;&lt;/code> and you are off. Time to tag this release. This AI will be a hit and pet owners
all around the globe can rejoice knowing that the arduous task of naming their pets will finally be over (now only if
you had an AI to recommend you variable names). You push the tag and head off to bed. Weeks go by and you continue
working on your revolutionary project. You add a feature that allows you to name pet rocks too. School starts. You get
swept up with a sea of assignments and presentations. Soon, your baby starts to collect dust as you scramble to finish
your assignments. Eventually, school finishes and you heave a sigh of relief. &amp;ldquo;Finally, I can add object naming too!&amp;rdquo;
you think to yourself. But when you open up the project, you realise that the spark, that allure of the project is
gone. You stare blankly at the Trello board of &amp;ldquo;To-Do&amp;rdquo; features and begin to see this project as a chore. Those new
features and promised rewrites now seem like a hassle. Those surges of dopamine you got every commit, now reduced to a
mere flicker. But this can&amp;rsquo;t happen, right? After all, this was your baby! You had spent an entire semester break
building it, raising it. It can&amp;rsquo;t all be for nothing! What will happen to the poor pet owners? You try convincing
yourself that you can power through this lack of motivation. You think to yourself, &amp;ldquo;Maybe if I just started here, I
would be able to find joy in working on this again&amp;rdquo;. But alas, no matter how hard you will yourself, you cannot find
an ounce of motivation to fix that bug, to merge that pull request, to add that feature. You sigh and start questioning
yourself. If you cannot finish a mere side project, are you even that worthy of being a developer? But eventually, you
find another side project to occupy your time. One that makes your heart race every commit. And the cycle continues.&lt;/p>
&lt;p>What I had just shared is - what I believe - a common narrative many developers experience. In programming, we are
often bombarded with the idea that side projects are a necessary staple of a developer - that one must have a Github
page filled to the brim with open-source contributions and personal projects to be considered a good developer. But is
it really necessary? Or are we - as a collective - creating unecessary barriers for ourselves. Is this mindset really
good for us? Or is it slowly destroying our motivation and sucking our weekends dry?&lt;/p>
&lt;p>In this post, I would like to explore this aspect of the industry and talk about my experiences working on side
projects and share some of my personal opinions on it. Now note, I do not claim to be a programming genius nor do I
assume that my word is gospel. I am merely sharing my observations and experiences as a developer who was mostly
self-taught. More importantly, this post is my way of performing introspection on my past five years as a developer and
how much I have grown since then.&lt;/p>
&lt;h2 id="separating-the-truth-from-fiction">
&lt;a href="#separating-the-truth-from-fiction" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Separating the truth from fiction
&lt;/h2>
&lt;p>As easy as it is to denounce the notion of side projects as a parasite to one&amp;rsquo;s sanity. There are many truths and value
that can be derived from making side projets. So, I would first like to explain why I believe side projects are a
useful tool for developers.&lt;/p>
&lt;p>It is hard to deny that side projects can be incredibly fun to work on. When you find a project idea that you believe
in, its siren&amp;rsquo;s call is hard to resist. You&amp;rsquo;ll find yourself spending hours on end on it. Your weekends can be
engulfed by the pile of features you have planned for.&lt;/p>
&lt;p>When someone stars our repository. When Google Analytics reports a new user. When someone makes a pull request. When we
get a new issue. It is an undeniable fact that seeing people use what we have built is incredibly rewarding and often
times, that drives us to want to work on it more; we now have an audience of users that we cannot disappoint.&lt;/p>
&lt;p>Of course, many of us embark on side projects for the intrinsic rewards it presents to us. This fun is usually
derived from the prospect of learning something new. Learning how a network protocol works. Learning how a language is
used. Learning a new framework. These are all carrots-on-sticks for developers. Naturally curious, we all look for
mental stimulation and seek the next idea we can get our fingers on. Side projects serve as a great way to explore
different technologies and collaborate with others.&lt;/p>
&lt;p>Side projects also offer a way for us, as developers, to view how much progress we have made. Remember that simple chat
application you made when you were 16? Now look at you creating web applications from scratch or learning a whole
network protocol on your own. These side projects document your journey as a developer and it is refreshing to look
back and see how much you have grown through these projects.&lt;/p>
&lt;h2 id="a-case-against-side-projects">
&lt;a href="#a-case-against-side-projects" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
A case against side projects
&lt;/h2>
&lt;p>However, while the benefits of side projects are bountiful, it is hard to deny the &amp;ldquo;downsides&amp;rdquo; of side projects. Now, I
use the word downsides with &lt;strong>heavy&lt;/strong> quotations as I do not believe that these are direct downsides of the idea of
side projects itself. Rather, I believe that the downsides to side projects are derived from the value we have placed
on them as an industry and how we - as driven individuals - have warped this perception of a side project.&lt;/p>
&lt;blockquote>
&lt;p>I believe that side projects are unnecessarily prized and emphasised. The naturally competitive environment in tech
has caused this idea that side projects are a quintessential component of any developer&amp;rsquo;s arsenal to become overly
emphasised.&lt;/p>
&lt;/blockquote>
&lt;p>It is due to this over-emphasis that many who embark on side projects often develop feelings of guilts when they are
unable to see a project through. It has caused the idea of side projects to transform from one of learning and
exploration to one of a &amp;ldquo;do-or-die&amp;rdquo; nature. Worse still, those who do not devote time to side projects may feel as
though they are losing out against others and in turn develop an obsession with trying to &amp;ldquo;catch up&amp;rdquo; to them. This also
devalues the efforts of those who try at the beginning. I believe that this boils down to the fundamental behavior of
humans: competition. We will use any - and every - metric we can get our hands on to compare ourselves against one
another. This is also why I do not agree with those who try to micro-optimise their daily lives - trying to squeeze
every second that passes to achieve optimal productivity. I was one of those who were also obsessed with ensuring that
my every waking moment was meticulously planned to ensure that my productivity remained at its peak. This was born out
of fear that the rapid advancements of this field would eventually overwhelm me and leave me in the lurch. However, the
reality is, as much as it is important to be driven, we must recognise that there is more to life than an eternal grind
to be productive. It is important that we look at the time we are spending on side projects objectively and questioning
whether we are neglecting other aspects of our life in pursuit of this &amp;ldquo;grind&amp;rdquo;.&lt;/p>
&lt;p>This can lead to people developing an unhealthy obsession with creating side projects and working on that &amp;ldquo;hustle&amp;rdquo;.
While many feel incredibly motivated at the beginning, those who fail to properly pace themselves will end up burnt
out. This can lead to a vicious cycle where they push themselves too hard only to feel exhausted, give up, and feel
guilty about giving up - spurring them on to try even harder. Burn out - in tech - is one of the worst things that
could happen to a developer in my honest opinion. When one&amp;rsquo;s livelihood depends on their ability to produce good code
under a time crunch, a general sense of demotivation can lead one to become careless; introducing bugs into their
system. It also diminishes one&amp;rsquo;s interest in the field and in the worst case, can drive them away from the field
entirely.&lt;/p>
&lt;p>There are those who also pursue the idea of side projects with the incorrect mindset. Often when I speak to beginners,
they often state that they feel this obligation to start a side project because they have noticed that others are doing
so. Some start this side project with the goal to become the number one starred repository on Github. Some dive into
one because they think that the only way to improve as a developer is to work on side projects. Some also get swept up
with the common myth that &amp;ldquo;side projects == necessity to work in a company&amp;rdquo; and end up pursuing this belief.&lt;/p>
&lt;p>However, what many of these individuals fail to realise is that side projects are not the only measure of a developer&amp;rsquo;s
worth. As alluring of an idea it is that a company will hire you if you have a portfolio the length of a PhD graduate,
companies are often looking to hire those who demonstrate problem-solving abilities. So what if you have made 20 APIs
before? If you fail to demonstrate the most fundamental skill a developer should possess, you won&amp;rsquo;t be able to think
critically to solve new problems. While side projects &lt;em>can&lt;/em> build problem-solving abilities, some may only venture
within the range of their comfort zone to try new side projects. In some cases, this could mean never trying any
&amp;ldquo;hard problems&amp;rdquo; as they do not believe that they possess the capacity to solve them on their own.&lt;/p>
&lt;p>It is this over-emphasis on side projects that has placed so much unnecessary pressure on new developers. I have met
many developers who have been wrapped in this worry that if they don&amp;rsquo;t start building a spectacular portfolio right
when they start, they will end up becoming a terrible developer. It is sad to see that they place this burden on
themsevles when learning to program should be a fun and enjoyable thing.&lt;/p>
&lt;h2 id="so-what-now">
&lt;a href="#so-what-now" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
So what now?
&lt;/h2>
&lt;p>In summary, I believe that side projects are not inherently evil. It is the warped perception of them that our industry
has created that has de-valued the true essence of them.&lt;/p>
&lt;p>I have been on both ends of the &amp;ldquo;side project cycle&amp;rdquo; before. I have been the naive developer who thought having
hundreds of followers on Github or thousands of stars on my projects mattered and I have also been burnt out, swamped
with school work, and dissatisfied with my perceived notion of productivity.&lt;/p>
&lt;p>As with anything in life, the key is balance. Understanding that side projects are not - in any way - sole markers of a
developer&amp;rsquo;s abilities is important. Having a large following on Github does not mean you are a terrific programmer and
vice versa. Learning to appreciate the learning process, rather than working on something for the potential rewards, is
an important aspect of life and moreso in this culture where developers often try to one-up one another with false
measurements of success. In the end, what you work on should matter to you. You can build something to benefit others,
I am not discouraging that, but you must bear in mind that at the end of the day, the one who benefits most from it
should be you.&lt;/p>
&lt;p>I think we have to look at each project objectively. &amp;ldquo;Have I learnt something about myself, this technology, or
programming in general?&amp;rdquo; If yes, then I believe that you have already benefited greatly from it. Whether or not the
project is &amp;ldquo;failed&amp;rdquo; or &amp;ldquo;incomplete&amp;rdquo;, as long as you have learnt something along the way, I do not believe that you
should belittle that effort.&lt;/p>
&lt;p>So go out and build something that inspires you! Work on the project that gets you excited. Explore technologies that
you are interested in. Don&amp;rsquo;t worry so much about the perceived value of the project you are embarking on. This is YOUR
journey, so enjoy it to the fullest!&lt;/p></description></item><item><title>Deploying discord bots written in Kotlin to Heroku</title><link>/post/deploying-discord-bot-kotlin/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>/post/deploying-discord-bot-kotlin/</guid><description>
&lt;p>Over my time in TPH, I have noticed that a common woe aspiring bot developers have is that they are unable to host
their Discord bot online as they may not have access to a credit card.&lt;/p>
&lt;h2 id="introducing-heroku">
&lt;a href="#introducing-heroku" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Introducing Heroku!
&lt;/h2>
&lt;p>While the official Discord bots used in TPH - like HotBot - is hosted via paid platforms, there are free alternatives
to deploying your bot online. This is where Heroku comes into the picture!&lt;/p>
&lt;blockquote>
&lt;p>Heroku is a cloud platform that lets companies build, deliver, monitor and scale apps — we&amp;rsquo;re the fastest way to
go from idea to URL, bypassing all those infrastructure headaches.&lt;/p>
&lt;/blockquote>
&lt;p>Heroku&amp;rsquo;s free tier does not require any credit card information and has sufficient uptime for your basic bot
development needs and it is a great starting place to understand hosting.&lt;/p>
&lt;h2 id="how-does-heroku-work">
&lt;a href="#how-does-heroku-work" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
How does Heroku work?
&lt;/h2>
&lt;p>Before diving into setting up a Discord bot on Heroku, it is best to explain how Heroku is used. Heroku relies on the
Git version control system (VCS) to manage an application. This means that it integrates well with any existing projects
that already use Git. Do not fret, even if your application does not use Git, the configuration and setup for Heroku is
still simple.&lt;/p>
&lt;p>By using Git, Heroku receives the project files directly and it is responsible for building the project. This is unlike
other hosting platforms where you would often only supply the final executable - a &lt;code>.jar&lt;/code> file in our case - to the
hosting platform to run.&lt;/p>
&lt;p>In order for Heroku to understand how it will build and deploy your application, you must provide a &lt;code>Procfile&lt;/code>.&lt;/p>
&lt;p>The &lt;code>Procfile&lt;/code> is comprised of two key components - the dyno to run the application on and the commands to run your
application.&lt;/p>
&lt;p>According to the &lt;a href="https://www.heroku.com/dynos">Heroku documentation on dynos&lt;/a>, dynos are containers that are used to
run and scale all Heroku applications. Rather than worrying about configuring your build environment or OS, you can
focus on building your applications and allowing Heroku to take over the build and deployment process. For all
Discord bots, we will use a &lt;strong>worker&lt;/strong> dyno.&lt;/p>
&lt;p>The build commands we supply correspond to the build commands we use to run our bots locally.&lt;/p>
&lt;p>As Heroku uses the project files to determine the type of tools we are using, we do not need to specify the
instructions to create the executable. In our case, since we are using Maven, it can intelligently detect the
&lt;code>pom.xml&lt;/code> file and create the &lt;code>.jar&lt;/code> accordingly. This leaves us with only the run commands to include in our &lt;code>Procfile&lt;/code>
.&lt;/p>
&lt;p>Finally, to tighten security, we will store all bot tokens in Heroku&amp;rsquo;s
&lt;a href="https://devcenter.heroku.com/articles/config-vars">config vars.&lt;/a> From a code perspective, these config vars are simply
environment variables available to our applications. This allows us to load our bot token during runtime and prevent
the bot token from being leaked.&lt;/p>
&lt;p>Thus, we can define our deployment plan as such:&lt;/p>
&lt;ol>
&lt;li>Initialise the codebase as a Git repository&lt;/li>
&lt;li>Create a Heroku application for the bot&lt;/li>
&lt;li>Create a &lt;code>Procfile&lt;/code> to supply instructions for Heroku to run the bot&lt;/li>
&lt;li>Store the bot token as a config var to be used by your bot&lt;/li>
&lt;/ol>
&lt;p>What I have just presented is a general overview of Heroku as a hosting platform. I will be diving into the
implementation
in the following sections.&lt;/p>
&lt;h2 id="getting-started">
&lt;a href="#getting-started" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Getting started
&lt;/h2>
&lt;p>For this article, I will be using a very simple Discord bot written in Kotlin. I have chosen to use JDA as the focus of
this guide is to understand Heroku. The code repository can be found
&lt;a href="https://github.com/woojiahao/discord-heroku-deployment-demo">here.&lt;/a>&lt;/p>
&lt;p>If you wish to follow along, you can get the repository via&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/woojiahao/discord-heroku-deployment-demo ping-bot
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> ping-bot/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Aside from that, basic understanding of the following is good to have to understand the technical details of this guide.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://git-scm.com/book/en/v2">Git&lt;/a> - version control system that integrates with Heroku to enable easy deployments&lt;/li>
&lt;li>&lt;a href="http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">Maven&lt;/a> - build tool for Kotlin to
manage application dependencies&lt;/li>
&lt;/ol>
&lt;p>In Kotlin/Java, we are looking to create a &lt;code>.jar&lt;/code> file. This &lt;code>.jar&lt;/code> file can be thought of like a &lt;code>.exe&lt;/code> file.
Essentially, it bundles the application and allows us to run our bot without having to fire up an IDE.&lt;/p>
&lt;p>To create this &lt;code>.jar&lt;/code> file, we will use Maven. For more information about using Maven to create &lt;code>.jar&lt;/code> files, refer to
&lt;a href="http://tutorials.jenkov.com/maven/maven-build-fat-jar.html">this&lt;/a> guide.&lt;/p>
&lt;p>With the formalities out of the way, let&amp;rsquo;s get down to deploying our bot.&lt;/p>
&lt;h2 id="installing-heroku">
&lt;a href="#installing-heroku" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Installing Heroku
&lt;/h2>
&lt;p>You will have to install Heroku onto your machine to execute the following commands in the command line. You can find
the installation instructions for Heroku &lt;a href="https://devcenter.heroku.com/articles/heroku-cli">here&lt;/a>.&lt;/p>
&lt;p>To ensure that you have installed Heroku successfully, run &lt;code>heroku --version&lt;/code>. My version of Heroku is
&lt;code>heroku/7.39.2 linux-x64 node-v13.12.0&lt;/code>&lt;/p>
&lt;h2 id="setup-a-git-repository">
&lt;a href="#setup-a-git-repository" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Setup a Git repository
&lt;/h2>
&lt;p>As mentioned earlier, we need to ensure that our application is a Git repository for Heroku to work.&lt;/p>
&lt;p>While it is recommended
to &lt;a href="https://help.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line">publish your repository to GitHub&lt;/a> (
or any other version control website), it is not necessary
for deploying your applicaiton to Heroku.&lt;/p>
&lt;p>If you are using the sample bot, it is already a Git repository.&lt;/p>
&lt;p>If you are deploying your own bot, initialise a repository by using the following command inside the root folder of your
codebase.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="create-a-new-heroku-application">
&lt;a href="#create-a-new-heroku-application" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Create a new Heroku application
&lt;/h2>
&lt;p>Then, we want to create a Heroku application.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ heroku create &lt;span class="o">[&lt;/span>project name&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The project name is optional and will be automatically generated if not provided. It is recommended that you give a name
to be organised.&lt;/p>
&lt;p>To ensure that the Heroku application has been created, run the &lt;code>git remote -v&lt;/code> command to list the remotes of your
repository. Should your application have been created successfully, you will see a new remote added linking to a Heroku
Git remote.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post/deploying-discord-bot-kotlin/git-remote.png"
alt="Results of git remote -v"
width=1086
height="352" />&lt;/p>
&lt;p>With the Heroku application created, we can begin configuring our repository to deploy to Heroku.&lt;/p>
&lt;h2 id="creating-a-procfile">
&lt;a href="#creating-a-procfile" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Creating a Procfile
&lt;/h2>
&lt;p>As explained earlier, the &lt;code>Procfile&lt;/code> acts as a build instruction manual for our application. It instructs Heroku how we
want to run our application. Heroku takes over the rest and helps with managing our build environment.&lt;/p>
&lt;p>For my sample bot, the &lt;code>Procfile&lt;/code> looks like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>worker: java -jar target/Bot.jar
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s breakdown this file. We first declare the dyno type as &lt;code>worker&lt;/code>. Then, we specify the command to run our &lt;code>.jar&lt;/code>
file.&lt;/p>
&lt;p>Heroku is able to intelligently detect that our Kotlin application uses Maven as a build tool and runs the
&lt;code>mvn clean install&lt;/code> command to create our &lt;code>Bot.jar&lt;/code> file. Then, it will use the commands in the &lt;code>Procfile&lt;/code> to run the
application.&lt;/p>
&lt;h2 id="securing-discord-bot-tokens">
&lt;a href="#securing-discord-bot-tokens" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Securing Discord bot tokens
&lt;/h2>
&lt;p>A Discord bot requires a token to run.&lt;/p>
&lt;p>You can obtain this bot token when you make a new Discord bot from the Discord
&lt;a href="https://discordpy.readthedocs.io/en/latest/discord.html">developer dashboard&lt;/a>.
However, you do not want to expose this token in your repository as this would mean that others could launch and
access your bot.&lt;/p>
&lt;p>As mentioned earlier, we will make use of Heroku&amp;rsquo;s &lt;a href="https://devcenter.heroku.com/articles/config-vars">config vars&lt;/a> to
safely store and access this token.&lt;/p>
&lt;p>We will add our bot&amp;rsquo;s token as an environment variable and use &lt;code>System.getenv()&lt;/code> method to retrieve this value.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ heroku config:set &lt;span class="nv">BOT_TOKEN&lt;/span>&lt;span class="o">=&lt;/span>&amp;lt;bot token&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Inside the &lt;code>Bot.kt&lt;/code> file, you will find the following lines in the &lt;code>main()&lt;/code> function.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">token&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;BOT_TOKEN&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">?:&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Must include bot token in environment variable for bot to run&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will retrieve the corresponding environment variable that we have stored in Heroku. If there is no environment
variable present, we will stop the bot from launching and display an error.&lt;/p>
&lt;p>An additional benefit of storing our bot tokens as an environment variable is that we are able to store the bot token
locally as an environment variable which streamlines our development process as we could have a separate token used
for a development/testing bot.&lt;/p>
&lt;h2 id="launching-the-bot">
&lt;a href="#launching-the-bot" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Launching the bot
&lt;/h2>
&lt;p>After configuring everything, commit all the changes to your project, and push it to the &lt;code>heroku&lt;/code> remote.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git commit -am &lt;span class="s2">&amp;#34;Setup Heroku&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git push heroku master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you encounter a problem with pushing to the &lt;code>heroku&lt;/code> remote, use the command &lt;code>heroku logs --tail&lt;/code> and find the
latest error messages to debug any errors.&lt;/p>
&lt;p>After pushing the changes, Heroku will build your application. However, it is not online yet as you have to scale
your application. This tells Heroku how many instances of your application you wish to run. For our case, we can go
with one worker dyno.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ heroku ps:scale &lt;span class="nv">worker&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can now invite your bot to a server and test it out. If you&amp;rsquo;re using the sample PingBot, you can use &lt;code>!ping&lt;/code> and
expect the bot to respond with &lt;code>Pong!&lt;/code>.&lt;/p>
&lt;h2 id="now-what">
&lt;a href="#now-what" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Now what?
&lt;/h2>
&lt;p>Congratulations! You have just deployed a Discord bot onto Heroku! When you make changes to the bot, you are free to
commit and push those changes to the &lt;code>heroku&lt;/code> remote to update the bot that is online.&lt;/p>
&lt;p>Here are some tips for developing with Heroku.&lt;/p>
&lt;ol>
&lt;li>While working on your development copy of the bot, it is recommended that you obtain a seprate bot token and
attach it as an environment variable to your local development environment. Doing so allows you to maintain your
bot&amp;rsquo;s uptime while making changes.&lt;/li>
&lt;li>If you encounter any errors or your bot is not responding, use the &lt;code>heroku logs --tail&lt;/code> command to view the logs
of your application. Doing so allows you to check if there were any errors while running your project.&lt;/li>
&lt;li>If you require persistent storage, Heroku comes with a free tier plugin for
&lt;a href="https://www.heroku.com/postgres">PostgreSQL.&lt;/a> Heroku - by default - has ephemeral storage, meaning it does not
maintain new files after each build.&lt;/li>
&lt;/ol>
&lt;h2 id="conclusion">
&lt;a href="#conclusion" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Conclusion
&lt;/h2>
&lt;p>Heroku offers a free alternative to many hosting platforms and is a perfect platform for aspiring bot developers to
begin.&lt;/p>
&lt;p>More resources on hosting JVM-based applications on Heroku:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://devcenter.heroku.com/articles/getting-started-with-java#introduction">Getting Started on Heroku with Java&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/heroku/java-sample">Java Sample (on GitHub)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Gatsby.js + GitHub Actions + GitHub Pages = Match Made in Heaven?</title><link>/post/gatsby-gh-pages/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><guid>/post/gatsby-gh-pages/</guid><description>
&lt;p>After a long hiatus induced by the demons that was school, I have finally defeated the final boss and graduated!&lt;/p>
&lt;p>With that, I have started to work on re-building my portfolio site (you&amp;rsquo;re seeing it right now!). I wanted to
learn &lt;a href="https://www.gatsbyjs.org/">Gatsby.js&lt;/a> and so I figured it would be the best time to do so! While working with
Gatsby.js, one of the issues that I had faced was not having a proper guide on deploying Gatsby.js applications onto
GitHub Pages via GitHub Actions. The official documentation does include
a &lt;a href="https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/">guide&lt;/a> on
perform &lt;a href="https://www.atlassian.com/continuous-delivery/continuous-deployment">Continuous Deployment (CD)&lt;/a>
via &lt;a href="https://travis-ci.org/">Travis.CI&lt;/a> but I wanted to mess around
with &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a> - GitHub&amp;rsquo;s own CI/CD pipeline.&lt;/p>
&lt;p>So I decided to experiment with building my own workflow and document my process. It was quite interesting how I got to
the current refinement of my CD workflow and I will be sharing a little on the mistakes that I had made and the lessons
learnt.&lt;/p>
&lt;h2 id="why-gatsbyjs">
&lt;a href="#why-gatsbyjs" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Why Gatsby.js?
&lt;/h2>
&lt;p>Taken directly from Gatsby&amp;rsquo;s web description&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>Gatsby.js is a PWA (Progressive Web App) generator.&lt;/p>
&lt;/blockquote>
&lt;p>It may seem a little odd at first but basically, Gatsby.js is a static site generator built around React. It ties
together various React plugins - like &lt;code>react-router&lt;/code> and &lt;code>webpack&lt;/code> - to create a seamless development experience when
creating static sites.&lt;/p>
&lt;p>A static site is a site where a framework is used but the library generates the resulting HTML/CSS/JS files. In doing
so, the site is far more performant than dynamic sites that take time to execute the code of the framework. Gatsby.js
performs all the execution when creating a bundle and we simply deploy this bundle to GitHub pages or any web hosting
platform to have our site up and running.&lt;/p>
&lt;p>In a future post, I will be covering the merits of a static site generator - specifically Gatsby.js - but for now, let&amp;rsquo;s
move on to our next tool, &lt;strong>GitHub Pages!&lt;/strong>&lt;/p>
&lt;h2 id="why-github-pages">
&lt;a href="#why-github-pages" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Why GitHub Pages?
&lt;/h2>
&lt;p>GitHub pages is&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>GitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on
GitHub, optionally runs the files through a build process, and publishes a website.&lt;/p>
&lt;/blockquote>
&lt;p>(Definition taken from &lt;a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages">here&lt;/a>)&lt;/p>
&lt;p>I would like to focus on these four hyper-critical words: &amp;ldquo;static site hosting service&amp;rdquo;. Recall when I mentioned that
Gatsby.js is a static site generator? These four words are like music to my ears! It means that once we have generated
that bundle with Gatsby.js, we can use GitHub Pages to host our website!&lt;/p>
&lt;p>This is awesome because I needed a cheap (if not nothing) hosting provider to host my portfolio website. GitHub Pages
will deploy the site directly from a GitHub repository, providing seamless integration and it is super userful for
creating documentation sites for your projects!&lt;/p>
&lt;p>A big perk to using GitHub Pages is that you can have a &lt;strong>user page&lt;/strong>. This is created from a repository that follows
this naming pattern: &lt;code>&amp;lt;GitHub username&amp;gt;.github.io&lt;/code>. When using a user page, you will receive access to the &lt;code>.github.io&lt;/code>
domain. This is useful for portfolio sites as it now means that we are able to deploy our portfolio page and have a
domain name like &lt;code>woojiahao.github.io&lt;/code>!&lt;/p>
&lt;p>You can find out more about GitHub
pages &lt;a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages">here&lt;/a> and more about user
pages &lt;a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites">here.&lt;/a>&lt;/p>
&lt;h2 id="why-github-actions">
&lt;a href="#why-github-actions" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Why GitHub Actions?
&lt;/h2>
&lt;p>Finally, we have the star of the evening - &lt;strong>GitHub Actions!&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and
deploy your code right from GitHub.&lt;/p>
&lt;/blockquote>
&lt;p>(Definition taken from &lt;a href="https://github.com/features/actions">here&lt;/a>)&lt;/p>
&lt;p>GitHub Actions allows us to develop CI/CD workflows that integrates directly with GitHub. For our use case, we can use
the default tier.&lt;/p>
&lt;p>I picked GitHub Actions primarily because I was intrigued by it and wanted to give it a spin. I had adopted it when
working on &lt;a href="/projects/post/torrent.go">&lt;strong>torrent.go&lt;/strong>&lt;/a> (a BitTorrent protocol implementation written with Go!) and
found that it was rather unique in its approach so I wanted to test it out even more.&lt;/p>
&lt;h2 id="chief-what-is-our-plan-of-attack">
&lt;a href="#chief-what-is-our-plan-of-attack" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Chief! What is our plan of attack?
&lt;/h2>
&lt;p>First, I would like to discuss the final strategy that I took to deploy my portfolio site to GitHub pages.&lt;/p>
&lt;p>To begin, we need to outline the strict limitation of user sites&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>If the repository for your user or organization site has a master branch, your site will publish automatically from
that branch. You cannot choose a different publishing source for user or organization sites.&lt;/p>
&lt;/blockquote>
&lt;p>This means that for our site, if we are using &lt;code>woojiahao.github.io&lt;/code>, we MUST publish the site to the &lt;code>master&lt;/code> branch.&lt;/p>
&lt;p>Our CD workflow looks a little like this:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>We push our latest changes in Gatsby.js (including new blog posts, project listings, or just site changes) to
a &lt;code>develop&lt;/code> branch&lt;/p>
&lt;p>As we may have multiple sets of changes that we push at different times, we do not want our site to be deployed
immediately. Instead, we move on to step dos!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We will merge the changes into a &lt;code>publish&lt;/code> branch. On merge, we should automatically deploy our application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now this is where it gets tricky, we need to build our Gatsby.js page - to create the bundle - and set the contents
of this bundle to the contents of the &lt;code>master&lt;/code> branch.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>This is where you can see our consideration of the limitation mentioned above take effect. However, by setting
the &lt;code>master&lt;/code> branch to be a &amp;ldquo;dump&amp;rdquo; for the bundle files, it would be hard for us to navigate our GitHub repository. This
is why we need to properly setup our branches to allow for this peculiar workflow!&lt;/p>
&lt;h2 id="go-go-go">
&lt;a href="#go-go-go" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Go, go, go!
&lt;/h2>
&lt;p>Let&amp;rsquo;s dive right into the configurations.&lt;/p>
&lt;h3 id="setting-up-branching">
&lt;a href="#setting-up-branching" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Setting up branching
&lt;/h3>
&lt;p>The first order of business is to properly setup our branching strategy. We will use a mix of both the GitHub UI and the
Git CLI. So if you have not installed the Git CLI, you can do
so &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">here.&lt;/a>&lt;/p>
&lt;p>As mentioned in our workflow, we will be using three branches:&lt;/p>
&lt;ul>
&lt;li>&lt;code>master&lt;/code> - to hold the build bundle and renders the page&lt;/li>
&lt;li>&lt;code>develop&lt;/code> - pseudo-master branch that we will use to host our changes in Gatsby.js&lt;/li>
&lt;li>&lt;code>publish&lt;/code> - merge-only branch that we use to trigger a deployment&lt;/li>
&lt;/ul>
&lt;p>So, let&amp;rsquo;s first create and push the other two branches.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git checkout -b develop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git checkout -b publish
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git push -u origin develop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git push origin publish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So we checkout the &lt;code>develop&lt;/code> branch before the &lt;code>publish&lt;/code> branch since we want the &lt;code>publish&lt;/code> branch to be based on the
latest changes of the &lt;code>develop&lt;/code> branch. Don&amp;rsquo;t worry, however, we will only be needing to checkout the &lt;code>publish&lt;/code> branch
via the Git CLI only once to configure.&lt;/p>
&lt;p>We push and set the &lt;code>develop&lt;/code> branch to be
our &lt;a href="https://stackoverflow.com/questions/4693588/what-is-a-tracking-branch">tracking branch&lt;/a> as from now on, we want to
permanently push to the remote &lt;code>develop&lt;/code> branch.&lt;/p>
&lt;p>We also push the &lt;code>publish&lt;/code> branch to create the remote branch.&lt;/p>
&lt;p>If you go to the repository in GitHub and expand the &amp;ldquo;Branch&amp;rdquo; dropdown, you should see that there will be three branches
now.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post/gatsby-deployment-tutorial/remote-branches.png"
alt="GitHub remote branches"
width=333
height="280" />&lt;/p>
&lt;p>Once done, we can now continue our branching configurations in the GitHub UI.&lt;/p>
&lt;p>Under &amp;ldquo;Settings &amp;gt; Branches&amp;rdquo;, there is an option for the &amp;ldquo;Default branch&amp;rdquo;. Normally, it is the &lt;code>master&lt;/code> branch. However,
as mentioned earlier, we want to be able to view and access our repository easily (and have the all-so-important
language colors be right!). So, we will change the default branch to be &lt;code>develop&lt;/code>.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post/gatsby-deployment-tutorial/default-branch.png"
alt="GitHub changing default branches"
width=1103
height="254" />&lt;/p>
&lt;p>Once we have configured these two aspects, we are done with our branching strategy! Let&amp;rsquo;s move on to the real meat of
this CD - the workflow!&lt;/p>
&lt;h3 id="creating-the-workflow">
&lt;a href="#creating-the-workflow" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Creating the workflow
&lt;/h3>
&lt;p>GitHub Actions will look out for &lt;strong>workflows&lt;/strong> in our repository to determine what actions are to be run. These
workflows are stored in the &lt;code>.github/workflows&lt;/code> folder.&lt;/p>
&lt;p>We can just name our CD workflow as &lt;code>deploy.yml&lt;/code>. Yes, these workflow files are declared as YAML documents - like Docker
Compose!&lt;/p>
&lt;pre tabindex="0">&lt;code>/
|_.github/
|_workflows/
|_deploy.yml
&lt;/code>&lt;/pre>&lt;p>Then, we can start to configure our workflow. Fire up your favourite text editor and let&amp;rsquo;s begin!&lt;/p>
&lt;p>The first thing we will configure is when this workflow will run. As mentioned earlier, we want to deploy our site only
when we push to the &lt;code>publish&lt;/code> branch via a merge, thus, we will have the following:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">publish&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then, we can start declaring our jobs aka the thing that runs. GitHub Actions allows us to configure concurrent jobs or
jobs that rely on one another, but I will not be going into detail about those in this post. If you want more
information, please refer to the
documentation &lt;a href="https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobs">here.&lt;/a>&lt;/p>
&lt;p>This workflow will only require one job and we can call it &lt;code>deploy&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We then specify what is the underlying OS the CD will use to execute this workflow.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then we declare strategies. From my understanding, these are variables that we can use and we can declare them as arrays
to allow us to execute the workflow on multiple versions of Node for instance.&lt;/p>
&lt;p>However, in our case, we can make do with just having one version of Node since we are building once. If you require
more details about strategies in GitHub Actions,
refer &lt;a href="https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategy">here.&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matrix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">node_version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">13.&lt;/span>&lt;span class="l">x ]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Finally, we can declare our steps for the workflow.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>First, checkout the repository so that our workflow can access it.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then, we setup Node in out Ubuntu machine. We use the &lt;code>node_version&lt;/code> we declared in our strategy.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/setup-node@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">node-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ matrix.node_version }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then, we install &lt;code>gatsby-cli&lt;/code> and the necessary dependencies for our static site to be generated.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">npm install -g gatsby-cli &amp;amp;&amp;amp; npm install --no-optional&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then, we set the Git credentials as we are using the &lt;code>gh-pages&lt;/code> npm package to deploy our site. I will explain further
later on.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git config --global user.email &amp;#34;&amp;lt;insert GitHub email&amp;#34; &amp;amp;&amp;amp; git config --global user.name &amp;#34;&amp;lt;insert desired name&amp;gt;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Lastly, we can build the site bundle and deploy it. I have used a custom script declared in the &lt;code>package.json&lt;/code> and a
GitHub token, both of which I will be discussing below.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">npm run deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GH_TOKEN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GH_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There it is. We have created the workflow for deploying our application. However, we have some missing components that
we have yet to configure so buckle up for our last set of configurations.&lt;/p>
&lt;p>A sample of the whole workflow file looks like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">publish&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy website to Github Pages with Gatsby&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matrix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">node_version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">13.&lt;/span>&lt;span class="l">x ]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Checkout&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup Node.js version ${{ matrix.node_version }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/setup-node@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">node-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ matrix.node_version }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Installing Gatsby CLI&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">npm install -g gatsby-cli &amp;amp;&amp;amp; npm install --no-optional&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setting Git credentials&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git config --global user.email &amp;#34;woojiahao1234@gmail.com&amp;#34; &amp;amp;&amp;amp; git config --global user.name &amp;#34;woojiahao&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy the site&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">npm run deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GH_TOKEN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GH_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="creating-a-deploy-script">
&lt;a href="#creating-a-deploy-script" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Creating a deploy script
&lt;/h3>
&lt;p>We are using the &lt;code>gh-pages&lt;/code> to automatically push the build bundle to the &lt;code>master&lt;/code> branch. We will need to setup
a &lt;code>deploy&lt;/code> script in our &lt;code>package.json&lt;/code> to use this package. This script will build the bundle and deploy it to
the &lt;code>master&lt;/code> branch.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">...,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;#34;deploy&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master -r https://$GH_TOKEN@github.com/woojiahao/woojiahao.github.io.git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I would like to focus in on the command for &lt;code>gh-pages&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>gh-pages -d public -b master -r ...
&lt;/code>&lt;/pre>&lt;p>&lt;code>-d&lt;/code> indicates which folder the build bundle is located. In Gatsby.js case, it is the &lt;code>public/&lt;/code> folder.&lt;/p>
&lt;p>&lt;code>-b&lt;/code> indicates which branch we will push the build bundle to. By default, it is the &lt;code>gh-pages&lt;/code> branch. But as I have
explained, we need it to be the &lt;code>master&lt;/code> branch.&lt;/p>
&lt;p>&lt;code>-r&lt;/code> indicates the GitHub repsitory we will be pushing too. This uses the &lt;code>GH_TOKEN&lt;/code> environment variable that we have
loaded into the workflow. It also leads us nicely to the next and final configuration we need to perform - getting a
GitHub access token.&lt;/p>
&lt;h3 id="shhh--access-tokens-and-secrets">
&lt;a href="#shhh--access-tokens-and-secrets" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Shhh! &amp;hellip; (Access tokens and secrets)
&lt;/h3>
&lt;p>The last ingredient to this workflow recipe is a GitHub access token.&lt;/p>
&lt;p>We can generate a personal access token under &amp;ldquo;Settings &amp;gt; Developer settings &amp;gt; Personal access tokens &amp;gt; Generate new
token&amp;rdquo;.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post/gatsby-deployment-tutorial/access-token-location.png"
alt="GitHub access token settings location"
width=1098
height="229" />&lt;/p>
&lt;p>When generating the token, restrict the token&amp;rsquo;s scope to &lt;code>repo&lt;/code> only.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post/gatsby-deployment-tutorial/create-token.png"
alt="GitHub create token"
width=834
height="471" />&lt;/p>
&lt;p>You will receive a token once you create it. Copy this token to your clipboard and save it somewhere secure.&lt;/p>
&lt;p>Then, go to the Gatsby.js repository and under &amp;ldquo;Settings &amp;gt; Secrets&amp;rdquo;, select &amp;ldquo;Add a new secret&amp;rdquo;. The name of the secret
must be &lt;code>GH_TOKEN&lt;/code> and the value is the copied token.&lt;/p>
&lt;p>&lt;img loading="lazy"
src="/post/gatsby-deployment-tutorial/add-secret.png"
alt="GitHub add secret"
width=1113
height="474" />&lt;/p>
&lt;p>For more information about personal access tokens and GitHub secrets in GitHub Actions, you can check these links
out: &lt;a href="Ben2020#2762">access tokens&lt;/a>
and &lt;a href="https://help.github.com/en/actions/configuring-and-managing-workflows/using-variables-and-secrets-in-a-workflow">secrets.&lt;/a>&lt;/p>
&lt;p>And we are done! This was all the configuration we needed to get the CD workflow working!&lt;/p>
&lt;h3 id="it-works">
&lt;a href="#it-works" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
IT WORKS!!
&lt;/h3>
&lt;p>We can test whether the workflow works by making a merge request from &lt;code>develop&lt;/code> to &lt;code>publish&lt;/code>. When we accept the merge
request, it will push the changes to the &lt;code>publish&lt;/code> branch and in turn, trigger the workflow and deploy our site.&lt;/p>
&lt;p>Now, just sit back and enjoy as the deployment happens automatically.&lt;/p>
&lt;h2 id="mistakes-were-made">
&lt;a href="#mistakes-were-made" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Mistakes were made&amp;hellip;
&lt;/h2>
&lt;p>While experimenting with GitHub Actions, I had several &amp;ldquo;duh&amp;rdquo; moments.&lt;/p>
&lt;h3 id="yaml-disaster">
&lt;a href="#yaml-disaster" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
YAML disaster
&lt;/h3>
&lt;p>When I was writing the first iteration of the workflow file, I failed to read the documentation for GitHub secrets and
had incorrectly set the environment variable.&lt;/p>
&lt;p>FYI, environment variables should be declared like this&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">&amp;lt;key&amp;gt;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;value&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>and not like this&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GH_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Because I had declared it improperly, I was not able to access the &lt;code>GH_TOKEN&lt;/code> token in my workflow and it caused the
workflow to fail. It took me a while to realise what I had done.&lt;/p>
&lt;h3 id="repository-takeover">
&lt;a href="#repository-takeover" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Repository takeover!
&lt;/h3>
&lt;p>When I was first designing my workflow, I had actually completely forgotten that there were branches outside
of &lt;code>developer&lt;/code> and &lt;code>master&lt;/code>. Originally, I had created a completely separate repository to house my development code.
This left the original repository to be a hosting platform for the build bundle.&lt;/p>
&lt;p>It took me a while to realise how impractical and unnecessary this was and I re-designed the workflow.&lt;/p>
&lt;h2 id="conclusion">
&lt;a href="#conclusion" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Conclusion
&lt;/h2>
&lt;p>Overall, this was an interesting journey! I learnt a fair bit about Gatsby.js and GitHub Actions along the way. If you
wish to view the Gatsby.js project I use for my portfolio site, you can visit
it &lt;a href="https://github.com/woojiahao/woojiahao.github.io">here&lt;/a>&lt;/p></description></item><item><title>Heroku x Docker x Discord bot x Kotlin</title><link>/post/heroku-kotlin-discord-bot/</link><pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate><guid>/post/heroku-kotlin-discord-bot/</guid><description>
&lt;p>You may be wondering what&amp;rsquo;s up with the over the top, nearly fan-ship name, trust me, I was not on anything when I wrote
this.&lt;/p>
&lt;p>I simply wanted to write about a playground project I had written to get Docker working with Heroku, specifically in the
context of writing a Discord bot in Kotlin.&lt;/p>
&lt;p>I made a rather comprehensive guide to go with the project over on GitHub and I wish to share it here as well since it
was a rather large milestone.&lt;/p>
&lt;p>If you wish to follow along, the sample project is found &lt;a href="https://github.com/woojiahao/discord-docker">here.&lt;/a>&lt;/p>
&lt;p>The project uses Gradle as the build tool for the project.&lt;/p>
&lt;h2 id="running-the-docker-image">
&lt;a href="#running-the-docker-image" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Running the Docker image
&lt;/h2>
&lt;h3 id="local">
&lt;a href="#local" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Local
&lt;/h3>
&lt;p>If you&amp;rsquo;re running the bot locally, you should use Docker to package the bot and run the Docker image created. This way,
you can test your bot locally with the same environment as your server thanks to Docker!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ docker build -t discord-docker .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ docker image ls &lt;span class="c1"># Should see the image named &amp;#34;discord-docker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ docker run -e &lt;span class="nv">BOT_TOKEN&lt;/span>&lt;span class="o">=&lt;/span>&amp;lt;bot token&amp;gt; -d discord-docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ docker container ls &lt;span class="c1"># Should see &amp;#34;discord-docker running&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>With Docker, it is as simple as that to get the bot running.&lt;/p>
&lt;h3 id="heroku">
&lt;a href="#heroku" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Heroku
&lt;/h3>
&lt;p>If you&amp;rsquo;re deploying the bot on Heroku, the steps are actually outlined in the documentation for Docker by
Heroku. (&lt;a href="https://devcenter.heroku.com/articles/build-docker-images-heroku-yml">here&lt;/a>)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ heroku stack:set container
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git push heroku master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And watch as Heroku does its magic!&lt;/p>
&lt;h2 id="project-composition">
&lt;a href="#project-composition" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Project composition
&lt;/h2>
&lt;h3 id="buildgradle">
&lt;a href="#buildgradle" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
&lt;code>build.gradle&lt;/code>
&lt;/h3>
&lt;p>The &lt;code>build.gradle&lt;/code> straightforward, with the use of the &lt;code>shadowJar&lt;/code> plugin to create the fat jar required for all
library dependency. In order to prevent the exported jar from having differing names, we set the &lt;code>archiveName&lt;/code> attribute
of the plugin to always use the name &lt;code>bot.${extension}&lt;/code>.&lt;/p>
&lt;p>This means that even if we changed the version of the gradle file, the exported jar file is the same name so we don&amp;rsquo;t
need to modify our Dockerfile.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="line">&lt;span class="cl">&lt;span class="n">plugins&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">id&lt;/span> &lt;span class="s1">&amp;#39;org.jetbrains.kotlin.jvm&amp;#39;&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="s1">&amp;#39;1.3.41&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">id&lt;/span> &lt;span class="s1">&amp;#39;com.github.johnrengelman.shadow&amp;#39;&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="s1">&amp;#39;5.0.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sourceCompatibility&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">targetCompatibility&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">group&lt;/span> &lt;span class="s1">&amp;#39;com.github.woojiahao&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">version&lt;/span> &lt;span class="s1">&amp;#39;1.0-SNAPSHOT&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">repositories&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mavenCentral&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">maven&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="s1">&amp;#39;https://jitpack.io&amp;#39;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">jcenter&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dependencies&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">implementation&lt;/span> &lt;span class="s2">&amp;#34;org.jetbrains.kotlin:kotlin-stdlib-jdk8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">implementation&lt;/span> &lt;span class="s2">&amp;#34;com.gitlab.aberrantfox:Kutils:0.9.17&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">compileKotlin&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">kotlinOptions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">jvmTarget&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;1.8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">compileTestKotlin&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">kotlinOptions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">jvmTarget&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;1.8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sourceSets&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">main&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">srcDirs&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39;src/main/kotlin/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">srcDirs&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s1">&amp;#39;src/test/kotlin/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">jar&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">manifest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">attributes&lt;/span> &lt;span class="s2">&amp;#34;Main-Class&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;BotKt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">from&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">configurations&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">collect&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">zipTree&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">shadowJar&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">archiveName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;bot.${extension}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="dockerfile">
&lt;a href="#dockerfile" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
&lt;code>Dockerfile&lt;/code>
&lt;/h3>
&lt;p>The &lt;code>Dockerfile&lt;/code> is a little more interesting as it makes use
of &lt;a href="https://docs.docker.com/v17.09/engine/userguide/eng-image/multistage-build/">multi-stage builds&lt;/a> to create a minimal
Docker image.&lt;/p>
&lt;p>Our first image layer uses the official gradle images. We will label this layer as &lt;code>builder&lt;/code>. In this layer, our goal is
to create the jar file that will contain all our dependencies. We first access the image as the root user and start with
our working directory labelled as &lt;code>/builder&lt;/code>. We then add all of our files into the working directory and finally, we
construct the fat jar using the &lt;code>gradle shadowJar&lt;/code> command.&lt;/p>
&lt;p>Then, we create another layer which will be the final layer that goes into the image. We first use the official Alpine
linux image for OpenJDK 8. Then we create a working directory for our application labelled &lt;code>/app&lt;/code>. Then we copy our fat
jar from the &lt;code>builder&lt;/code> layer to the our home directory. As soon as we are done, we then run the command to execute our
fat jar and it will cause the Discord bot to launch.&lt;/p>
&lt;p>Using Discord allows us to remain Gradle and Java version agnostic. This &lt;code>Dockerfile&lt;/code> was taken and modified from the
following article found &lt;a href="https://www.richyhbm.co.uk/posts/kotlin-docker-spring-oh-my/">here.&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-docker" data-lang="docker">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> gradle:5.6.1-jdk8 AS builder&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="s"> root&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /builder&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ADD&lt;/span> . /builder&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> gradle shadowJar&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> openjdk:8-jre-alpine&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>builder /builder/build/libs/bot.jar .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;java&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-jar&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;bot.jar&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="herokuyml">
&lt;a href="#herokuyml" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
&lt;code>heroku.yml&lt;/code>
&lt;/h3>
&lt;p>The &lt;code>heroku.yml&lt;/code> file contains the configuration needed for Heroku to run your application. In that sense, it is similar
to the traditional &lt;code>Procfile&lt;/code> that is provided to Heroku applications.&lt;/p>
&lt;p>In this scenario, we don&amp;rsquo;t need to use an elaborate &lt;code>heroku.yml&lt;/code> file, all we need is to specify that the worker dyno
will be based off the instructions of the &lt;code>Dockerfile&lt;/code> and that&amp;rsquo;s all.&lt;/p>
&lt;p>If you do need to include information like addons and build steps, you can feel free to do so through the use of the
additional properties within the configuration file. More information can be
found &lt;a href="https://devcenter.heroku.com/articles/build-docker-images-heroku-yml">here.&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">docker&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">worker&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Applications of Kotlin's delegate properties</title><link>/post/kotlin-delegate-properties/</link><pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate><guid>/post/kotlin-delegate-properties/</guid><description>
&lt;h2 id="announcement-time">
&lt;a href="#announcement-time" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Announcement time!
&lt;/h2>
&lt;p>After a long hiatus from kMD2PDF, I revved up my engines and began to work on my latest planned feature for the
project&amp;hellip;&lt;/p>
&lt;p>&lt;strong>YAML support!&lt;/strong>&lt;/p>
&lt;p>Yes, now YAML is in the works and you can now control basic attributes of your exported document using only
&lt;a href="https://jekyllrb.com/docs/front-matter/">front matter YAML.&lt;/a>&lt;/p>
&lt;p>This is an incredibly big milestone as this allows anyone to quickly customise their document without having to write a
single line of Kotlin, and with another planned release to create a GUI exporter for markdown documents, this would
greatly streamline users&amp;rsquo; experience.&lt;/p>
&lt;h2 id="okay-so-what-are-delegate-properties">
&lt;a href="#okay-so-what-are-delegate-properties" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Okay, so what are delegate properties?
&lt;/h2>
&lt;p>kMD2PDF introduces a theming engine where you are able to change the entire color scheme of an exported document just by
specifying an attribute in code as such&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">converter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">markdownConverter&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">settings&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">theme&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">Settings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">Theme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DARK&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="design-considerations">
&lt;a href="#design-considerations" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Design considerations
&lt;/h3>
&lt;p>Before building this system, we have to make several consideration&lt;/p>
&lt;ol>
&lt;li>How do we specify that certain attributes have different configurations depending on the theme?&lt;/li>
&lt;li>How do we allow changes to the theme propagate to each element such that the changes are reflected during the
document creation?&lt;/li>
&lt;/ol>
&lt;h4 id="using-singletons">
&lt;a href="#using-singletons" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Using singletons
&lt;/h4>
&lt;p>The second inquiry is rather easy to answer, so we will tackle that issue first - we can store the &lt;code>Settings&lt;/code> as
&lt;a href="https://en.wikipedia.org/wiki/Singleton_pattern">singleton&lt;/a>, since the state of a singleton is unique and static, as
long as the settings are configured before the document is created, then the settings will be chosen during runtime and
have the exported document reflect the changes.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">object&lt;/span> &lt;span class="nc">Settings&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">font&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">FontFamily&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sans-serif&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">field&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">settings&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">configuration&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nc">Settings&lt;/span>&lt;span class="p">.()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">Settings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">configuration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kotlin comes with a language construct to create singletons easily - &lt;code>object&lt;/code> keyword (read more
&lt;a href="https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations">here&lt;/a>).&lt;/p>
&lt;p>This creates everything we need in a singleton but reduces all the boiler plate that would be involved with creating
the singleton, unlike other languages like &lt;a href="https://www.geeksforgeeks.org/singleton-class-java/">Java.&lt;/a>&lt;/p>
&lt;p>When we update the &lt;code>Settings&lt;/code> singleton, the changes will reflect with the exported document since the document style is
lazily generated only up till the latest minute before it gets exported.&lt;/p>
&lt;h4 id="multi-value-properties">
&lt;a href="#multi-value-properties" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Multi-value properties
&lt;/h4>
&lt;p>Now to tackle the hard question, how do we store multiple values in Kotlin? Ideally, what we would want with this system
is to have a single variable and have that variable store both the dark theme and light theme setting. That is, if we
had a single variable &lt;code>textColor&lt;/code>, we would want to be able to store both the light theme and dark theme settings inside
this variable. Depending on the current &lt;code>Settings.theme&lt;/code> configuration at the time where the stylesheet has to be
generated, the &lt;code>textColor&lt;/code> variable would return either the configuration for &lt;code>DARK&lt;/code> theme or &lt;code>LIGHT&lt;/code> theme.&lt;/p>
&lt;p>Traditionally, we would approach this issue using a class to store the information and have that be the end of things -
and this was indeed the approach I ended up employing due to certain limitations in that design which I&amp;rsquo;ll discuss.&lt;/p>
&lt;p>However, in Kotlin, there exists a language construct called
&lt;a href="https://kotlinlang.org/docs/reference/delegated-properties.html">delegated properties&lt;/a> where you are able to call an
object constructor to initialise a variable and provide it with a base of data. Subsequent times accessing this variable
masks the object constructor and will only allow you to access the data type specified by the delegated property. You
can think of a delegated object as an object that defaults all variable references to the given &lt;code>getValue&lt;/code> and
&lt;code>setValue&lt;/code> attributes. This effectively means that once you&amp;rsquo;ve delegated a property, you are no longer entitled to
modifying the object that created the delegate.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">import&lt;/span> &lt;span class="nn">kotlin.reflect.*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DelegateExample&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">private&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">internalValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">getValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thisRef&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">?,&lt;/span> &lt;span class="k">property&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">KProperty&lt;/span>&lt;span class="p">&amp;lt;*&amp;gt;)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Internal value is &lt;/span>&lt;span class="si">${internalValue}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">setValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thisRef&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">?,&lt;/span> &lt;span class="k">property&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">KProperty&lt;/span>&lt;span class="p">&amp;lt;*&amp;gt;,&lt;/span> &lt;span class="k">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">internalValue&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="k">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In the example above, we have created a delegated property that when referenced as a variable (get), will return a
string. But when called with an assignment operator (set) will only accept &lt;code>Int&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">value&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">DelegateExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// internalValue = &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Internal value is
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">value&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">10&lt;/span> &lt;span class="c1">// internalValue = &amp;#34;10&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Internal value is 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">value&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="c1">// internalValue = &amp;#34;105&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Internal value is 105
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As you can see from, in order to instantiate a delegated property and use the features of &lt;code>getValue&lt;/code> and &lt;code>setValue&lt;/code>, we
have to set the variable with the &lt;code>by&lt;/code> keyword. This way, when you have variable references, it will always call the
respective &lt;code>setValue&lt;/code>/&lt;code>getValue&lt;/code> methods.&lt;/p>
&lt;p>Now that you&amp;rsquo;ve had a crash course with delegated properties in Kotlin, can you think of how we can apply this concept
to our current problem? To recap, we already have established a singleton to manage the configuration across all
elements - and the configuration we are most interested in is the &lt;code>theme&lt;/code> attribute which indicates which theme the
document will create. In that case, since the state is singular and shared across the entire program, we can create a
delegate property to hold the configuration of all the themes available, and when the time comes to generate the CSS for
the document, the delegated property is called and it will return the corresponding attribute for the specific theme
configured during the time of generation (since the document HTML/CSS are generated per call of
&lt;code>MarkdownConverter#convert&lt;/code> as opposed to generating them all at once).&lt;/p>
&lt;p>In that case, we can create the delegated property as such:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CssProperty&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">light&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">dark&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">fallback&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">getValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thisRef&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">?,&lt;/span> &lt;span class="k">property&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">KProperty&lt;/span>&lt;span class="p">&amp;lt;*&amp;gt;)&lt;/span> &lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">when&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Settings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">theme&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LIGHT&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">light&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DARK&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">dark&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="o">?:&lt;/span> &lt;span class="n">fallback&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">setValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thisRef&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">?,&lt;/span> &lt;span class="k">property&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">KProperty&lt;/span>&lt;span class="p">&amp;lt;*&amp;gt;,&lt;/span> &lt;span class="k">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?)&lt;/span> &lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">when&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Settings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">theme&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LIGHT&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">light&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DARK&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dark&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This way, we can create a &lt;code>CssProperty&lt;/code> to hold the configurations required for each theme (light/dark for now) and then
when the variables are accessed, they will return the corresponding value stored depending on the current theme
configured in the settings. The &lt;code>fallback&lt;/code> property is a &amp;ldquo;default&amp;rdquo; for each &lt;code>CssProperty&lt;/code> in the event where the &lt;code>light&lt;/code>
or &lt;code>dark&lt;/code> property are both set to null.&lt;/p>
&lt;p>To use the &lt;code>CssProperty&lt;/code> class, we will use the following syntax:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">textColor&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">CssProperty&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FontFamily&lt;/span>&lt;span class="p">?&amp;gt;(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;00&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;fa&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">textColor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Light theme text color -&amp;gt; #000000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nc">Settings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">theme&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">Settings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">Theme&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">DARK&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">textColor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Dark theme text color -&amp;gt; #fafafa
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And this provides us with such a convenient interface to modify the values of the configured properties and to quickly
change the theme settings for each element on a whim.&lt;/p>
&lt;h2 id="roadblocks-">
&lt;a href="#roadblocks-" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Roadblocks 😢
&lt;/h2>
&lt;p>However, when attempting to create the YAML feature, I had noticed a huge flaw in the delegate property system used for
configuring the style components. Since the YAML formatting had to be rendered during runtime and as such, the YAML had
to modify the existing style which while possible using the Singleton pattern, certain components like relying on a
fallback would not be able to register the changes made. Therefore, I had to revert to using a simple class to house the
CSS properties of an element and convert the Settings singleton to be a regular object that has to be passed to each
element for the configuration to take place.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CssProperty&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">theme&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nc">Settings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Theme&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">light&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">dark&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">fallback&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">when&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">theme&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LIGHT&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">light&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DARK&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">dark&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="o">?:&lt;/span> &lt;span class="n">fallback&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">light&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">input&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dark&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">input&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then in order for the converter to apply the changes of the YAML to the document being generated, we iterate over every
element within the style and apply the changes accordingly.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nf">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Element&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">updateStyles&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?,&lt;/span> &lt;span class="n">update&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nc">Element&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input&lt;/span>&lt;span class="o">?.&lt;/span>&lt;span class="n">let&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">forEach&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The lesson learnt here is that while a structure might look good on paper and work for a specific use case, this might
not always be the case and this can result in rewriting of the codebase. I was lucky that the codebase was one that I
was very familiar with and I could afford the rewrite to get this new feature up and running. However, I would not
always be so lucky and might encounter a codebase that might take too long to rewrite.&lt;/p></description></item><item><title>Porting to FlexMark</title><link>/post/porting-flexmark/</link><pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate><guid>/post/porting-flexmark/</guid><description>
&lt;p>kMD2PDF now finally uses &lt;a href="https://github.com/vsch/flexmark-java">FlexMark&lt;/a> as the back end for the markdown to html
conversion. This is a big moment as now a lot more flexibility has been introduced for the library and that means more
features.&lt;/p>
&lt;p>Following my promise of making smaller and more frequent release updates, this port has ushered in version &lt;code>0.2.1&lt;/code> of
kMD2PDF and I&amp;rsquo;m really excited!&lt;/p>
&lt;h2 id="changelog">
&lt;a href="#changelog" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Changelog
&lt;/h2>
&lt;ul>
&lt;li>Backend library using flexmark&lt;/li>
&lt;li>Unit testing framework set up for testing node rendering&lt;/li>
&lt;li>Task list items now supported&lt;/li>
&lt;/ul>
&lt;h2 id="original-design">
&lt;a href="#original-design" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Original design
&lt;/h2>
&lt;p>Originally, the library used commonmark to handle &lt;code>.md&lt;/code> to &lt;code>.html&lt;/code> conversions, but it was severely limited as the
number of useful extensions was severely lacking and it resulting in a terrible codebase. However, with FlexMark, this
problem is alleviated as it has all the features I need.&lt;/p>
&lt;h2 id="hiccups">
&lt;a href="#hiccups" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Hiccups
&lt;/h2>
&lt;p>There was a slight hiccup with the port as the &lt;code>.html&lt;/code> to &lt;code>.pdf&lt;/code> library,
&lt;a href="https://github.com/flyingsaucerproject/flyingsaucer">flyingsaucer&lt;/a> would not accept the HTML output produced by
FlexMark. So I had to make use of Jsoup to parse the output of FlexMark to become valid XML that the flyingsaucer
library would accept.&lt;/p>
&lt;p>Another issue faced is the node renderers and visitors. In commonmark, these node renderers were a single class that
would be added the parser
(seen &lt;a href="https://github.com/atlassian/commonmark-java#customize-html-rendering">here&lt;/a>) and visitors would be accepted
after the document is parsed
(seen &lt;a href="https://github.com/atlassian/commonmark-java#use-a-visitor-to-process-parsed-nodes">here&lt;/a>). This made it really
easy to create custom node renderers and visitors which were used for figure generation and table of contents
processing. However, with FlexMark, due to the increase in flexibility, the overhead for creating both increased as
well and this resulted in requiring a parsing extension to be created, which would create a custom NodeRenderingFactory
which in turn be responsible for creating custom NodeRenderers to render the needed node, which in this case was the
figure elements. Whilst this may seem all complicated, it was actually outlined in their sample
&lt;a href="https://github.com/vsch/flexmark-java/blob/master/flexmark-java-samples/src/com/vladsch/flexmark/samples/NodeRendererSample.java">repository&lt;/a>
where I was able to successfully create the figure renderer
&lt;a href="https://github.com/omnius-project/kMD2PDF/tree/master/src/main/kotlin/com/github/woojiahao/modifiers/figure">here.&lt;/a>&lt;/p>
&lt;p>The table of content processor was similar in nature. Due to the increased flexibility offered by FlexMark, additional
steps had to be taken to create a visitor to properly create the table of contents. This highlighted the idea that
developing flexible software would often entail having to increase the overhead of the software because it just takes
that many extra steps to provide that flexibility.&lt;/p>
&lt;h2 id="unit-testing-the-dom">
&lt;a href="#unit-testing-the-dom" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Unit testing the DOM
&lt;/h2>
&lt;p>I also worked on attempting to create a system to unit test the node rendering aspect of the library since there can be
a lot of edge cases involved with markdown and it might be useful to have an automated system to be able to ensure that
the code is reliable and performs within my range of expectation.&lt;/p>
&lt;p>I tried to design this API to be as seamless as possible, reducing the moving parts exposed to the user so that they
would not have to fiddle with too many configurations to get it working. What I came up with was rather interesting.
To ensure that the rendering was correct, I had to first find a way to test that the converted markdown file would
produce a certain result. To do so, I exposed the HTML conversion process of &lt;code>MarkdownConverter&lt;/code> to be able to hook
into this using the API.&lt;/p>
&lt;p>The essence of the API is to compare the processed HTML and an expected HTML input using Jsoup to ensure that the they
are the same. This required some basic recursion to assert that every single node matched.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">assertMarkdown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">folder&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">file&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;File should not include extensions as they are added within the method&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">markdownFileName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$file&lt;/span>&lt;span class="s2">.md&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">htmlFileName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$file&lt;/span>&lt;span class="s2">.html&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">markdownFile&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">getResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">folder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">markdownFileName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">htmlFile&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">getResource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">folder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">htmlFileName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">converter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">setupConverter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">markdownFile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">expectedDocument&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">parseDocument&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">htmlFile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">readText&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">actualDocument&lt;/span> &lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parseDocument&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">converter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">generateBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">getElementsByClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Ensure that they both have the same number of children
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">assertEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expectedDocument&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">childCount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">actualDocument&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">childCount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Ensure that they both have the same set of elements
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">expectedDocumentBody&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">expectedDocument&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">actualDocumentBody&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">actualDocument&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">expectedDocumentBody&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">actualDocumentBody&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">forEach&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As you can see, the markdown file will be the actual output produced by the library whilst the html file represents the
expected output.&lt;/p>
&lt;p>This was the bulk of the API, with the recursive function looking like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Element&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ac&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Element&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assertElementEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ac&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">childCount&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="n">until&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">childCount&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">forEach&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">ac&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This allows the users to simply execute the &lt;code>assertMarkdown()&lt;/code> function, providing the resource folder and resource name
of the markdown file and html file. This would set in motion an automated set of testing to ensure that every aspect
of the generated markdown file would produce the appropriate html.&lt;/p>
&lt;p>One limitation that is present with the API is that the file name of the markdown file and html file would have to be
the same, otherwise the assert function would fail. That said, it also encourages for developers trying to use the API
to always stick to the same name for their markdown and html file, which reduces confusion.&lt;/p></description></item><item><title>Lessons on software release</title><link>/post/lessons-on-software-release/</link><pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate><guid>/post/lessons-on-software-release/</guid><description>
&lt;p>Oh boy, I screwed up bad, like &lt;em>really&lt;/em> badly. Ok ok, let&amp;rsquo;s go back and see where it all began. I&amp;rsquo;ve learnt countless
lessons from this and I hope you (reader) will too if you&amp;rsquo;re developing your own software.&lt;/p>
&lt;h2 id="story-time">
&lt;a href="#story-time" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Story time!
&lt;/h2>
&lt;p>2 months ago, I embarked on a journey to write a markdown to PDF converter, called
&lt;a href="https://omnius-project.github.io/kMD2PDF">kMD2PDF&lt;/a>. The initial architecture was developed such that:&lt;/p>
&lt;pre tabindex="0">&lt;code>.md file -&amp;gt; .html file + .css styling -&amp;gt; .pdf
&lt;/code>&lt;/pre>&lt;p>In order to facilitate this system, I used 2 libraries:&lt;/p>
&lt;ol>
&lt;li>&lt;code>commonmark-java&lt;/code> - this facilitated with the &lt;code>.md -&amp;gt; .html&lt;/code> conversion&lt;/li>
&lt;li>&lt;code>flyingsaucer&lt;/code> - this facilitated with the &lt;code>.html -&amp;gt; .pdf&lt;/code> conversion&lt;/li>
&lt;/ol>
&lt;p>In between, I used my own code to create a style DSL to generate the CSS styling. This system worked nicely as I was
able to create an easy to use API for developers using this library.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">document&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MarkdownDocument&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;~/Desktop/README.md&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">convert&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">markdownConverter&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">document&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">document&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">converter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">convert&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="failure-to-research">
&lt;a href="#failure-to-research" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Failure to research
&lt;/h3>
&lt;p>&lt;strong>However,&lt;/strong> I made several big oversights. I failed to plan that the libraries I used were severely limited in what
they could offer. For instance, &lt;code>commonmark-java&lt;/code> does not support task list items, even as an extension and in order
to implement this feature, I had to create a custom &lt;code>NodeRenderer&lt;/code> that would convert bullet lists to task list items
if necessary. Then I realised that because I overrode the default rendering behavior of the bullet lists, I no longer
could create nested lists, so I had to remedy that myself and soon, the project became a bunch of band-aids stuck on
top of the library and it caused the project to steer into a direction of just bug fix upon bug fix, as I attempted to
introduce features into a tightly-coupled system. This made for an incredibly hard time working on the library as I was
de-motivated to implement features since they would result in a mess.&lt;/p>
&lt;p>Worst still, as I researched more libraries for handling markdown parsing, I noticed that there were libraries like
Flexmark that &lt;em>did&lt;/em> provide the support for the features I wanted such as task lists without requiring a lot of hacky
work to be performed to the existing library.&lt;/p>
&lt;p>Similarly, a big hurdle I had to cross with flyingsaucer was getting HTML5 xml code to render as the library required
only XML or XHTML documents. This was a huge bottleneck because now some elements render incorrectly and others
require even longer HTML that isn&amp;rsquo;t always necessary. That&amp;rsquo;s where I discovered OpenHTMLToPDF, which had a similar API
to flyingsaucer but it allowed for HTML5 code and it doesn&amp;rsquo;t constrict users by forcing them to use XHTML (for the
uninitiated, XHTML is a stricter form of HTML, where single-enclosed tags are not permitted, rather, every tag must be
closed off with an ending tag).&lt;/p>
&lt;p>This failure to plan ahead and research properly made my life hell as I spent most of my time fixing issues I created
for myself.&lt;/p>
&lt;h3 id="over-committing">
&lt;a href="#over-committing" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Over committing
&lt;/h3>
&lt;p>Another issue I had stupidly created for myself is over-committing to creating a huge feature push. Initially, after
releasing version 0.1.2, I started work on version 0.2.0 - where many new features would come, along with a set of
changes to the existing API to improve the lives of developers. But&amp;hellip; that&amp;rsquo;s where I failed to realise that I had
bitten off more than I could chew.&lt;/p>
&lt;p>For an entire month, I focussed my efforts on trying to make version 0.2.0 feature complete. And within this period of
time, the stable version of the library never once got updated. This spelt bad news for those who are using 0.1.2 as
they are waiting for over a month for a newer library, whilst they&amp;rsquo;re stuck with a bug-filled library. It also meant
that I would burn out quickly working on the library as I tried pushing to complete the features by an arbitrary
deadline.&lt;/p>
&lt;p>This caused me to be extremely stressed when users of the library would hound me for changes. However, during this
month, I did learn a lot about Kotlin and software development so it wasn&amp;rsquo;t a complete waste of time. I just know it
could have been so much better and smoother.&lt;/p>
&lt;p>This is where I also begin to see the value of Agile development, where we should break up the development into
deliverables across weeks to reduce the workload and to improve the end user experience.&lt;/p>
&lt;h3 id="no-testing">
&lt;a href="#no-testing" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
No testing
&lt;/h3>
&lt;p>An area lacking in the library is unit testing. As the markdown can have many corner cases, it&amp;rsquo;s hard to cater to each
of these. The lack of unit tests meant that the bugs I encounter are always by accident, rather than the result of
methodical checking and testing to ensure that nothing slips the radar.&lt;/p>
&lt;p>Backtracking to unit test everything is also a pain as by this point, I would have forgotten about some of the classes.&lt;/p>
&lt;h2 id="learning-points">
&lt;a href="#learning-points" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Learning points
&lt;/h2>
&lt;p>So what exactly did I take away from this experience and how will I be improving my approach. I&amp;rsquo;ve learnt to be more
methodical with my research before starting a project, I should carefully scope for the best libraries and options
available for the job. I&amp;rsquo;ve also come to realise just how key portioning work and creating frequent deliverables is to
developing good software. Finally, I&amp;rsquo;ve learnt to use TDD or at least, unit test my code as I write them, rather than
leaving it till the last minute.&lt;/p>
&lt;p>So what exactly does this mean for kMD2PDF? Well, I&amp;rsquo;ll begin by announcing several changes to my workflow. First and
foremost, I&amp;rsquo;ll be porting my codebase to use Flexmark and OpenHTMLToPDF over the next few releases, so that&amp;rsquo;s exciting!
Secondly, I&amp;rsquo;ll shorten the release cycle to have new versions of the library be released every 2 weeks where the
versioning will go from &lt;code>0.2.0&lt;/code> to &lt;code>0.2.1&lt;/code> etc. Each release will contain a few features and fixes and the goal is to
make the library stable and ready to use as frequently as possible. Lastly, I&amp;rsquo;ll begin to rolling out a suite of unit
tests for the codebase. I&amp;rsquo;ll adopt TDD in my workflow and hopefully, I can reach &amp;gt; 80% code coverage before version
1.0.0.&lt;/p>
&lt;p>Whilst I&amp;rsquo;m incredibly frustrated about my set backs, I will not allow them to hinder the development and progress of
the library and with a new found resolve to achieve better things, I&amp;rsquo;ll be taking on each new challenge with pride. I
have also greatly enjoyed the past month learning various skills and practicing Kotlin.&lt;/p>
&lt;p>If you&amp;rsquo;re curious about the library, it can be found &lt;a href="https://github.com/omnius-project/kMD2PDF">here.&lt;/a>&lt;/p></description></item><item><title>An investigation into generics in Java</title><link>/post/java-generics/</link><pubDate>Mon, 26 Nov 2018 00:00:00 +0000</pubDate><guid>/post/java-generics/</guid><description>
&lt;p>Generics was a feature introduced in &lt;a href="https://en.wikipedia.org/wiki/Generics_in_Java">Java 5&lt;/a> and it has changed how
Java developers write code.&lt;/p>
&lt;p>This article will be discussing some of the things I&amp;rsquo;ve picked up as I dug into generics in Java.&lt;/p>
&lt;h2 id="uses-of-generics">
&lt;a href="#uses-of-generics" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Uses of generics
&lt;/h2>
&lt;h3 id="pre-generics-era">
&lt;a href="#pre-generics-era" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Pre-generics era
&lt;/h3>
&lt;p>Imagine you wish to create a container to store an object that can be of any type, pre-generics, you would need to do
something like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Container&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getObj&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setObj&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">obj&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Container&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Container&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setObj&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getObj&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Prints &amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setObj&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getObj&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Prints 1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As you can see, this is not type safe as you can put anything into the Container and have it spit out something
because the Container doesn&amp;rsquo;t care for the type of the inputs. You can get around this lack of type safety by giving
the class type of the intended inputs into the Container constructor and check that against the inputs, but that will
be extra code for something that seems so logical.&lt;/p>
&lt;h3 id="generics-era">
&lt;a href="#generics-era" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Generics era
&lt;/h3>
&lt;p>With generics, you can now create the Container with type safety built in and no more casting.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Container&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getObj&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setObj&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">obj&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Container&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Container&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setObj&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getObj&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Prints &amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setObj&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Does not compile because container can only receive Strings&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="whats-going-on">
&lt;a href="#whats-going-on" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What&amp;rsquo;s going on?
&lt;/h2>
&lt;p>This was a question I had asked a lot prior to reading up, because it was such a mysterious process that I could somehow
enforce type safety just with this construct.&lt;/p>
&lt;p>The type safety generics offer is limited to just &lt;strong>compile time&lt;/strong>, this is because of a process
called &lt;a href="https://docs.oracle.com/javase/tutorial/java/generics/erasure.html">Type Erasure&lt;/a> where the generic type
is removed during runtime. This is done in an effort to ensure backward compatibility to pre-generic code.&lt;/p>
&lt;p>This not only means that the type safety isn&amp;rsquo;t extended to runtime, it also means that any operations requiring the use
of this generic type at runtime is not permitted because the type will be erased by that point. For example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// This does not work!&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Java isn&amp;rsquo;t able to recognize the data type of &lt;code>T&lt;/code> during runtime thanks to erasure and thus this line throws and
exception. This is especially troubling as you might want to be able to cast the data types from one generic type to
another, but this is not possible.&lt;/p>
&lt;p>This state can also be referred to as generics being non-reified, meaning, it is not present during runtime.&lt;/p>
&lt;h2 id="kotlin-to-the-rescue">
&lt;a href="#kotlin-to-the-rescue" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Kotlin to the rescue!
&lt;/h2>
&lt;p>Since Kotlin is based off the JVM, it also inherits this type erasure behavior of generic types, which means behavior
with generics you see in Java will be the same in Kotlin. However, Kotlin offers a means of enabling a generic type to
be preserved during runtime, thus removing the &amp;ldquo;burden&amp;rdquo; imposed on it.&lt;/p>
&lt;h3 id="reified-generic-types--inline-functions">
&lt;a href="#reified-generic-types--inline-functions" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Reified generic types + inline functions
&lt;/h3>
&lt;p>In Kotlin, the &lt;a href="https://kotlinlang.org/docs/reference/inline-functions.html">&lt;code>inline&lt;/code>&lt;/a> keyword, makes it so the function
is not expanded into a separate object but rather &amp;ldquo;copy-pasted&amp;rdquo; into the call site of the function, thus allowing some
interesting behavior to occur.&lt;/p>
&lt;p>One such intriguing behavior is allow generic types to be reified, or retained at runtime. Because the function is now
inline, the generic type given to the function can be preserved, thus, allowing you to access the generic type
information during runtime.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="conclusion">
&lt;a href="#conclusion" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Conclusion
&lt;/h2>
&lt;p>Generics are an interesting construct with a lot of thought put into designing them.&lt;/p>
&lt;p>Some articles that might peak your interest:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters">&lt;strong>reified&lt;/strong> keyword in Kotlin&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.oracle.com/javase/tutorial/java/generics/erasure.html">Type Erasure&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.oracle.com/technetwork/articles/java/juneau-generics-2255374.html">Generics: How They Work And Why They Are Important&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Familiarising yourself with lambdas in Kotlin</title><link>/post/kotlin-lambdas/</link><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><guid>/post/kotlin-lambdas/</guid><description>
&lt;p>Kotlin is a language that was built on top of the JVM and what really sets it apart from Java is the emphasis on
&lt;strong>functions being a first-class construct&lt;/strong>, meaning many fancy things like lambdas are directly available to Kotlin
developers without having to include bulky constructs like the concept of &lt;em>functional interfaces&lt;/em>.&lt;/p>
&lt;h2 id="what-are-lambdas">
&lt;a href="#what-are-lambdas" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What are lambdas?
&lt;/h2>
&lt;p>In my article on &lt;a href="https://woojiahao.github.io/Diving-Into-Streams/">Diving Into Streams,&lt;/a> I explained how lambdas
were this miraculous constructs in Java that removed a lot of the boilerplate required when passing behavior from one
method to another.&lt;/p>
&lt;p>However, this definition was really under the assumption of pure Java. Lambdas, as a whole, are a mathematical concept.
In programming, a lambda can be seen as a &amp;ldquo;portable&amp;rdquo; function or a piece of behavior that can be passed around and used
accordingly.&lt;/p>
&lt;h3 id="then-what-are-functions">
&lt;a href="#then-what-are-functions" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Then, what are functions?
&lt;/h3>
&lt;p>Functions are simply pieces of behavior that take in some input (or none at all) and return some output (or none at all)
,
this is very much the same as the mathematical concept it is based off of.&lt;/p>
&lt;h2 id="a-case-for-lambdas">
&lt;a href="#a-case-for-lambdas" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
A case for lambdas
&lt;/h2>
&lt;h3 id="scenario">
&lt;a href="#scenario" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Scenario:
&lt;/h3>
&lt;p>Say you were working in a performance-critical situation and you just discovered that there is a major memory issue with
a function and it is causing some major performance drawbacks and you want to see how long it takes to benchmark and
fix this issue.&lt;/p>
&lt;p>&lt;em>&amp;ldquo;No biggie, I can take the time before and after the execution and check how long that took to benchmark the function&amp;rdquo;&lt;/em>
would be something you are thinking to yourself and that would be true in a simple case like ours.&lt;/p>
&lt;p>You begin to write some code to test this function:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">before&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;foo returns: &lt;/span>&lt;span class="si">${foo(10000)}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">after&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;foo took &lt;/span>&lt;span class="si">${after - before}&lt;/span>&lt;span class="s2">ms to run&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Awesome! It worked, you can now go on your merry way and fix the bug. Then you manager comes around and tells you yet
&lt;em>another&lt;/em> performance issue was found and you think &lt;em>&amp;ldquo;Eh, this is kind of tedious to redo so I guess I could copy-paste
the code I made earlier&amp;rdquo;&lt;/em>.&lt;/p>
&lt;p>Now, would you be able to continually repeat this if you suddenly had a whole class of functions that needed to be
tested?&lt;/p>
&lt;h3 id="lambdas-to-the-rescue">
&lt;a href="#lambdas-to-the-rescue" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Lambdas to the rescue!
&lt;/h3>
&lt;p>Going back to how I mentioned how a lambda is &lt;code>a &amp;quot;portable&amp;quot; function or a piece of behavior that can be passed around and used accordingly.&lt;/code>&lt;/p>
&lt;p>In this scenario, we ideally, would want to have a function that can time &lt;strong>any&lt;/strong> function with a method signature like
&lt;code>foo()&lt;/code> and this timing function would not need to know anything about the function it receives, all it needs to know
it that it should calculate the time before and after this function took to run and print that out, nicely formatted.&lt;/p>
&lt;p>Some basic pseudo-code would look like this:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Details&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Input&lt;/td>
&lt;td>{::nomarkdown}&lt;ol>&lt;li>Name of the function&lt;/li>&lt;li>Function to be timed&lt;/li>&lt;/ol>{:/}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Output&lt;/td>
&lt;td>None, this function will make use of a side effect&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Steps&lt;/td>
&lt;td>{::nomarkdown}&lt;ol>&lt;li>Take the time before running the function&lt;/li>&lt;li>Run the function&lt;/li>&lt;li>Take the time after running the function&lt;/li>&lt;li>Print out the difference between the before and after, this will be total time it took to for the function to run&lt;/li>&lt;/ol>{:/}&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="defining-structure">
&lt;a href="#defining-structure" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Defining structure
&lt;/h4>
&lt;p>In Kotlin, in order to declare a lambda, you have to declare a &lt;em>function type&lt;/em>, or some kind of contract for the
functions to be passed to follow. To simplify things, all the memory leaks that have surfaced all take in exactly 1 Int
input and return an Int, so the function type for this case would look something like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">func&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Int&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note how the function type is literally just the method signature of a potential function without the parameter names.
As mentioned previously, these function types are merely just contracts, it defines what a function to be passed in
should
look like, it does not dictate what the inputs will be used for (generally what the parameter names represent) nor does
it dictate the specific behaviors of this function.&lt;/p>
&lt;h4 id="creating-the-timing-function">
&lt;a href="#creating-the-timing-function" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Creating the timing function
&lt;/h4>
&lt;p>Now that we have the general structure of the function we want to be able to time, we can then proceed with declaring
the
function body of this timer.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">functionTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">upper&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">before&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2"> returned &lt;/span>&lt;span class="si">${func(upper)}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">after&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">currentTimeMillis&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2"> took &lt;/span>&lt;span class="si">${after - before}&lt;/span>&lt;span class="s2">ms to run&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As you can see, this function&amp;rsquo;s body is very much the same as the original method of timing the function in the &lt;code>main&lt;/code>
method. However, whilst there were some similarities, the benefits of creating a specialized function for timing is as
follows:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Modularity&lt;/strong> - your code is now modular and can be reused if needed&lt;/li>
&lt;li>&lt;strong>Flexible&lt;/strong> - because this is a function, you can apply consistent changes to the timing and the changes made will
be reflected in any function timed by this function made&lt;/li>
&lt;li>&lt;strong>Abstraction&lt;/strong> - a new user of your codebase does not need to think about how a function is timed, all they need to
know is how to call this timing function and they know that this function will help to time and do everything for
them&lt;/li>
&lt;li>&lt;strong>Consistency&lt;/strong> - we can remove the &lt;code>upper&lt;/code> argument and apply a consistent argument to be passed to &lt;code>func&lt;/code> so that
the timing is not skewed by changes in the upper, thus ensuring a degree of consistency&lt;/li>
&lt;/ol>
&lt;h4 id="timing-things">
&lt;a href="#timing-things" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Timing things
&lt;/h4>
&lt;p>With the newly made timing function, we can then begin to time how long each function took in our class. Let&amp;rsquo;s begin
with
the first function we tested, which simply added a bunch of numbers from 1 up till an upper value.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">functionTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">10000&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>What we have used is the lambda syntax Kotlin provides. We declare the arguments of the &lt;code>functionTimer&lt;/code> function as per
usual, but we then use &lt;code>{}&lt;/code> which houses the body of the function. We also use the &lt;code>it&lt;/code> keyword, to refer to the one and
only input this lambda receives, which we can assume would be the upper limit (in this case, &lt;em>10000&lt;/em>).&lt;/p>
&lt;p>Another thing to note is we omit the &lt;code>return&lt;/code> keyword from the lambda body even though the function type specifies that
each function has to return an &lt;code>Int&lt;/code>. We simply put the value to be returned on a line of its own and Kotlin is clever
enough to know to return this value.&lt;/p>
&lt;p>Now, we can extend this function to work with any other function that takes in a single Int input and return an Int&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">functionTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;multiply&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">2.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">functionTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;wacky&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1000&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">map&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="p">}.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Sample output:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>add returned 50005000
add took 1ms to run
multiply returned 0
multiply took 0ms to run
wacky returned 1501500
wacky took 58ms to run
&lt;/code>&lt;/pre>&lt;p>You can see how flexible we can make this timer be, taking in all sorts of functions and timing them.&lt;/p>
&lt;h4 id="timing-existing-functions">
&lt;a href="#timing-existing-functions" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Timing existing functions
&lt;/h4>
&lt;p>Sometimes, you might not want to rewrite a long function just to time it, and that is perfectly fine, you can pass a
reference to an existing method for it to be run as such:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">functionTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">10000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="conclusion">
&lt;a href="#conclusion" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Conclusion
&lt;/h2>
&lt;p>Lambdas are far more than just useful for timing stuff, it is extremely versatile and Kotlin uses them extensively
throughout their language, in Collections to APIs that leverage off the design of lambdas.&lt;/p>
&lt;p>Some resources for further reading:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kotlinlang.org/docs/reference/lambdas.html">Kotlin documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.baeldung.com/kotlin-lambda-expressions">Baeldung&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Diving into (Java) streams</title><link>/post/diving-into-streams/</link><pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate><guid>/post/diving-into-streams/</guid><description>
&lt;h2 id="what-are-streams">
&lt;a href="#what-are-streams" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What are streams?
&lt;/h2>
&lt;p>Streams was introduced in Java 1.8 and it had completely changed how we write code. The majority of what I will be discussing will be what I have learnt from watching &lt;a href="https://www.youtube.com/watch?v=1OpAgZvYXLQ&amp;amp;t=6985s">this talk&lt;/a> by Venkat Subramaniam. His talk was what had originally got me into using streams and the concept of lambdas.&lt;/p>
&lt;h2 id="lets-revise">
&lt;a href="#lets-revise" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Let&amp;rsquo;s revise
&lt;/h2>
&lt;h3 id="how-do-we-implement-a-lambda-in-java">
&lt;a href="#how-do-we-implement-a-lambda-in-java" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
How do we implement a lambda in Java?
&lt;/h3>
&lt;p>Lambdas are simple constructs with very powerful use cases in Java and many other languages. Most commonly, lambdas enable the everyday programmer to reduce their clunky &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html">anonymous inner classes&lt;/a> into simple one-liners. It can also be used to pass methods around between methods without having to redeclare these method over and over again.&lt;/p>
&lt;p>The common components that make up a lambda in Java are:&lt;/p>
&lt;ol>
&lt;li>A functional interface&lt;/li>
&lt;li>A method that matches the signature of the method in the functional interface&lt;/li>
&lt;/ol>
&lt;h3 id="what-is-a-functional-interface">
&lt;a href="#what-is-a-functional-interface" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
What is a functional interface?
&lt;/h3>
&lt;p>A functional interface is an interface that contains a single method.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">StringOp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">perform&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="using-a-lambda">
&lt;a href="#using-a-lambda" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Using a lambda:
&lt;/h3>
&lt;p>Code:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">StringOp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">perform&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">LambdaDemo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">StringOp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">operation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">reverse&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">operation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">dlroW&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">olleH&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In this example, I created a functional interface (&lt;code>StringOp&lt;/code>), declared an instance of that functional interface (&lt;code>operation&lt;/code>) and gave it&amp;rsquo;s definition all in one line using a lambda.&lt;/p>
&lt;p>The core syntax of the lambda is as such:&lt;/p>
&lt;pre tabindex="0">&lt;code>(parameters) -&amp;gt; {
actions
}
&lt;/code>&lt;/pre>&lt;p>In cases where there is only 1 parameter, the parantheses can be omitted, as seen in the example, and if the method body a single line, you can also omit the curly braces.&lt;/p>
&lt;p>If lambdas did not exist, I would have to declare the method like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">StringOp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">operation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringOp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">perform&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">reverse&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">operation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">perform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>These are just simple examples of what lambdas are capable of, there a many more uses for them and you can check out a more comprehensive guide here: &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&lt;/a>&lt;/p>
&lt;h2 id="starting-streams">
&lt;a href="#starting-streams" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Starting streams
&lt;/h2>
&lt;p>I will first begin by showing an example of a typical program and then showing the power of streams and how they can be used to simplify your work.&lt;/p>
&lt;p>&lt;strong>Problem:&lt;/strong> Write a program to print out all numbers that are multiples of a given number within a given range.&lt;/p>
&lt;p>&lt;strong>Traditional Solution:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Solution&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">printMultiples&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiple&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiple&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">printMultiples&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Streams Solution:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Solution&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">printMultiples&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiple&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">IntStream&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">rangeClosed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiple&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">printMultiples&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Output:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>2
4
6
8
10
&lt;/code>&lt;/pre>&lt;p>As you can see, both methods produce the same output, however, the latter is a lot neater than the former. Not only is the solution simpler to understand than the solution that introduces loops and if statements, it is a lot easier to read and understand.&lt;/p>
&lt;h2 id="explanation">
&lt;a href="#explanation" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Explanation:
&lt;/h2>
&lt;p>The reason why methods like &lt;code>.filter(i -&amp;gt; i % multiple == 0)&lt;/code> works is due to the use of functional interface as mentioned previously. According to the Java documentation on streams, &lt;code>.filter()&lt;/code> receives a &lt;code>Predicate&lt;/code> interface as a parameter.&lt;/p>
&lt;blockquote>
&lt;p>Represents a predicate (boolean-valued function) of one argument.&lt;/p>
&lt;/blockquote>
&lt;p>This means in order to create a lambda that receives one argument and returns a boolean condition.&lt;/p>
&lt;h2 id="method-references">
&lt;a href="#method-references" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Method references
&lt;/h2>
&lt;p>Another unusual syntax you might have noticed is this &lt;code>forEach(System.out::println)&lt;/code>, you might be scratching your head and wondering that this &lt;code>::&lt;/code> symbol is doing. Well, it is known as a &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">method reference&lt;/a>. The core idea with method references would be as Mr. Venkat put it&lt;/p>
&lt;blockquote>
&lt;p>Since the value is a simple pass over, you can use a method reference.&lt;/p>
&lt;/blockquote>
&lt;p>To illustrate this, let&amp;rsquo;s see how you would use the &lt;code>.forEach()&lt;/code> method normally:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">menu&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Pizza&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Cola&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Salad&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">menu&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">menuItem&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">menuItem&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;pre tabindex="0">&lt;code>Pizza
Cola
Salad
&lt;/code>&lt;/pre>&lt;p>As you can see, for &lt;code>forEach()&lt;/code>, the &lt;code>menuItem&lt;/code> argument you receive is simply being passed onto the &lt;code>System.out.println&lt;/code> method call, and since no other modification is being made to this &lt;code>menuItem&lt;/code> value, you can use a method reference to &lt;code>System.out.println&lt;/code> to shorten to code.&lt;/p>
&lt;p>In this particular instance, since &lt;code>println&lt;/code> is a static method of the &lt;code>System.out&lt;/code> object, the method reference will be a reference to a static method, which means the syntax would simply be having the &lt;code>object name&lt;/code> followed by the &lt;code>::&lt;/code> symbol and then the &lt;code>target method name&lt;/code>.&lt;/p></description></item></channel></rss>